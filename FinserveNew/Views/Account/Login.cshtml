@{
    ViewData["Title"] = "Login";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <form asp-action="Login" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        
                        <div class="form-group mb-3">
                            <label for="email" class="control-label">Email</label>
                            <input type="email" id="email" name="email" class="form-control" required />
                        </div>
                        
                        <div class="form-group mb-3">
                            <label for="password" class="control-label">Password</label>
                            <input type="password" id="password" name="password" class="form-control" required />
                        </div>
                        
                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@* use this at the controllers *@

@* [Authorize(Roles = "Admin")] *@
@* public IActionResult AdminDashboard() => View(); *@

@* [Authorize(Roles = "Employee")] *@
@* public IActionResult EmployeeDashboard() => View(); *@


@* Uncomment and use this in the layout or specific views to show different menus based on roles *@
@* at the nav bar layout *@

@* @if (User.IsInRole("Admin")) *@
@* { *@
@*     <!-- Admin menu items --> *@
@* } *@
@* @if (User.IsInRole("Employee")) *@
@* { *@
@*     <!-- Employee menu items --> *@
@* } *@

