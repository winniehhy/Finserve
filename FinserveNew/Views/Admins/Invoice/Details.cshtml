@model FinserveNew.Models.Invoice
@{
    ViewData["Title"] = "Invoice Details";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="page-title mb-0">Invoice Details</h2>
        <small class="text-muted">Invoice #@Model.InvoiceNumber</small>
    </div>
    <div>
        <button type="button" class="btn btn-primary me-2" onclick="previewInvoice()">
            <i class="fas fa-eye me-2"></i>Preview PDF
        </button>
        <button type="button" class="btn btn-success me-2" onclick="downloadInvoicePDF()">
            <i class="fas fa-download me-2"></i>Download PDF
        </button>
        @if (Model.CanEdit)
        {
            <a href="@Url.Action("Edit", "Invoice", new { id = Model.InvoiceID })" class="btn btn-outline-warning me-2">
                <i class="fas fa-edit me-2"></i>Edit
            </a>
        }
        <a href="@Url.Action("InvoiceRecord", "Invoice")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-2"></i>Back to List
        </a>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="form-container">
    <div class="row">
        <!-- Main Invoice Details -->
        <div class="col-md-8">
            <!-- Client and Invoice Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-file-invoice me-2"></i>Invoice Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-user me-2"></i>Client Information
                            </h6>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Invoice Number:</label>
                                <p class="form-control-plaintext">@Model.InvoiceNumber</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Client Name:</label>
                                <p class="form-control-plaintext">@Model.ClientName</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Client Company:</label>
                                <p class="form-control-plaintext">@(Model.ClientCompany ?? "N/A")</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Client Email:</label>
                                <p class="form-control-plaintext">
                                    @if (!string.IsNullOrEmpty(Model.ClientEmail))
                                    {
                                        <a href="mailto:@Model.ClientEmail">@Model.ClientEmail</a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-calendar me-2"></i>Invoice Details
                            </h6>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Issue Date:</label>
                                <p class="form-control-plaintext">@Model.IssueDate.ToString("dd/MM/yyyy")</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Due Date:</label>
                                <p class="form-control-plaintext">
                                    @Model.DueDate.ToString("dd/MM/yyyy")
                                    @if (Model.IsOverdue)
                                    {
                                        <span class="badge bg-danger ms-2">Overdue</span>
                                    }
                                </p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Total Amount:</label>
                                <p class="form-control-plaintext fs-4 fw-bold text-success">@Model.FormattedAmount</p>
                            </div>
                            <div class="mb-3">
                                <label class="form-label fw-bold">Currency:</label>
                                <p class="form-control-plaintext">@Model.Currency</p>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Remark))
                    {
                        <div class="row">
                            <div class="col-12">
                                <hr>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Remarks:</label>
                                    <div class="border rounded p-3 bg-light">
                                        @Model.Remark
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Model.FilePath))
                    {
                        <div class="row">
                            <div class="col-12">
                                <hr>
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Attached File:</label>
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-paperclip me-2"></i>
                                        <a href="@Model.FilePath" target="_blank" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-external-link-alt me-1"></i>View Attachment
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Invoice Items -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>Invoice Items
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.InvoiceItems != null && Model.InvoiceItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Description</th>
                                        <th class="text-center">Quantity</th>
                                        <th class="text-end">Unit Price</th>
                                        <th class="text-end">Line Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.InvoiceItems)
                                    {
                                        <tr>
                                            <td>@item.Description</td>
                                            <td class="text-center">@item.Quantity</td>
                                            <td class="text-end">
                                                @(Model.Currency == "MYR" ? "RM" : Model.Currency == "USD" ? "$" : Model.Currency) @item.UnitPrice.ToString("N2")
                                            </td>
                                            <td class="text-end fw-bold">
                                                @(Model.Currency == "MYR" ? "RM" : Model.Currency == "USD" ? "$" : Model.Currency) @item.LineTotal.ToString("N2")
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="3" class="text-end">Subtotal:</th>
                                        <th class="text-end">@Model.FormattedAmount</th>
                                    </tr>
                                    <tr>
                                        <th colspan="3" class="text-end">Tax:</th>
                                        <th class="text-end">@(Model.Currency == "MYR" ? "RM" : Model.Currency == "USD" ? "$" : Model.Currency) 0.00</th>
                                    </tr>
                                    <tr>
                                        <th colspan="3" class="text-end fs-5">TOTAL:</th>
                                        <th class="text-end fs-5">@Model.FormattedAmount</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No invoice items found.</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Status and Actions Sidebar -->
        <div class="col-md-4">
            <!-- Status Card -->
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-info-circle me-2"></i>Status Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Current Status:</label>
                        <div>
                            <span class="badge @Model.StatusBadgeClass fs-6">@Model.Status</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Year:</label>
                        <p class="form-control-plaintext">@Model.Year</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Created Date:</label>
                        <p class="form-control-plaintext">@Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Created By:</label>
                        <p class="form-control-plaintext">@(Model.CreatedBy ?? "System")</p>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            @if (Model.Status != "Paid" && Model.Status != "Cancelled")
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">
                            <i class="fas fa-cogs me-2"></i>Quick Actions
                        </h6>
                    </div>
                    <div class="card-body">
                        @if (Model.CanSend)
                        {
                            <form asp-action="SendToClient" asp-route-id="@Model.InvoiceID" method="post" class="mb-2">
                                <button type="submit" class="btn btn-primary btn-sm w-100" onclick="return confirm('Send this invoice to client?')">
                                    <i class="fas fa-paper-plane me-1"></i>Send to Client
                                </button>
                            </form>
                        }
                        @if (Model.CanMarkPaid)
                        {
                            <form asp-action="MarkAsPaid" asp-route-id="@Model.InvoiceID" method="post" class="mb-2">
                                <button type="submit" class="btn btn-success btn-sm w-100" onclick="return confirm('Mark this invoice as paid?')">
                                    <i class="fas fa-money-bill-wave me-1"></i>Mark as Paid
                                </button>
                            </form>
                        }
                        @if (Model.Status == "Pending" || Model.Status == "Sent")
                        {
                            <hr>
                            <form asp-action="UpdateStatus" asp-route-id="@Model.InvoiceID" method="post">
                                <input type="hidden" name="status" value="Cancelled" />
                                <button type="submit" class="btn btn-danger btn-sm w-100" onclick="return confirm('Are you sure you want to cancel this invoice?')">
                                    <i class="fas fa-times me-1"></i>Cancel Invoice
                                </button>
                            </form>
                        }
                    </div>
                </div>
            }

            <!-- Invoice Summary -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-calculator me-2"></i>Invoice Summary
                    </h6>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Items Count:</span>
                        <strong>@(Model.InvoiceItems?.Count ?? 0)</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <strong>@Model.FormattedAmount</strong>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Tax:</span>
                        <strong>@(Model.Currency == "MYR" ? "RM" : Model.Currency == "USD" ? "$" : Model.Currency) 0.00</strong>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <strong class="fs-5">Total Amount:</strong>
                        <strong class="text-success fs-5">@Model.FormattedAmount</strong>
                    </div>
                    <div class="d-flex justify-content-between">
                        <span>Status:</span>
                        <span class="badge @Model.StatusBadgeClass">@Model.Status</span>
                    </div>
                    @if (Model.IsOverdue)
                    {
                        <div class="alert alert-danger mt-3 mb-0" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Overdue!</strong> This invoice is past its due date.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- PDF Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1" aria-labelledby="previewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewModalLabel">Invoice Preview - @Model.InvoiceNumber</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="pdfPreview" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="downloadInvoicePDF()">
                    <i class="fas fa-download me-2"></i>Download PDF
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    
    <script>
        let currentPDF = null;

        function previewInvoice() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Generate PDF with current invoice data
            generateInvoicePDF(doc, {
                invoiceNumber: '@Model.InvoiceNumber',
                clientName: '@Html.Raw(Html.Encode(Model.ClientName))',
                clientCompany: '@Html.Raw(Html.Encode(Model.ClientCompany ?? ""))',
                clientEmail: '@Html.Raw(Html.Encode(Model.ClientEmail ?? ""))',
                issueDate: '@Model.IssueDate.ToString("dd/MM/yyyy")',
                dueDate: '@Model.DueDate.ToString("dd/MM/yyyy")',
                totalAmount: '@Model.TotalAmount.ToString("F2")',
                currency: '@Model.Currency',
                remark: '@Html.Raw(Html.Encode(Model.Remark ?? ""))',
                status: '@Model.Status',
                items: @Html.Raw(Json.Serialize((Model.InvoiceItems ?? new List<FinserveNew.Models.InvoiceItem>()).Select(item => new { 
                    description = item.Description, 
                    quantity = item.Quantity, 
                    price = item.UnitPrice.ToString("F2"), 
                    amount = item.LineTotal.ToString("F2") 
                }).ToList()))
            });

            currentPDF = doc;

            const pdfOutput = doc.output('datauristring');
            document.getElementById('pdfPreview').innerHTML =
                `<iframe src="${pdfOutput}" width="100%" height="100%" style="border: none;"></iframe>`;

            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            modal.show();
        }

        function downloadInvoicePDF() {
            if (!currentPDF) {
                // Generate PDF if not already generated
                previewInvoice();
            }
            
            if (currentPDF) {
                currentPDF.save(`Invoice_@Model.InvoiceNumber`);
            }
        }

        function generateInvoicePDF(doc, data) {
            const currencySymbol = data.currency === 'MYR' ? 'RM' : data.currency === 'USD' ? '$' : data.currency;

            // Header
            doc.setFontSize(24);
            doc.setFont(undefined, 'bold');
            doc.text('Finserve', 20, 30);

            doc.setFontSize(20);
            doc.text('INVOICE', 150, 30);

            // Invoice details (top right)
            doc.setFontSize(10);
            doc.setFont(undefined, 'normal');
            doc.text(`Invoice #: ${data.invoiceNumber}`, 150, 45);
            doc.text(`Issue Date: ${data.issueDate}`, 150, 55);
            doc.text(`Due Date: ${data.dueDate}`, 150, 65);
            doc.text(`Status: ${data.status}`, 150, 75);

            // From section
            doc.setFontSize(12);
            doc.setFont(undefined, 'bold');
            doc.text('FROM:', 20, 60);
            doc.setFont(undefined, 'normal');
            doc.text('Finserve', 20, 70);
            doc.text('Jalan Genting Kelang,', 20, 80);
            doc.text('53300 Kuala Lumpur, Malaysia', 20, 90);

            // To section
            doc.setFont(undefined, 'bold');
            doc.text('TO:', 20, 110);
            doc.setFont(undefined, 'normal');
            doc.text(data.clientName, 20, 120);
            if (data.clientCompany) {
                doc.text(data.clientCompany, 20, 130);
                doc.text(data.clientEmail, 20, 140);
            } else {
                doc.text(data.clientEmail, 20, 130);
            }

            // Table header
            const startY = 160;
            doc.setFont(undefined, 'bold');
            doc.rect(20, startY, 170, 10);
            doc.setFillColor(240, 240, 240);
            doc.rect(20, startY, 170, 10, 'F');

            doc.text('Description', 25, startY + 7);
            doc.text('Qty', 110, startY + 7);
            doc.text('Unit Price', 130, startY + 7);
            doc.text('Total', 160, startY + 7);

            // Table rows
            doc.setFont(undefined, 'normal');
            let currentY = startY + 10;
            let subtotal = 0;

            data.items.forEach((item, index) => {
                doc.rect(20, currentY, 170, 10);
                
                // Truncate description if too long
                let description = item.description;
                if (description.length > 30) {
                    description = description.substring(0, 30) + '...';
                }
                
                doc.text(description, 25, currentY + 7);
                doc.text(item.quantity.toString(), 110, currentY + 7);
                doc.text(`${currencySymbol} ${item.price}`, 130, currentY + 7);
                doc.text(`${currencySymbol} ${item.amount}`, 160, currentY + 7);
                currentY += 10;
                subtotal += parseFloat(item.amount);
            });

            // Add empty rows for better formatting
            for (let i = data.items.length; i < 3; i++) {
                doc.rect(20, currentY, 170, 10);
                currentY += 10;
            }

            // Totals section
            currentY += 10;
            doc.setFont(undefined, 'bold');
            doc.text('Subtotal:', 130, currentY);
            doc.text(`${currencySymbol} ${subtotal.toFixed(2)}`, 160, currentY);

           
            currentY += 15;
            doc.setFontSize(14);
            doc.text('TOTAL AMOUNT:', 130, currentY);
            doc.text(`${currencySymbol} ${parseFloat(data.totalAmount).toFixed(2)}`, 160, currentY);

            // Notes section
            if (data.remark && data.remark.trim() !== '') {
                currentY += 20;
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.text('Notes:', 20, currentY);

                doc.rect(20, currentY + 5, 170, 30);
                doc.setFont(undefined, 'normal');
                doc.setFontSize(10);
                
                // Split long remarks into multiple lines
                const lines = doc.splitTextToSize(data.remark, 160);
                let noteY = currentY + 15;
                lines.forEach(line => {
                    if (noteY < currentY + 30) { // Stay within the box
                        doc.text(line, 25, noteY);
                        noteY += 5;
                    }
                });
            }

            // Footer
            const pageHeight = doc.internal.pageSize.height;
            doc.setFontSize(10);
            doc.setFont(undefined, 'italic');
            doc.text('Thank you for your business!', 20, pageHeight - 20);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 150, pageHeight - 20);
        }
    </script>
}