@model FinserveNew.Models.Claim
@{
    ViewData["Title"] = "Create New Claim";
}
<div class="page-title">Create New Claim</div>

@* Debug Messages for Success/Error *@
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["FileUploadStatus"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <strong>File Upload Status:</strong> @TempData["FileUploadStatus"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["DebugInfo"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Debug Info:</strong> @TempData["DebugInfo"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="form-container">
    <form asp-action="Create" method="post" enctype="multipart/form-data" id="claimForm">
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

        @* Fixed: Set default value if model is null *@
        <input type="hidden" name="EmployeeId" value="@(Model?.EmployeeId ?? "E001")" />

        <!-- Claim Type -->
        <div class="mb-3">
            <label asp-for="ClaimType" class="form-label">Claim Type</label>
            <select asp-for="ClaimType" class="form-select" required>
                <option value="">Select claim type...</option>
                <option value="Travel">Travel</option>
                <option value="Medical">Medical</option>
                <option value="Equipment">Equipment</option>
                <option value="Training">Training</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Other">Other</option>
            </select>
            <span asp-validation-for="ClaimType" class="text-danger"></span>
        </div>

        <!-- Claim Amount -->
        <div class="mb-3">
            <label asp-for="ClaimAmount" class="form-label">Claim Amount</label>
            <div class="input-group">
                <span class="input-group-text">RM</span>
                <input asp-for="ClaimAmount" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" required />
            </div>
            <span asp-validation-for="ClaimAmount" class="text-danger"></span>
        </div>

        <!-- Upload Supporting Document -->
        <div class="mb-4">
            <label class="form-label">Upload Supporting Document</label>
            <div class="input-group">
                <input type="file" name="supportingDocument" id="fileInput" class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx">
                <label class="input-group-text" id="file-label">Choose file...</label>
            </div>
            <small class="form-text text-muted">Accepted formats: PDF, JPG, PNG, DOC, DOCX (Max 5MB)</small>
            <div id="fileDebugInfo" class="mt-2 text-muted" style="display: none;"></div>
        </div>

        <!-- Description field -->
        <div class="mb-3">
            <label asp-for="Description" class="form-label">Description (Optional)</label>
            <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter additional details about your claim..."></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <!-- Submit Button -->
        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-paper-plane me-2"></i>
                <span id="submitText">Submit Claim</span>
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-times me-2"></i>
                Cancel
            </a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileInput = document.getElementById('fileInput');
            const fileLabel = document.getElementById('file-label');
            const fileDebugInfo = document.getElementById('fileDebugInfo');
            const form = document.getElementById('claimForm');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');

            // Debug: Check if EmployeeId is set
            const employeeIdInput = document.querySelector('[name="EmployeeId"]');
            console.log('EmployeeId input found:', employeeIdInput ? 'Yes' : 'No');
            console.log('EmployeeId value:', employeeIdInput?.value || 'Not set');

            // File selection debugging
            fileInput.addEventListener('change', function(e) {
                const file = e.target.files[0];

                if (file) {
                    // Update label with filename
                    fileLabel.textContent = file.name;

                    // Show debug information
                    const debugInfo = `
                        <strong>File Selected:</strong><br>
                        • Name: ${file.name}<br>
                        • Size: ${(file.size / 1024 / 1024).toFixed(2)} MB<br>
                        • Type: ${file.type}<br>
                        • Last Modified: ${new Date(file.lastModified).toLocaleString()}
                    `;
                    fileDebugInfo.innerHTML = debugInfo;
                    fileDebugInfo.style.display = 'block';

                    // File size validation
                    const maxSize = 5 * 1024 * 1024; // 5MB
                    if (file.size > maxSize) {
                        alert(`File size (${(file.size / 1024 / 1024).toFixed(2)} MB) exceeds the maximum limit of 5MB`);
                        fileInput.value = '';
                        fileLabel.textContent = 'Choose file...';
                        fileDebugInfo.style.display = 'none';
                    }

                    console.log('File selected:', {
                        name: file.name,
                        size: file.size,
                        type: file.type,
                        lastModified: file.lastModified
                    });
                } else {
                    fileLabel.textContent = 'Choose file...';
                    fileDebugInfo.style.display = 'none';
                }
            });

            // Form submission debugging
            form.addEventListener('submit', function(e) {
                console.log('Form submission started...');

                // Change button state
                submitBtn.disabled = true;
                submitText.textContent = 'Submitting...';

                // Log form data
                const formData = new FormData(form);
                console.log('Form data being submitted:');
                for (let [key, value] of formData.entries()) {
                    if (key === 'supportingDocument' && value instanceof File) {
                        console.log(`${key}:`, {
                            name: value.name,
                            size: value.size,
                            type: value.type
                        });
                    } else {
                        console.log(`${key}: ${value}`);
                    }
                }

                // Validate required fields
                const claimType = document.querySelector('[name="ClaimType"]').value;
                const claimAmount = document.querySelector('[name="ClaimAmount"]').value;
                const employeeId = document.querySelector('[name="EmployeeId"]').value;

                console.log('Validation check:', {
                    claimType: claimType,
                    claimAmount: claimAmount,
                    hasFile: fileInput.files.length > 0,
                    employeeId: employeeId
                });

                if (!claimType || !claimAmount || !employeeId) {
                    console.error('Validation failed: Missing required fields');
                    submitBtn.disabled = false;
                    submitText.textContent = 'Submit Claim';
                    return false;
                }

                console.log('Form validation passed, submitting...');
                return true;
            });

            // Add debugging for page load
            console.log('Employee claim form page loaded successfully');
            console.log('Form element found:', form ? 'Yes' : 'No');
            console.log('File input found:', fileInput ? 'Yes' : 'No');
        });
    </script>
}