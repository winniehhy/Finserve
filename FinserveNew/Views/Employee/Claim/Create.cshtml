@model FinserveNew.Models.Claim
@{
    ViewData["Title"] = "Create New Claim";
}
<div class="page-title">Create New Claim</div>

@if (TempData["Success"] != null)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    @TempData["Success"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["Error"] != null)
{
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    @TempData["Error"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["FileUploadStatus"] != null)
{
<div class="alert alert-info alert-dismissible fade show" role="alert">
    <strong>File Upload Status:</strong> @TempData["FileUploadStatus"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["DebugInfo"] != null)
{
<div class="alert alert-warning alert-dismissible fade show" role="alert">
    <strong>Debug Info:</strong> @TempData["DebugInfo"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

<div class="form-container">
    <form asp-action="Create" method="post" enctype="multipart/form-data" id="claimForm">
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
        <input type="hidden" name="EmployeeId" value="@(Model?.EmployeeID ?? "EM001")" />

        <div class="mb-3">
            <label asp-for="ClaimType" class="form-label">Claim Type</label>
            <select asp-for="ClaimType" class="form-select" required>
                <option value="">Select claim type...</option>
                <option value="Travel">Travel</option>
                <option value="Medical">Medical</option>
                <option value="Equipment">Equipment</option>
                <option value="Training">Training</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Other">Other</option>
            </select>
            <span asp-validation-for="ClaimType" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="ClaimDate" class="form-label">Claim Date</label>
            <input asp-for="ClaimDate" class="form-control" type="date" required />
            <span asp-validation-for="ClaimDate" class="text-danger"></span>
            <small class="form-text text-muted">Date when the expense occurred</small>
        </div>

        <div class="mb-3">
            <label asp-for="ClaimAmount" class="form-label">Claim Amount</label>
            <div class="row">
                <div class="col-md-8">
                    <div class="input-group">
                        <select id="currencySelect" class="input-group-text" style="border-right: none; background-color: #e9ecef;">
                            <option value="MYR">RM</option>
                            <option value="USD">$</option>
                        </select>
                        <input asp-for="ClaimAmount" id="claimAmountInput" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" required />
                    </div>
                    <span asp-validation-for="ClaimAmount" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <div id="conversionDisplay" class="alert alert-info mb-0 py-2" style="display: none;">
                        <small id="conversionText"></small>
                    </div>
                </div>
            </div>
            <div class="mt-2">
                <small class="text-muted">
                    <span id="exchangeRateInfo">Exchange rate will be displayed when amount is entered</span>
                </small>
            </div>
        </div>

        <div class="mb-4">
            <label class="form-label">Upload Supporting Documents</label>
            <div class="input-group">
                <input type="file" name="UploadedFiles" id="fileInput" class="form-control" multiple
                       accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" onchange="handleFileSelection(this)">
                <label class="input-group-text" id="file-label">Choose files...</label>
            </div>
            <small class="form-text text-muted">
                Accepted formats: PDF, JPG, PNG, DOC, DOCX (Max 5MB per file, Maximum 10 files)
            </small>
            <div id="fileList" class="mt-2" style="display: none;">
                <div class="card">
                    <div class="card-header py-2">
                        <small class="fw-bold">Selected Files:</small>
                    </div>
                    <div class="card-body py-2" id="fileListContent"></div>
                </div>
            </div>
            <div id="fileDebugInfo" class="mt-2 text-muted" style="display: none;"></div>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label">Description (Optional)</label>
            <textarea asp-for="Description" id="descriptionInput" class="form-control" rows="3" placeholder="Enter additional details about your claim..."></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
            <small class="form-text text-muted">This will be preserved and shown in the OCR review page.</small>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-paper-plane me-2"></i>
                <span id="submitText">Add</span>
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-times me-2"></i>
                Cancel
            </a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        const exchangeRates = {
            USD_TO_MYR: 4.29,
            MYR_TO_USD: 0.233
        };

        document.addEventListener('DOMContentLoaded', function () {
            const fileInput = document.getElementById('fileInput');
            const fileLabel = document.getElementById('file-label');
            const fileList = document.getElementById('fileList');
            const fileListContent = document.getElementById('fileListContent');
            const fileDebugInfo = document.getElementById('fileDebugInfo');
            const form = document.getElementById('claimForm');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const currencySelect = document.getElementById('currencySelect');
            const claimAmountInput = document.getElementById('claimAmountInput');
            const conversionDisplay = document.getElementById('conversionDisplay');
            const conversionText = document.getElementById('conversionText');
            const exchangeRateInfo = document.getElementById('exchangeRateInfo');
            const claimDateInput = document.querySelector('[name="ClaimDate"]');
            const descriptionInput = document.getElementById('descriptionInput');

            // Currency conversion
            function updateConversion() {
                const amount = parseFloat(claimAmountInput.value);
                const selectedCurrency = currencySelect.value;

                if (amount && amount > 0) {
                    let convertedAmount, fromCurrency, toCurrency, rate;

                    if (selectedCurrency === 'USD') {
                        convertedAmount = (amount * exchangeRates.USD_TO_MYR).toFixed(2);
                        fromCurrency = 'USD';
                        toCurrency = 'MYR';
                        rate = exchangeRates.USD_TO_MYR;
                        conversionText.innerHTML = `<strong>≈ RM ${convertedAmount}</strong>`;
                    } else {
                        convertedAmount = (amount * exchangeRates.MYR_TO_USD).toFixed(2);
                        fromCurrency = 'MYR';
                        toCurrency = 'USD';
                        rate = exchangeRates.MYR_TO_USD;
                        conversionText.innerHTML = `<strong>≈ $${convertedAmount}</strong>`;
                    }

                    conversionDisplay.style.display = 'block';
                    exchangeRateInfo.textContent = `Exchange rate: 1 ${fromCurrency} = ${rate} ${toCurrency} (indicative)`;
                } else {
                    conversionDisplay.style.display = 'none';
                    exchangeRateInfo.textContent = 'Exchange rate will be displayed when amount is entered';
                }
            }

            claimAmountInput.addEventListener('input', updateConversion);
            currencySelect.addEventListener('change', updateConversion);

            // Initialize currency conversion
            updateConversion();

            // ENHANCED FORM SUBMISSION HANDLER
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                console.log('Form submission started...');

                submitBtn.disabled = true;
                submitText.textContent = 'Processing...';

                const claimType = document.querySelector('[name="ClaimType"]').value;
                const claimAmount = claimAmountInput.value;
                const claimDate = claimDateInput.value;
                const employeeId = document.querySelector('[name="EmployeeId"]').value;
                // FIXED: Get description value properly
                const description = descriptionInput.value.trim();

                console.log('Form data collected:', {
                    claimType,
                    claimAmount,
                    claimDate,
                    employeeId,
                    description: description || '(empty)'
                });

                // Validation - including date validation
                if (!claimType || !claimAmount || !claimDate || !employeeId) {
                    console.error('Validation failed: Missing required fields');
                    submitBtn.disabled = false;
                    submitText.textContent = 'Add';

                    // Show specific validation message for missing date
                    if (!claimDate) {
                        alert('Please select a claim date');
                    } else {
                        alert('Please fill in all required fields');
                    }
                    return false;
                }

                // Validate that claim date is not in the future
                const selectedDate = new Date(claimDate);
                const today = new Date();
                today.setHours(23, 59, 59, 999); // Set to end of day for comparison

                if (selectedDate > today) {
                    alert('Claim date cannot be in the future. Please select a valid date.');
                    submitBtn.disabled = false;
                    submitText.textContent = 'Add';
                    return false;
                }

                // Calculate converted amount for storage
                const selectedCurrency = currencySelect.value;
                let finalAmount = parseFloat(claimAmount);
                let originalAmount = finalAmount;
                let originalCurrency = selectedCurrency;

                console.log(`Original values - Type: ${claimType}, Amount: ${originalAmount}, Currency: ${originalCurrency}, Date: ${claimDate}, Description: "${description}"`);

                // Convert to MYR if needed
                if (selectedCurrency === 'USD') {
                    finalAmount = finalAmount * exchangeRates.USD_TO_MYR;
                }

                // Prepare claim data - FIXED: Include description properly
                const claimData = {
                    EmployeeId: employeeId,
                    ClaimType: claimType,
                    ClaimDate: claimDate,
                    ClaimAmount: finalAmount.toFixed(2),
                    Description: description, // FIXED: Include description
                    Currency: 'MYR',
                    OriginalAmount: originalAmount.toString(),
                    OriginalCurrency: originalCurrency,
                    Files: []
                };

                console.log('Prepared claim data with description:', claimData);

                // Process files
                const files = Array.from(fileInput.files);
                if (files.length > 0) {
                    try {
                        console.log(`Processing ${files.length} files...`);
                        for (const file of files) {
                            const base64String = await convertFileToBase64(file);
                            claimData.Files.push({
                                name: file.name,
                                type: file.type,
                                size: file.size,
                                data: base64String
                            });
                        }
                        console.log(`Successfully processed ${claimData.Files.length} files`);
                    } catch (error) {
                        console.error('File conversion failed:', error);
                        submitBtn.disabled = false;
                        submitText.textContent = 'Add';
                        alert('Failed to process files. Please try again.');
                        return false;
                    }
                }

                // Store in session storage for fallback - FIXED: Store complete data
                sessionStorage.setItem('claimData', JSON.stringify(claimData));
                console.log('Data stored in sessionStorage with description:', {
                    hasDescription: !!claimData.Description,
                    description: claimData.Description
                });

                console.log('Final claimData being sent:', {
                    ...claimData,
                    Files: claimData.Files.map(f => ({
                        name: f.name,
                        size: f.size,
                        type: f.type,
                        hasData: !!f.data,
                        dataPreview: f.data ? f.data.substring(0, 50) + '...' : 'No data'
                    }))
                });

                // Send data via fetch with proper headers and error handling
                try {
                    const formData = new FormData();
                    formData.append('ClaimDataJson', JSON.stringify(claimData));

                    // Get the anti-forgery token
                    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (!tokenInput) {
                        throw new Error('Anti-forgery token not found');
                    }
                    const token = tokenInput.value;

                    console.log('Sending data to server...');
                    const response = await fetch('@Url.Action("OCRWithData", "Claim")', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            '__RequestVerificationToken': token
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    console.log('Server response:', result);

                    if (result.success) {
                        console.log('✅ Data sent successfully, redirecting to OCR page');
                        window.location.href = '@Url.Action("OCR", "Claim")';
                    } else {
                        throw new Error(result.error || 'Server returned failure');
                    }
                } catch (error) {
                    console.warn('⚠️ Server data transfer failed, using client-side fallback:', error);

                    // Show user what's happening
                    console.log('Redirecting with sessionStorage fallback...');

                    // Add a small delay to ensure sessionStorage is written
                    setTimeout(() => {
                        window.location.href = '@Url.Action("OCR", "Claim")';
                    }, 100);
                }
            });

            // File to Base64 conversion
            function convertFileToBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result.split(',')[1]);
                    reader.onerror = error => reject(error);
                    reader.readAsDataURL(file);
                });
            }

            console.log('Employee claim form initialized');
        });

        // Handle file selection UI
        function handleFileSelection(input) {
            const files = input.files;
            const fileLabel = document.getElementById('file-label');
            const fileList = document.getElementById('fileList');
            const fileListContent = document.getElementById('fileListContent');
            const fileDebugInfo = document.getElementById('fileDebugInfo');
            const maxFiles = 10;
            const maxSize = 5 * 1024 * 1024;

            if (files.length === 0) {
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                fileDebugInfo.style.display = 'none';
                return;
            }

            if (files.length > maxFiles) {
                alert(`Maximum ${maxFiles} files allowed.`);
                input.value = '';
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                return;
            }

            const validFiles = [];
            const invalidFiles = [];
            let totalSize = 0;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                totalSize += file.size;

                if (file.size > maxSize) {
                    invalidFiles.push(`${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
                } else {
                    validFiles.push(file);
                }
            }

            if (invalidFiles.length > 0) {
                alert(`Files exceed 5MB limit:\n${invalidFiles.join('\n')}`);
                input.value = '';
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                return;
            }

            fileLabel.textContent = files.length === 1 ? files[0].name : `${files.length} files selected`;

            let fileListHTML = '';
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const fileSize = (file.size / 1024 / 1024).toFixed(2);
                fileListHTML += `
                    <div class="d-flex justify-content-between align-items-center border-bottom py-1">
                        <div>
                            <small class="fw-bold">${file.name}</small><br>
                            <small class="text-muted">${fileSize} MB • ${file.type || 'Unknown'}</small>
                        </div>
                        <span class="badge bg-success">Valid</span>
                    </div>
                `;
            }

            fileListContent.innerHTML = fileListHTML;
            fileList.style.display = 'block';

            fileDebugInfo.innerHTML = `
                <strong>Files Selected:</strong><br>
                • Count: ${files.length}/${maxFiles}<br>
                • Total Size: ${(totalSize / 1024 / 1024).toFixed(2)} MB
            `;
            fileDebugInfo.style.display = 'block';
        }
    </script>
}