@model FinserveNew.Models.Claim
@{
    ViewData["Title"] = "Create New Claim";
}
<div class="page-title">Create New Claim</div>

@if (TempData["Success"] != null)
{
<div class="alert alert-success alert-dismissible fade show" role="alert">
    @TempData["Success"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["Error"] != null)
{
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    @TempData["Error"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["FileUploadStatus"] != null)
{
<div class="alert alert-info alert-dismissible fade show" role="alert">
    <strong>File Upload Status:</strong> @TempData["FileUploadStatus"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

@if (TempData["DebugInfo"] != null)
{
<div class="alert alert-warning alert-dismissible fade show" role="alert">
    <strong>Debug Info:</strong> @TempData["DebugInfo"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

<div class="form-container">
    <form asp-action="Create" method="post" enctype="multipart/form-data" id="claimForm">
        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
        <input type="hidden" name="EmployeeId" value="@(Model?.EmployeeID ?? "EM001")" />

        <div class="mb-3">
            <label asp-for="ClaimType" class="form-label">Claim Type</label>
            <select asp-for="ClaimType" class="form-select" required>
                <option value="">Select claim type...</option>
                <option value="Travel">Travel</option>
                <option value="Medical">Medical</option>
                <option value="Equipment">Equipment</option>
                <option value="Training">Training</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Other">Other</option>
            </select>
            <span asp-validation-for="ClaimType" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="ClaimDate" class="form-label">Claim Date</label>
            <input asp-for="ClaimDate" class="form-control" type="date" required />
            <span asp-validation-for="ClaimDate" class="text-danger"></span>
            <small class="form-text text-muted">Date when the expense occurred</small>
        </div>

        <div class="mb-3">
            <label asp-for="ClaimAmount" class="form-label">Claim Amount</label>
            <div class="row">
                <div class="col-md-8">
                    <div class="input-group">
                        <select asp-for="Currency" id="currencySelect" class="input-group-text" style="border-right: none; background-color: #e9ecef;">
                            <option value="MYR">RM</option>
                            <option value="USD">$</option>
                        </select>
                        <input asp-for="ClaimAmount" id="claimAmountInput" class="form-control" type="number" step="0.01" min="0.01" placeholder="0.00" required />
                    </div>
                    <span asp-validation-for="ClaimAmount" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <div id="conversionDisplay" class="alert alert-info mb-0 py-2" style="display: none;">
                        <small id="conversionText"></small>
                    </div>
                </div>
            </div>
            <div class="mt-2">
                <small class="text-muted">
                    <span id="exchangeRateInfo">Exchange rate will be displayed when amount is entered</span>
                </small>
            </div>
        </div>

        <div class="mb-4">
            <label class="form-label">Upload Supporting Documents</label>
            <div class="input-group">
                <input type="file" name="UploadedFiles" id="fileInput" class="form-control" multiple
                       accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" onchange="handleFileSelection(this)">
                <label class="input-group-text" id="file-label">Choose files...</label>
            </div>
            <small class="form-text text-muted">
                Accepted formats: PDF, JPG, PNG, DOC, DOCX (Max 5MB per file, Maximum 10 files)
            </small>
            <div id="fileList" class="mt-2" style="display: none;">
                <div class="card">
                    <div class="card-header py-2">
                        <small class="fw-bold">Selected Files:</small>
                    </div>
                    <div class="card-body py-2" id="fileListContent"></div>
                </div>
            </div>
            <div id="fileDebugInfo" class="mt-2 text-muted" style="display: none;"></div>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label">Description (Optional)</label>
            <textarea asp-for="Description" id="descriptionInput" class="form-control" rows="3" placeholder="Enter additional details about your claim..."></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
            <small class="form-text text-muted">This will be preserved and shown in the OCR review page.</small>
        </div>

        <div class="d-grid gap-2 d-md-flex justify-content-md-start">
            <button type="submit" class="btn btn-primary" id="submitBtn">
                <i class="fas fa-paper-plane me-2"></i>
                <span id="submitText">Add</span>
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-times me-2"></i>
                Cancel
            </a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script>
        // Maintain selected files across multiple add/remove actions
        let selectedFiles = [];
        const exchangeRates = {
            USD_TO_MYR: 4.29,
            MYR_TO_USD: 0.233
        };

        document.addEventListener('DOMContentLoaded', function () {
            const fileInput = document.getElementById('fileInput');
            const fileLabel = document.getElementById('file-label');
            const fileList = document.getElementById('fileList');
            const fileListContent = document.getElementById('fileListContent');
            const fileDebugInfo = document.getElementById('fileDebugInfo');
            const form = document.getElementById('claimForm');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const currencySelect = document.getElementById('currencySelect');
            const claimAmountInput = document.getElementById('claimAmountInput');
            const conversionDisplay = document.getElementById('conversionDisplay');
            const conversionText = document.getElementById('conversionText');
            const exchangeRateInfo = document.getElementById('exchangeRateInfo');
            const claimDateInput = document.querySelector('[name="ClaimDate"]');
            const descriptionInput = document.getElementById('descriptionInput');

            // Currency helper display (no conversion on submit)
            function updateConversion() {
                const amount = parseFloat(claimAmountInput.value);
                const selectedCurrency = currencySelect.value;

                if (amount && amount > 0) {
                    let convertedAmount, fromCurrency, toCurrency, rate;

                    if (selectedCurrency === 'USD') {
                        convertedAmount = (amount * exchangeRates.USD_TO_MYR).toFixed(2);
                        fromCurrency = 'USD';
                        toCurrency = 'MYR';
                        rate = exchangeRates.USD_TO_MYR;
                        conversionText.innerHTML = `<strong>≈ RM ${convertedAmount}</strong>`;
                    } else {
                        convertedAmount = (amount * exchangeRates.MYR_TO_USD).toFixed(2);
                        fromCurrency = 'MYR';
                        toCurrency = 'USD';
                        rate = exchangeRates.MYR_TO_USD;
                        conversionText.innerHTML = `<strong>≈ $${convertedAmount}</strong>`;
                    }

                    conversionDisplay.style.display = 'block';
                    exchangeRateInfo.textContent = `Exchange rate: 1 ${fromCurrency} = ${rate} ${toCurrency} (indicative)`;
                } else {
                    conversionDisplay.style.display = 'none';
                    exchangeRateInfo.textContent = 'Exchange rate will be displayed when amount is entered';
                }
            }

            claimAmountInput.addEventListener('input', updateConversion);
            currencySelect.addEventListener('change', updateConversion);

            // Initialize currency conversion
            updateConversion();

            // FIXED: Enhanced form submission handler with proper data preservation
form.addEventListener('submit', async function (e) {
    e.preventDefault();
    console.log('Form submission started...');

    submitBtn.disabled = true;
    submitText.textContent = 'Processing...';

    // FIXED: Get form values more reliably
    const claimTypeElement = document.querySelector('[name="ClaimType"]');
    const claimAmountInput = document.getElementById('claimAmountInput');
    const claimDateInput = document.querySelector('[name="ClaimDate"]');
    const employeeIdElement = document.querySelector('[name="EmployeeId"]');
    const descriptionInput = document.getElementById('descriptionInput');

    const claimType = claimTypeElement ? claimTypeElement.value : '';
    const claimAmount = claimAmountInput ? claimAmountInput.value : '';
    const claimDate = claimDateInput ? claimDateInput.value : '';
    const employeeId = employeeIdElement ? employeeIdElement.value : '';
    const description = descriptionInput ? descriptionInput.value.trim() : '';

    console.log('FIXED: Form data collected:', {
        claimType: `"${claimType}"`,
        claimAmount: `"${claimAmount}"`,
        claimDate: `"${claimDate}"`,
        employeeId: `"${employeeId}"`,
        description: `"${description}"`,
        descriptionLength: description.length
    });

    // Enhanced validation with specific error messages
    const missingFields = [];
    if (!claimType) missingFields.push('Claim Type');
    if (!claimAmount) missingFields.push('Claim Amount');
    if (!claimDate) missingFields.push('Claim Date');
    if (!employeeId) missingFields.push('Employee ID');

    if (missingFields.length > 0) {
        console.error('Validation failed: Missing fields:', missingFields);
        submitBtn.disabled = false;
        submitText.textContent = 'Add';
        alert(`Please fill in the following required fields:\n• ${missingFields.join('\n• ')}`);
        return false;
    }

    // Validate date
    const selectedDate = new Date(claimDate);
    const today = new Date();
    today.setHours(23, 59, 59, 999);

    if (selectedDate > today) {
        alert('Claim date cannot be in the future. Please select a valid date.');
        submitBtn.disabled = false;
        submitText.textContent = 'Add';
        return false;
    }

    // Preserve entered currency and amount (no conversion)
    const selectedCurrency = currencySelect.value;
    let finalAmount = parseFloat(claimAmount);
    let originalAmount = finalAmount;
    let originalCurrency = selectedCurrency;

    // FIXED: Create comprehensive claim data object
    const claimData = {
        EmployeeId: employeeId,
        ClaimType: claimType,  // CRITICAL: Ensure this is preserved
        ClaimDate: claimDate,
        ClaimAmount: finalAmount.toFixed(2),
        Description: description,  // CRITICAL: Ensure this is preserved
        Currency: selectedCurrency,
        OriginalAmount: originalAmount.toString(),
        OriginalCurrency: originalCurrency,
        Files: [],
        // ADDED: Additional metadata for debugging
        Metadata: {
            submittedAt: new Date().toISOString(),
            originalFormData: {
                claimType,
                description,
                claimAmount: originalAmount,
                currency: originalCurrency
            }
        }
    };

    console.log('FIXED: Comprehensive claim data with metadata:', claimData);

    // Process files from managed list
    const files = selectedFiles;
    if (files.length > 0) {
        try {
            console.log(`Processing ${files.length} files...`);
            for (const file of files) {
                const base64String = await convertFileToBase64(file);
                claimData.Files.push({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    data: base64String
                });
            }
            console.log(`Successfully processed ${claimData.Files.length} files`);
        } catch (error) {
            console.error('File conversion failed:', error);
            submitBtn.disabled = false;
            submitText.textContent = 'Add';
            alert('Failed to process files. Please try again.');
            return false;
        }
    }

    // FIXED: Enhanced session storage with verification
    try {
        const claimDataStr = JSON.stringify(claimData);
        sessionStorage.setItem('claimData', claimDataStr);

        // ADDED: Verification step
        const verifyData = JSON.parse(sessionStorage.getItem('claimData'));
        console.log('VERIFICATION: Data stored and retrieved successfully:', {
            originalClaimType: claimData.ClaimType,
            retrievedClaimType: verifyData.ClaimType,
            originalDescription: claimData.Description,
            retrievedDescription: verifyData.Description,
            match: claimData.ClaimType === verifyData.ClaimType && claimData.Description === verifyData.Description
        });

        if (claimData.ClaimType !== verifyData.ClaimType || claimData.Description !== verifyData.Description) {
            throw new Error('Data verification failed - storage corrupted');
        }

    } catch (error) {
        console.error('Session storage failed:', error);
        alert('Failed to prepare data for transfer. Please try again.');
        submitBtn.disabled = false;
        submitText.textContent = 'Add';
        return false;
    }

    // FIXED: Enhanced server data transfer
    try {
        const formData = new FormData();
        formData.append('ClaimDataJson', JSON.stringify(claimData));

        // Get anti-forgery token
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        if (!tokenInput) {
            throw new Error('Anti-forgery token not found');
        }

        console.log('FIXED: Sending enhanced data to server...');
        const response = await fetch('@Url.Action("OCRWithData", "Claim")', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                '__RequestVerificationToken': tokenInput.value
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Server response:', result);

        if (result.success) {
            console.log('✅ Data sent successfully, redirecting to OCR page');
            // ADDED: Additional verification parameter
            window.location.href = `@Url.Action("OCR", "Claim")?verify=${Date.now()}`;
        } else {
            throw new Error(result.error || 'Server returned failure');
        }
    } catch (error) {
        console.warn('⚠️ Server data transfer failed, using client-side fallback:', error);

        // Fallback with additional delay for data integrity
        console.log('Using enhanced sessionStorage fallback...');
        setTimeout(() => {
            window.location.href = `@Url.Action("OCR", "Claim")?fallback=true&verify=${Date.now()}`;
        }, 200);
    }
});

            // File to Base64 conversion
            function convertFileToBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result.split(',')[1]);
                    reader.onerror = error => reject(error);
                    reader.readAsDataURL(file);
                });
            }

            console.log('Employee claim form initialized with enhanced file handling');
        });

        // Handle file selection UI - ENHANCED
        function handleFileSelection(input) {
            const files = input.files;
            const fileLabel = document.getElementById('file-label');
            const fileList = document.getElementById('fileList');
            const fileListContent = document.getElementById('fileListContent');
            const fileDebugInfo = document.getElementById('fileDebugInfo');
            const maxFiles = 10;
            const maxSize = 5 * 1024 * 1024;

            if (files.length === 0 && selectedFiles.length === 0) {
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                fileDebugInfo.style.display = 'none';
                return;
            }

            // Merge new files into selectedFiles with constraints
            const incoming = Array.from(files);
            const currentCount = selectedFiles.length;
            if (currentCount + incoming.length > maxFiles) {
                alert(`Maximum ${maxFiles} files allowed. You can add ${maxFiles - currentCount} more.`);
                input.value = '';
                return;
            }

            const invalidFiles = [];
            for (const file of incoming) {
                if (file.size > maxSize) {
                    invalidFiles.push(`${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
                    continue;
                }
                // Avoid duplicates by name+size
                const dup = selectedFiles.some(f => f.name === file.name && f.size === file.size);
                if (!dup) selectedFiles.push(file);
            }

            if (invalidFiles.length > 0) {
                alert(`Files exceed 5MB limit:\n${invalidFiles.join('\n')}`);
            }

            // Clear input so same file can be re-selected later
            input.value = '';

            // Render list
            if (selectedFiles.length === 0) {
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                fileDebugInfo.style.display = 'none';
                return;
            }

            fileLabel.textContent = selectedFiles.length === 1 ? selectedFiles[0].name : `${selectedFiles.length} files selected`;

            let totalSize = selectedFiles.reduce((s, f) => s + f.size, 0);
            let fileListHTML = '';
            selectedFiles.forEach((file, idx) => {
                const fileSize = (file.size / 1024 / 1024).toFixed(2);
                const fileIcon = getFileIcon(file.type);
                fileListHTML += `
                    <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                        <div class="d-flex align-items-center">
                            <i class="${fileIcon} me-2 text-primary"></i>
                            <div>
                                <small class="fw-bold">${file.name}</small><br>
                                <small class="text-muted">${fileSize} MB • ${file.type || 'Unknown'}</small>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeSelectedFile(${idx})" title="Remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>`;
            });

            fileListContent.innerHTML = fileListHTML;
            fileList.style.display = 'block';

            fileDebugInfo.innerHTML = `
                <strong>Files Ready for Processing:</strong><br>
                • Count: ${selectedFiles.length}/${maxFiles}<br>
                • Total Size: ${(totalSize / 1024 / 1024).toFixed(2)} MB<br>
                • Status: Files will be processed with OCR
            `;
            fileDebugInfo.style.display = 'block';

            console.log('Files selected for upload:', selectedFiles.map(f => ({
                name: f.name,
                size: (f.size / 1024 / 1024).toFixed(2) + 'MB',
                type: f.type
            })));
        }

        // Remove file from selection (exposed globally)
        window.removeSelectedFile = function(index) {
            const fileInput = document.getElementById('fileInput');
            const fileLabel = document.getElementById('file-label');
            const fileList = document.getElementById('fileList');
            const fileListContent = document.getElementById('fileListContent');
            const fileDebugInfo = document.getElementById('fileDebugInfo');

            selectedFiles.splice(index, 1);
            // Re-render
            if (selectedFiles.length === 0) {
                fileLabel.textContent = 'Choose files...';
                fileList.style.display = 'none';
                fileDebugInfo.style.display = 'none';
                return;
            }
            let totalSize = selectedFiles.reduce((s, f) => s + f.size, 0);
            let fileListHTML = '';
            selectedFiles.forEach((file, idx) => {
                const fileSize = (file.size / 1024 / 1024).toFixed(2);
                const fileIcon = getFileIcon(file.type);
                fileListHTML += `
                    <div class="d-flex justify-content-between align-items-center border-bottom py-2">
                        <div class="d-flex align-items-center">
                            <i class="${fileIcon} me-2 text-primary"></i>
                            <div>
                                <small class="fw-bold">${file.name}</small><br>
                                <small class="text-muted">${fileSize} MB • ${file.type || 'Unknown'}</small>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeSelectedFile(${idx})" title="Remove">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>`;
            });
            fileListContent.innerHTML = fileListHTML;
            fileLabel.textContent = selectedFiles.length === 1 ? selectedFiles[0].name : `${selectedFiles.length} files selected`;
            fileDebugInfo.innerHTML = `
                <strong>Files Ready for Processing:</strong><br>
                • Count: ${selectedFiles.length}/10<br>
                • Total Size: ${(totalSize / 1024 / 1024).toFixed(2)} MB
            `;
            fileDebugInfo.style.display = 'block';
        }

        // Get appropriate icon for file type
        function getFileIcon(fileType) {
            if (fileType.startsWith('image/')) return 'fas fa-image';
            if (fileType === 'application/pdf') return 'fas fa-file-pdf';
            if (fileType.includes('document') || fileType.includes('word')) return 'fas fa-file-word';
            return 'fas fa-file';
        }
</script>
}