@model FinserveNew.Models.Claim
@{
    ViewData["Title"] = "Edit Claim";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-edit"></i> Edit Claim</h4>
                </div>
                <div class="card-body">
                    <!-- Alert Messages -->
                    <div id="alert-container">
                        @if (TempData["Success"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle"></i> @TempData["Success"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                        @if (TempData["Error"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle"></i> @TempData["Error"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }
                    </div>

                    <form asp-action="Edit" method="post" enctype="multipart/form-data" id="editClaimForm">
                        @Html.AntiForgeryToken()
                        <!-- Hidden fields -->
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="EmployeeID" />
                        <input type="hidden" asp-for="Status" />
                        <input type="hidden" asp-for="CreatedDate" />
                        <input type="hidden" asp-for="SubmissionDate" />

                        <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                        <!-- Claim Type -->
                        <div class="mb-3">
                            <label asp-for="ClaimType" class="form-label">Claim Type <span class="text-danger">*</span></label>
                            <select asp-for="ClaimType" class="form-select" id="claimType" required>
                                <option value="">Select claim type...</option>
                                @if (ViewBag.ClaimTypes != null)
                                {
                                    foreach (var type in ViewBag.ClaimTypes)
                                    {
                                        <option value="@type">@type</option>
                                    }
                                }
                                else
                                {
                                    <option value="Travel">Travel</option>
                                    <option value="Medical">Medical</option>
                                    <option value="Equipment">Equipment</option>
                                    <option value="Training">Training</option>
                                    <option value="Entertainment">Entertainment</option>
                                    <option value="Other">Other</option>
                                }
                            </select>
                            <span asp-validation-for="ClaimType" class="text-danger"></span>
                        </div>

                        <!-- Claim Amount -->
                        <div class="mb-3">
                            <label asp-for="ClaimAmount" class="form-label">Claim Amount <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <select asp-for="Currency" id="currencySelect" class="input-group-text" style="border-right: none; background-color: #e9ecef;">
                                    <option value="MYR">RM</option>
                                    <option value="USD">$</option>
                                </select>
                                <input asp-for="ClaimAmount" class="form-control" type="number" step="0.01" min="0.01" id="claimAmount" required />
                            </div>
                            <span asp-validation-for="ClaimAmount" class="text-danger"></span>
                        </div>

                        <!-- Claim Date -->
                        <div class="mb-3">
                            <label asp-for="ClaimDate" class="form-label">Claim Date <span class="text-danger">*</span></label>
                            <input asp-for="ClaimDate" class="form-control" type="date" id="claimDate" required />
                            <span asp-validation-for="ClaimDate" class="text-danger"></span>
                        </div>

                        <!-- Description -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3" id="description" placeholder="Enter claim description..."></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <!-- Current Documents -->
                        <div class="mb-4">
                            <h5><i class="fas fa-file-alt"></i> Current Documents</h5>
                            <div id="currentDocuments">
                                @if (Model.ClaimDetails != null && Model.ClaimDetails.Any())
                                {
                                    foreach (var doc in Model.ClaimDetails)
                                    {
                                        <div class="document-item" data-doc-id="@doc.Id">
                                            <div class="document-info">
                                                <h6 class="mb-1">@doc.DisplayFileName</h6>
                                                <small class="text-muted">
                                                    Uploaded: @doc.UploadDate.ToString("dd/MM/yyyy HH:mm") |
                                                    Size: @doc.FormattedFileSize
                                                </small>
                                            </div>
                                            <div class="document-actions">
                                                <a href="@doc.DocumentPath" target="_blank" class="btn btn-sm btn-outline-info">
                                                    <i class="fas fa-eye"></i> View
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeCurrentDocument(@doc.Id)">
                                                    <i class="fas fa-trash"></i> Remove
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                                else if (!string.IsNullOrEmpty(Model.SupportingDocumentPath))
                                {
                                    <div class="document-item" data-legacy="true">
                                        <div class="document-info">
                                            <h6 class="mb-1">@(Model.SupportingDocumentName ?? "Legacy Document")</h6>
                                            <small class="text-muted">Legacy document</small>
                                        </div>
                                        <div class="document-actions">
                                            <a href="@Model.SupportingDocumentPath" target="_blank" class="btn btn-sm btn-outline-info">
                                                <i class="fas fa-eye"></i> View
                                            </a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle"></i> No documents currently attached to this claim.
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- New Documents Upload -->
                        <div class="mb-4">
                            <h5><i class="fas fa-cloud-upload-alt"></i> Upload New Documents (Optional)</h5>
                            <p class="text-muted small">Upload new documents if you want to replace or add to existing ones. Images only (JPG, PNG, GIF, etc.) - Max 5MB per file.</p>

                            <!-- File Input -->
                            <div class="drag-drop-area" id="dragDropArea">
                                <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                                <p class="mb-2"><strong>Drag & drop images here</strong></p>
                                <p class="text-muted">or click to browse (Images only - Max 5MB each)</p>
                                <input type="file" name="UploadedFiles" id="fileInput" multiple accept="image/*" class="form-control" style="display: none;" />
                            </div>

                            <!-- File Error Display -->
                            <div id="fileError" class="alert alert-danger mt-2" style="display: none;">
                                <strong>Supporting document submission failed</strong>
                            </div>

                            <!-- File Previews -->
                            <div id="filePreviews"></div>
                            <div class="mt-2">
                                <button type="button" id="processOCRBtn" class="btn btn-ocr" onclick="redirectToOCR()" style="display: none;">
                                    <i class="fas fa-magic me-1"></i> Review with OCR
                                </button>
                                <span id="loadingSpinner" class="loading-spinner ms-2">
                                    <i class="fas fa-spinner fa-spin"></i> Processing...
                                </span>
                            </div>
                        </div>

                        <!-- OCR Results -->
                        <div id="ocrResults" class="ocr-results" style="display: none;">
                            <h5><i class="fas fa-robot"></i> OCR Processing Results</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <strong>Detected Claim Type:</strong>
                                    <p id="ocrClaimType" class="text-primary">-</p>
                                </div>
                                <div class="col-md-6">
                                    <strong>Detected Amount:</strong>
                                    <p id="ocrAmount" class="text-success">-</p>
                                </div>
                            </div>
                            <div class="mb-3">
                                <strong>Extracted Text:</strong>
                                <div id="ocrText" class="border p-2 bg-light" style="max-height: 150px; overflow-y: auto;">-</div>
                            </div>
                            <div class="text-center">
                                <button type="button" class="btn btn-success" onclick="acceptOCRResults()">
                                    <i class="fas fa-check"></i> Accept OCR Results
                                </button>
                                <button type="button" class="btn btn-secondary" onclick="rejectOCRResults()">
                                    <i class="fas fa-times"></i> Keep Current Values
                                </button>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between mt-4">
                            <div>
                                <button type="submit" class="btn btn-primary" id="saveChangesBtn">
                                    <i class="fas fa-save"></i> Save Changes
                                </button>
                                <a asp-action="Index" class="btn btn-secondary">
                                    <i class="fas fa-times"></i> Cancel
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 Bytes";
        string[] sizes = { "Bytes", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}

@section Styles {
    <style>
        .drag-drop-area {
            border: 2px dashed #007bff;
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            background: #f8f9fa;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

            .drag-drop-area.dragover {
                border-color: #0056b3;
                background: #e3f2fd;
            }

        .file-preview {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            background: white;
        }

        .ocr-results {
            background: #e8f5e9;
            border: 1px solid #4caf50;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }

        .loading-spinner {
            display: none;
        }

        .document-item {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            background: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .document-info {
            flex-grow: 1;
        }

        .document-actions {
            flex-shrink: 0;
        }

        .btn-ocr {
            background: linear-gradient(45deg, #007bff, #0056b3);
            border: none;
            color: white;
        }

            .btn-ocr:hover {
                background: linear-gradient(45deg, #0056b3, #004085);
                color: white;
            }

        .file-preview-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin: 5px 0;
            background: #f8f9fa;
        }

            .file-preview-item .file-info {
                flex-grow: 1;
                margin-left: 10px;
            }

            .file-preview-item .file-actions {
                flex-shrink: 0;
            }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdnjs.cloudflare.com/ajax/libs/tesseract.js/4.1.1/tesseract.min.js"></script>
    <script>
        // Track if any document changes have been made
        let hasDocumentChanges = false;
        let uploadedFiles = [];
        let removedDocumentIds = [];
        let ocrProcessed = false;
        let ocrData = {};

        // Existing claim documents exposed to JS for OCR (images only)
        window.existingDocuments = [
        @if (Model.ClaimDetails != null)
        {
                    foreach (var d in Model.ClaimDetails)
                    {
                                var ext = System.IO.Path.GetExtension(d.DocumentPath ?? "").ToLower();
                                var isImg = ext == ".jpg" || ext == ".jpeg" || ext == ".png";
                                if (isImg)
                                {
                                    @: { id: @d.Id, name: '@(d.OriginalFileName ?? System.IO.Path.GetFileName(d.DocumentPath))'.replace("'", "\'"), url: '@d.DocumentPath', type: '@(ext == ".png" ? "image/png" : "image/jpeg")' },
                                }
                    }
        }
        ];

        // DOM Elements
        const dragDropArea = document.getElementById('dragDropArea');
        const fileInput = document.getElementById('fileInput');
        const filePreviews = document.getElementById('filePreviews');
        const processOCRBtn = document.getElementById('processOCRBtn');
        const fileError = document.getElementById('fileError');

        // Drag and drop events
        dragDropArea.addEventListener('click', () => fileInput.click());
        dragDropArea.addEventListener('dragover', handleDragOver);
        dragDropArea.addEventListener('dragleave', handleDragLeave);
        dragDropArea.addEventListener('drop', handleDrop);
        fileInput.addEventListener('change', handleFileSelect);

        function handleDragOver(e) {
            e.preventDefault();
            dragDropArea.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            dragDropArea.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            dragDropArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            handleFiles(files);
        }

        function handleFileSelect(e) {
            const files = e.target.files;
            handleFiles(files);
        }

        function handleFiles(files) {
            const maxFiles = 10;
            const maxSize = 5 * 1024 * 1024; // 5MB
            const currentCount = uploadedFiles.length;
            const incoming = Array.from(files);
            const invalidFiles = [];
            const nonImageFiles = [];
            let hasErrors = false;

            // Hide any existing error messages
            fileError.style.display = 'none';

            // Check file count limit
            if (currentCount + incoming.length > maxFiles) {
                fileError.innerHTML = '<strong>Supporting document submission failed</strong><br>Maximum 10 files allowed.';
                fileError.style.display = 'block';
                fileInput.value = '';
                hasErrors = true;
                return;
            }

            // Validate each file
            for (const file of incoming) {
                // Check if file is an image
                if (!file.type.startsWith('image/')) {
                    nonImageFiles.push(file.name);
                    hasErrors = true;
                    continue;
                }

                // Check file size
                if (file.size > maxSize) {
                    invalidFiles.push(`${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
                    hasErrors = true;
                    continue;
                }

                // Check for duplicates by name and size
                const isDuplicate = uploadedFiles.some(f => f.name === file.name && f.size === file.size);
                if (!isDuplicate) {
                    uploadedFiles.push(file);
                }
            }

            // Show error messages if any validation failed
            if (hasErrors) {
                let errorMessage = '<strong>Supporting document submission failed</strong><br>';

                if (nonImageFiles.length > 0) {
                    errorMessage += `Only image files are allowed. Invalid files: ${nonImageFiles.join(', ')}<br>`;
                }

                if (invalidFiles.length > 0) {
                    errorMessage += `Files exceed 5MB limit: ${invalidFiles.join(', ')}`;
                }

                fileError.innerHTML = errorMessage;
                fileError.style.display = 'block';
            }

            // Clear input so same file can be re-selected later
            fileInput.value = '';

            displayFilePreviews();
            updateDocumentChangesState();
        }

        // FIXED: Update document changes state properly
                function updateDocumentChangesState() {
            const previousState = hasDocumentChanges;
            hasDocumentChanges = (uploadedFiles.length > 0) || (removedDocumentIds.length > 0);

            if (hasDocumentChanges) {
                processOCRBtn.style.display = 'inline-block';
                // Reset OCR processed state when new changes are made
                if (!previousState) {
                    ocrProcessed = false;
                    console.log('Document changes detected - OCR required');
                }
            } else {
                processOCRBtn.style.display = 'none';
                document.getElementById('ocrResults').style.display = 'none';
                // CRITICAL: When no document changes, allow form submission
                ocrProcessed = true; // This allows basic field edits to be saved
                console.log('No document changes - form submission allowed');
            }
        }

        async function redirectToOCR() {
            // Build claim data similar to create page and post to OCRWithData, then redirect
            const claimData = {
                IsEdit: true,
                EditClaimId: @Model.Id,
                EmployeeId: '@Model.EmployeeID',
                ClaimType: document.getElementById('claimType').value || '@Model.ClaimType',
                ClaimDate: document.getElementById('claimDate').value || '@Model.ClaimDate.ToString("yyyy-MM-dd")',
                ClaimAmount: document.getElementById('claimAmount').value || '@Model.ClaimAmount',
                Description: document.getElementById('description').value || '@(Model.Description ?? string.Empty)'.replace(/\n/g, ' '),
                Currency: document.getElementById('currencySelect').value || '@Model.Currency',
                Files: []
            };

            // Attach newly selected files
            for (const file of uploadedFiles) {
                const base64 = await new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result.split(',')[1]);
                    reader.onerror = err => reject(err);
                    reader.readAsDataURL(file);
                });
                claimData.Files.push({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    data: base64
                });
            }

            // Include removed document IDs
            if (removedDocumentIds.length > 0) {
                claimData.RemovedDocumentIds = removedDocumentIds;
            }

            // Include remaining existing image documents for OCR
            try {
                const remainingExisting = (window.existingDocuments || []).filter(d => !removedDocumentIds.includes(d.id));
                remainingExisting.forEach(d => {
                    claimData.Files.push({ name: d.name, type: d.type, url: d.url });
                });
            } catch (error) {
                console.warn('Error processing existing documents:', error);
            }

            // Make data available to OCR page via sessionStorage
            try {
                sessionStorage.setItem('claimData', JSON.stringify(claimData));
            } catch (e) {
                console.warn('SessionStorage failed:', e);
            }

            const formData = new FormData();
            formData.append('ClaimDataJson', JSON.stringify(claimData));

            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) {
                formData.append('__RequestVerificationToken', tokenInput.value);
            }

            try {
                const response = await fetch('@Url.Action("OCRWithData", "Claim")', {
                    method: 'POST',
                    body: formData,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });

                if (!response.ok) {
                    throw new Error('HTTP ' + response.status);
                }
                const result = await response.json();
                if (result && result.success) {
                    window.location.href = '@Url.Action("OCR", "Claim")' + '?verify=' + Date.now();
                } else {
                    showAlert('error', result && result.error ? result.error : 'Failed to prepare OCR review.');
                }
            } catch (err) {
                console.error('OCR redirect failed:', err);
                showAlert('error', 'Unable to start OCR review. Please try again.');
            }
        }

        function displayFilePreviews() {
            filePreviews.innerHTML = '';

            uploadedFiles.forEach((file, index) => {
                const preview = document.createElement('div');
                preview.className = 'file-preview-item';
                preview.innerHTML = `
                    <i class="fas fa-image fa-2x text-primary"></i>
                    <div class="file-info">
                        <h6 class="mb-1">${file.name}</h6>
                        <small class="text-muted">Size: ${formatFileSize(file.size)} | Type: ${file.type}</small>
                    </div>
                    <div class="file-actions">
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(${index})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                filePreviews.appendChild(preview);
            });
        }

        function removeFile(index) {
            uploadedFiles.splice(index, 1);
            displayFilePreviews();
            updateDocumentChangesState();
            fileError.style.display = 'none'; // Hide error when user removes files
        }

        function removeCurrentDocument(docId) {
            if (confirm('Are you sure you want to remove this document?')) {
                const docItem = document.querySelector(`[data-doc-id="${docId}"]`);
                if (docItem) {
                    docItem.style.display = 'none';

                    // Track removed document ID
                    if (!removedDocumentIds.includes(docId)) {
                        removedDocumentIds.push(docId);
                    }

                    // Add hidden input to track removed documents for form submission
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'RemovedDocumentIds';
                    hiddenInput.value = docId;
                    document.getElementById('editClaimForm').appendChild(hiddenInput);

                    // Update the document changes state
                    updateDocumentChangesState();

                    showAlert('info', 'Document removed. Please review with OCR before saving.');
                }
            }
        }

        // FIXED: Add function to mark OCR as completed
        function markOCRCompleted() {
            ocrProcessed = true;
            showAlert('success', 'OCR review completed. You can now save your changes.');
        }

        // OCR Results Functions (for future use if needed)
        function acceptOCRResults() {
            if (ocrData.type && ocrData.type !== 'Not specified') {
                document.getElementById('claimType').value = ocrData.type;
            }
            if (ocrData.amount > 0) {
                document.getElementById('claimAmount').value = ocrData.amount.toFixed(2);
            }

            // Mark OCR as processed when results are accepted
            ocrProcessed = true;
            showAlert('success', 'OCR results applied to form');
            document.getElementById('ocrResults').style.display = 'none';
        }

        function rejectOCRResults() {
            // Mark OCR as processed even when results are rejected
            ocrProcessed = true;
            document.getElementById('ocrResults').style.display = 'none';
            showAlert('info', 'OCR results discarded. Current values preserved.');
        }

        function showAlert(type, message) {
            const alertContainer = document.getElementById('alert-container');
            const alertClass = type === 'error' ? 'danger' : type;
            const iconClass = {
                'success': 'check-circle',
                'error': 'exclamation-circle',
                'danger': 'exclamation-circle',
                'warning': 'exclamation-triangle',
                'info': 'info-circle'
            }[type] || 'info-circle';

            const alert = document.createElement('div');
            alert.className = `alert alert-${alertClass} alert-dismissible fade show`;
            alert.innerHTML = `
                <i class="fas fa-${iconClass}"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;

            alertContainer.appendChild(alert);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

                document.getElementById('editClaimForm').addEventListener('submit', function(e) {
            console.log('Form submission attempt:', {
                hasDocumentChanges: hasDocumentChanges,
                ocrProcessed: ocrProcessed
            });

            // Only block if there are document changes AND OCR hasn't been processed
            if (hasDocumentChanges && !ocrProcessed) {
                e.preventDefault();
                showAlert('warning', 'Please review with OCR before saving changes because you added/removed documents.');
                return false;
            }

            // Allow submission - add loading state
            const saveBtn = document.getElementById('saveChangesBtn');
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            }

            return true;
        });

        // Currency change handler (no longer needed as currency is now part of the select element)
        // The currency select element will automatically update its display value

        // FIXED: Initialize the page properly
                document.addEventListener('DOMContentLoaded', function() {
            // Initialize with no document changes, allowing basic field edits
            hasDocumentChanges = false;
            ocrProcessed = true; // CRITICAL: Allow form submission by default for edits

            updateDocumentChangesState();

            // Check if user is returning from OCR page
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('ocrCompleted') === 'true') {
                markOCRCompleted();
            }

            console.log('Edit page initialized:', {
                hasDocumentChanges: hasDocumentChanges,
                ocrProcessed: ocrProcessed
            });
        });
    </script>
}