@model FinserveNew.Models.Claim
@{
    ViewData["Title"] = "OCR Processing - Verify Claim Information";
}

@* Add anti-forgery token for form submissions *@
@Html.AntiForgeryToken()

<div class="page-title">OCR Processing - Verify Your Claim</div>

@* Display any messages *@
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <!-- Left Panel: Original Documents -->
        <div class="col-lg-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-file-image me-2"></i>
                        Original Documents
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div id="documentViewer" class="document-viewer">
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading documents...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading uploaded documents...</p>
                        </div>
                    </div>

                    <!-- Document navigation -->
                    <div class="document-nav p-3 border-top">
                        <div class="d-flex justify-content-between align-items-center">
                            <button id="prevDoc" class="btn btn-outline-primary btn-sm" disabled>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            <span id="docCounter" class="text-muted">0 / 0</span>
                            <button id="nextDoc" class="btn btn-outline-primary btn-sm" disabled>
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>
                        <div class="mt-2">
                            <small id="currentDocName" class="text-muted">No documents loaded</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Center Panel: OCR Results -->
        <div class="col-lg-4">
            <div class="card h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-eye me-2"></i>
                        OCR Extracted Text
                    </h5>
                </div>
                <div class="card-body">
                    <div id="ocrResults">
                        <div class="text-center p-4">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Processing OCR...</span>
                            </div>
                            <p class="mt-2 text-muted">Extracting text from documents...</p>
                        </div>
                    </div>

                    <!-- OCR Controls -->
                    <div class="mt-3 border-top pt-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <button id="reprocessOCR" class="btn btn-outline-success btn-sm">
                                <i class="fas fa-redo me-1"></i>
                                Reprocess Current
                            </button>
                            <button id="copyOCRText" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-copy me-1"></i>
                                Copy Text
                            </button>
                        </div>

                        <!-- OCR Confidence Indicator -->
                        <div class="mt-2">
                            <small class="text-muted">OCR Confidence: </small>
                            <div class="progress" style="height: 8px;">
                                <div id="confidenceBar" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
                            </div>
                            <small id="confidenceText" class="text-muted">Processing...</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panel: Form Data -->
        <div class="col-lg-4">
            <div class="card h-100">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-form me-2"></i>
                        Your Claim Information
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Display pre-filled form data -->
                    <div class="claim-info">
                        <div class="info-group mb-3">
                            <label class="form-label fw-bold">Employee ID:</label>
                            <div class="info-value">@(Model?.EmployeeID ?? "EM001")</div>
                        </div>

                        <div class="info-group mb-3">
                            <label class="form-label fw-bold">Claim Type:</label>
                            <div class="info-value">
                                <span class="badge bg-primary">@(Model?.ClaimType ?? "Not specified")</span>
                            </div>
                        </div>

                        <div class="info-group mb-3">
                            <label class="form-label fw-bold">Claim Date:</label>
                            <div class="info-value">@(Model?.ClaimDate.ToString("dd/MM/yyyy") ?? DateTime.Now.ToString("dd/MM/yyyy"))</div>
                        </div>

                        <div class="info-group mb-3">
                            <label class="form-label fw-bold">Claim Amount:</label>
                            <div class="info-value">
                                <span class="fs-5 text-success fw-bold">
                                    @if (ViewBag.OriginalCurrency == "USD")
                                    {
                                        <text>$@(ViewBag.OriginalAmount ?? Model?.ClaimAmount ?? 0)</text>
                                    }
                                    else
                                    {
                                        <text>RM @(Model?.ClaimAmount ?? 0)</text>
                                    }
                                </span>
                                @if (ViewBag.OriginalCurrency == "USD")
                                {
                                    <br>
                                    <small class="text-muted">≈ RM @(Model?.ClaimAmount ?? 0) (Converted)</small>
                                }
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(Model?.Description))
                        {
                            <div class="info-group mb-3">
                                <label class="form-label fw-bold">Description:</label>
                                <div class="info-value">@Model.Description</div>
                            </div>
                        }

                        <div class="info-group mb-3">
                            <label class="form-label fw-bold">Uploaded Files:</label>
                            <div class="info-value">
                                <span id="fileCount" class="badge bg-secondary">0 files</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-1">Review Complete?</h6>
                            <small class="text-muted">Verify the OCR results match your documents before proceeding.</small>
                        </div>
                        <div class="btn-group" role="group">
                            <a href="@Url.Action("Create", "Claim")" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>
                                Back to Form
                            </a>
                            <button type="button" id="approveAndSubmit" class="btn btn-success" disabled>
                                <i class="fas fa-check me-2"></i>
                                 Submit Claim
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for final submission -->
<form id="finalSubmissionForm" method="post" action="@Url.Action("ProcessOCRAndSubmit", "Claim")" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="EmployeeID" value="@Model.EmployeeID" />
    <input type="hidden" name="ClaimType" value="@Model.ClaimType" />
    <input type="hidden" name="ClaimDate" value="@Model.ClaimDate.ToString("yyyy-MM-dd")" />
    <input type="hidden" name="ClaimAmount" value="@Model.ClaimAmount" />
    <input type="hidden" name="Description" value="@Model.Description" />
    <input type="hidden" name="ocrResults" id="ocrResultsField" />
</form>
@section Scripts {
    <script src="https://unpkg.com/tesseract.js@v5.0.0/dist/tesseract.min.js"></script>
    <script>
        // Make server file data available to client-side JavaScript
        @if (ViewBag.UploadedFiles != null)
        {
                <text>window.serverUploadedFiles = @Html.Raw(ViewBag.UploadedFiles);</text>
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== OCR PAGE INITIALIZATION STARTED ===');

            // Initialize variables
            let uploadedFiles = [];
            let currentDocIndex = 0;
            let ocrResults = [];
            let ocrWorker = null;
            let isOCRInitialized = false;

            console.log('Variables initialized');

            // Get uploaded files from session storage or URL parameters
            initializeUploadedFiles();

            // FIXED: Proper OCR worker initialization with error handling
            async function initOCRWorker() {
                // Check if Tesseract is available
                if (typeof Tesseract === 'undefined') {
                    console.error('❌ Tesseract.js is not loaded');
                    showError('Tesseract.js library is not available. Please refresh the page.');
                    return null;
                }

                console.log('=== INIT OCR WORKER CALLED ===');

                if (isOCRInitialized && ocrWorker) {
                    console.log('OCR Worker already initialized, returning existing worker');
                    return ocrWorker;
                }

                try {
                    console.log('Starting OCR Worker initialization...');
                    showLoadingStatus('Initializing OCR engine...');

                    // Clean up any existing worker first
                    if (ocrWorker) {
                        try {
                            await ocrWorker.terminate();
                        } catch (e) {
                            console.log('Previous worker cleanup completed');
                        }
                    }

                    console.log('Creating new Tesseract worker...');

                    // FIXED: Create worker without logger to avoid DataCloneError
                    ocrWorker = await Tesseract.createWorker();

                    console.log('Loading language...');
                    updateOCRProgress(20, 'Loading language...');

                    // Initialize the worker with language
                    await ocrWorker.loadLanguage('eng');

                    console.log('Initializing worker...');
                    updateOCRProgress(40, 'Initializing...');

                    await ocrWorker.initialize('eng');

                    console.log('Setting parameters...');
                    updateOCRProgress(60, 'Configuring...');

                    // Set parameters to improve OCR accuracy
                    await ocrWorker.setParameters({
                        tessedit_pageseg_mode: Tesseract.PSM.AUTO,
                        tessedit_char_whitelist: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,/$:- \n\r\t',
                    });

                    updateOCRProgress(80, 'Ready!');

                    isOCRInitialized = true;
                    console.log('✅ OCR Worker initialized successfully');
                    return ocrWorker;

                } catch (error) {
                    console.error('❌ Failed to initialize OCR worker:', error);
                    isOCRInitialized = false;
                    ocrWorker = null;

                    showError('Failed to initialize OCR processing. This might be due to browser compatibility issues. Please try refreshing the page or use a different browser.');
                    return null;
                }
            }


            // FIXED: Improved file initialization with better error handling
                    function initializeUploadedFiles() {
            console.log('=== INITIALIZING UPLOADED FILES ===');
            showLoadingStatus('Loading documents...');

            try {
                // First try to get files from ViewBag (server-side) - FASTEST
                console.log('Checking ViewBag for server-side file data...');

                // Check if server data exists (this will be replaced by your Razor syntax)
                let serverFileData = [];
                if (typeof window.serverUploadedFiles !== 'undefined') {
                    serverFileData = window.serverUploadedFiles;
                }

                console.log('Server file data:', serverFileData);

                if (serverFileData && serverFileData.length > 0) {
                    console.log(`✅ Found ${serverFileData.length} files from server`);
                    uploadedFiles = serverFileData;
                    updateFileCounter();
                    loadDocument(0);
                    showReadyState();
                    return;
                }

                // Fallback to sessionStorage (client-side)
                console.log('No server files found, checking sessionStorage...');
                const claimDataStr = sessionStorage.getItem('claimData');
                console.log('Session storage claimData:', claimDataStr ? 'Found' : 'Not found');

                if (claimDataStr) {
                    try {
                        console.log('Parsing claim data from sessionStorage...');
                        const claimData = JSON.parse(claimDataStr);
                        console.log('Parsed claim data:', claimData);

                        // ENHANCED: Log the claim details we're interested in
                        console.log(`📋 Claim Details from sessionStorage:`);
                        console.log(`   - ClaimType: ${claimData.ClaimType}`);
                        console.log(`   - ClaimAmount: ${claimData.ClaimAmount}`);
                        console.log(`   - OriginalAmount: ${claimData.OriginalAmount}`);
                        console.log(`   - OriginalCurrency: ${claimData.OriginalCurrency}`);
                        console.log(`   - ClaimDate: ${claimData.ClaimDate}`);
                        console.log(`   - Files count: ${claimData.Files?.length || 0}`);

                        // ENHANCED: Update the claim information display on the page
                        updateClaimInfoFromSessionStorage(claimData);

                        if (claimData.Files && claimData.Files.length > 0) {
                            console.log(`✅ Found ${claimData.Files.length} files in sessionStorage`);
                            processFilesInChunks(claimData.Files);
                            return;
                        } else {
                            console.log('❌ No files found in claimData.Files');
                            // Still show the claim info even if no files
                            showReadyState();
                            handleNoFiles();
                            return;
                        }
                    } catch (e) {
                        console.error('❌ Failed to parse claim data from sessionStorage:', e);
                    }
                }

                // If no files found, show message immediately
                console.log('❌ No files found anywhere, showing no files message');
                handleNoFiles();

            } catch (error) {
                console.error('❌ Error during file initialization:', error);
                handleNoFiles();
            }
        }

                function updateClaimInfoFromSessionStorage(claimData) {
            console.log('🔄 Updating claim info display from sessionStorage...');

            try {
                // Update claim type
                const claimTypeElement = document.querySelector('.info-value .badge');
                if (claimTypeElement && claimData.ClaimType) {
                    claimTypeElement.textContent = claimData.ClaimType;
                    console.log(`✅ Updated ClaimType display: ${claimData.ClaimType}`);
                }

                // Update claim amount
                const claimAmountElement = document.querySelector('.info-value .text-success');
                if (claimAmountElement && claimData.OriginalAmount && claimData.OriginalCurrency) {
                    if (claimData.OriginalCurrency === 'USD') {
                        claimAmountElement.innerHTML = `$${claimData.OriginalAmount}`;
                        // Add conversion info
                        const conversionElement = claimAmountElement.parentElement.querySelector('small');
                        if (conversionElement) {
                            conversionElement.innerHTML = `<br><small class="text-muted">≈ RM ${claimData.ClaimAmount} (Converted)</small>`;
                        }
                    } else {
                        claimAmountElement.textContent = `RM ${claimData.ClaimAmount}`;
                    }
                    console.log(`✅ Updated ClaimAmount display: ${claimData.OriginalCurrency} ${claimData.OriginalAmount}`);
                }

                // Update claim date
                const claimDateElements = document.querySelectorAll('.info-value');
                claimDateElements.forEach((element, index) => {
                    if (element.textContent.includes('/') && claimData.ClaimDate) {
                        const date = new Date(claimData.ClaimDate);
                        element.textContent = date.toLocaleDateString('en-GB');
                        console.log(`✅ Updated ClaimDate display: ${element.textContent}`);
                    }
                });

                // Update file count
                if (claimData.Files && claimData.Files.length > 0) {
                    const fileCountElement = document.getElementById('fileCount');
                    if (fileCountElement) {
                        fileCountElement.textContent = `${claimData.Files.length} file${claimData.Files.length !== 1 ? 's' : ''}`;
                        console.log(`✅ Updated file count display: ${claimData.Files.length} files`);
                    }
                }

                console.log('✅ Successfully updated claim info display');
            } catch (error) {
                console.error('❌ Error updating claim info display:', error);
            }
        }

            // Process files in non-blocking chunks
            function processFilesInChunks(files) {
                console.log(`=== PROCESSING ${files.length} FILES IN CHUNKS ===`);
                const chunkSize = 3; // Reduced chunk size for better performance
                let processed = 0;

                function processChunk() {
                    console.log(`Processing chunk: ${processed} to ${Math.min(processed + chunkSize, files.length)}`);
                    const chunk = files.slice(processed, processed + chunkSize);

                    chunk.forEach((file, index) => {
                        console.log(`Processing file ${processed + index + 1}: ${file.name} (${file.type}, ${file.size} bytes)`);

                        // FIXED: Better validation of file data
                        if (file.name && file.type && file.data) {
                            uploadedFiles.push({
                                name: file.name,
                                type: file.type,
                                size: file.size || 0,
                                data: `data:${file.type};base64,${file.data}`,
                                url: `data:${file.type};base64,${file.data}`
                            });
                        } else {
                            console.warn(`⚠️ Skipping invalid file:`, file);
                        }
                    });

                    processed += chunk.length;
                    console.log(`Chunk processed. Total files processed: ${processed}/${files.length}`);
                    updateFileCounter();

                    if (processed < files.length) {
                        console.log('More chunks to process, scheduling next chunk...');
                        setTimeout(processChunk, 50); // Slightly longer delay
                    } else {
                        console.log('✅ All files processed, loading first document');
                        if (uploadedFiles.length > 0) {
                            loadDocument(0);
                            showReadyState();
                        } else {
                            handleNoFiles();
                        }
                    }
                }

                processChunk();
            }

            // FIXED: Improved document loading with better error handling
            function loadDocument(index) {
                console.log(`=== LOADING DOCUMENT ${index + 1}/${uploadedFiles.length} ===`);

                if (index < 0 || index >= uploadedFiles.length) {
                    console.log('❌ Invalid document index');
                    return;
                }

                currentDocIndex = index;
                const file = uploadedFiles[index];
                console.log(`Loading file: ${file.name} (${file.type})`);

                const documentViewer = document.getElementById('documentViewer');
                const currentDocName = document.getElementById('currentDocName');

                if (!documentViewer || !currentDocName) {
                    console.error('❌ Required DOM elements not found');
                    return;
                }

                currentDocName.textContent = file.name;

                if (file.type.startsWith('image/')) {
                    console.log('📷 Loading image file...');
                    documentViewer.innerHTML = `
                        <div class="text-center p-2">
                            <div class="image-loader">
                                <div class="spinner-border text-primary mb-2" role="status"></div>
                                <p class="text-muted">Loading image...</p>
                            </div>
                            <img src="${file.url}"
                                 class="img-fluid d-none"
                                 style="max-height: 500px; max-width: 100%;"
                                 alt="${file.name}"
                                 id="currentImage"
                                 onload="this.classList.remove('d-none'); this.previousElementSibling.style.display='none'; console.log('✅ Image loaded successfully');"
                                 onerror="this.previousElementSibling.innerHTML='<i class=\\'fas fa-exclamation-triangle text-warning\\'>Image failed to load</i>'; console.error('❌ Image failed to load');">
                        </div>
                    `;
                } else if (file.type === 'application/pdf') {
                    console.log('📄 Loading PDF file...');
                    documentViewer.innerHTML = `
                        <div class="text-center p-4">
                            <i class="fas fa-file-pdf fa-5x text-danger mb-3"></i>
                            <h6>${file.name}</h6>
                            <p class="text-muted">PDF Preview</p>
                            <small class="text-muted">OCR processing available for PDF files</small>
                        </div>
                    `;
                } else {
                    console.log('📁 Loading unsupported file type...');
                    documentViewer.innerHTML = `
                        <div class="text-center p-4">
                            <i class="fas fa-file fa-5x text-secondary mb-3"></i>
                            <h6>${file.name}</h6>
                            <p class="text-muted">File preview not available</p>
                        </div>
                    `;
                }

                updateFileCounter();

                if (ocrResults[index]) {
                    console.log('✅ OCR result already exists, displaying...');
                    displayOCRResult(index);
                } else {
                    console.log('⏳ No OCR result yet, showing pending state');
                    showOCRPending();
                }

                console.log('✅ Document loaded successfully');
            }

            // FIXED: Better OCR processing with retry logic
            async function processCurrentDocumentOCR() {
                console.log('=== PROCESSING CURRENT DOCUMENT OCR ===');
                const index = currentDocIndex;

                if (ocrResults[index]) {
                    console.log('OCR result already exists, displaying existing result');
                    displayOCRResult(index);
                    return;
                }

                const file = uploadedFiles[index];
                console.log(`Processing file: ${file.name} (${file.type})`);

                if (!file.type.startsWith('image/') && file.type !== 'application/pdf') {
                    console.log('❌ File type not supported for OCR');
                    showOCRNotSupported();
                    return;
                }

                // Show processing state immediately
                showLoadingStatus('Initializing OCR...');

                console.log('Initializing OCR worker...');
                const worker = await initOCRWorker();
                if (!worker) {
                    console.error('❌ OCR worker initialization failed');
                    ocrResults[index] = {
                        text: 'OCR worker initialization failed. Please try refreshing the page.',
                        confidence: 0,
                        error: true
                    };
                    displayOCRResult(index);
                    return;
                }

                console.log('✅ OCR worker ready, starting document processing...');
                await processDocumentOCR(index);
            }

            // FIXED: Robust OCR processing with proper error handling
             async function processDocumentOCR(index) {
                console.log(`=== PROCESSING DOCUMENT OCR FOR INDEX ${index} ===`);
                const file = uploadedFiles[index];

                const startTime = performance.now();
                console.log(`Starting OCR for: ${file.name}`);
                updateOCRProgress(0, 'Starting OCR...');

                try {
                    let imageData = file.data || file.url;
                    console.log(`Image data length: ${imageData.length} characters`);

                    if (imageData.startsWith('data:')) {
                        console.log('Processing real image data...');
                        updateOCRProgress(10, 'Optimizing image...');

                        const optimizeStart = performance.now();
                        console.log('Starting image optimization...');
                        imageData = await optimizeImageForOCR(imageData);
                        const optimizeEnd = performance.now();
                        console.log(`✅ Image optimization completed in ${(optimizeEnd - optimizeStart).toFixed(2)}ms`);

                        updateOCRProgress(30, 'Processing with OCR...');

                        const ocrStart = performance.now();
                        console.log('Starting Tesseract OCR recognition...');

                        // FIXED: Add manual progress updates during OCR
                        const progressInterval = setInterval(() => {
                            updateOCRProgress(Math.min(90, 30 + Math.random() * 50), 'Processing...');
                        }, 1000);

                        // FIXED: Add timeout and retry logic
                        const result = await Promise.race([
                            ocrWorker.recognize(imageData),
                            new Promise((_, reject) =>
                                setTimeout(() => reject(new Error('OCR timeout after 30 seconds')), 30000)
                            )
                        ]);

                        clearInterval(progressInterval);

                        const ocrEnd = performance.now();
                        console.log(`✅ OCR recognition completed in ${(ocrEnd - ocrStart).toFixed(2)}ms`);
                        console.log('OCR Result:', result.data);

                        // FIXED: Better result validation
                        if (result && result.data && typeof result.data.text === 'string') {
                            ocrResults[index] = {
                                text: result.data.text.trim() || 'No text detected',
                                confidence: Math.round(result.data.confidence || 0),
                                words: result.data.words?.length || 0
                            };

                            console.log(`✅ OCR result saved: ${result.data.text.length} characters, ${result.data.confidence}% confidence`);
                            updateOCRProgress(100, 'OCR Complete');
                        } else {
                            throw new Error('Invalid OCR result structure');
                        }
                    } else {
                        console.log('Using fallback demo simulation...');
                        await simulateOCRProcessing(index);
                    }

                    const totalTime = performance.now() - startTime;
                    console.log(`✅ Total OCR processing time: ${totalTime.toFixed(2)}ms`);

                    displayOCRResult(index);

                } catch (error) {
                    const totalTime = performance.now() - startTime;
                    console.error(`❌ OCR processing failed after ${totalTime.toFixed(2)}ms:`, error);

                    // FIXED: Better error handling with retry option
                    ocrResults[index] = {
                        text: `OCR processing failed: ${error.message}. This might be due to image quality or browser compatibility issues.`,
                        confidence: 0,
                        error: true,
                        canRetry: true
                    };
                    updateOCRProgress(0, 'OCR Failed');
                    displayOCRResult(index);

                    // Reset worker for retry
                    isOCRInitialized = false;
                    if (ocrWorker) {
                        try {
                            await ocrWorker.terminate();
                        } catch (e) {
                            console.log('Worker cleanup completed');
                        }
                        ocrWorker = null;
                    }
                }
            }

            // FIXED: More robust image optimization
            async function optimizeImageForOCR(imageDataUrl) {
                console.log('=== OPTIMIZING IMAGE FOR OCR ===');
                const startTime = performance.now();

                return new Promise((resolve) => {
                    const img = new Image();
                    img.onload = function() {
                        try {
                            console.log(`Original image size: ${img.width}x${img.height}`);

                            const canvas = document.createElement('canvas');
                            const ctx = canvas.getContext('2d');

                            if (!ctx) {
                                console.warn('Canvas context not available, using original image');
                                resolve(imageDataUrl);
                                return;
                            }

                            // FIXED: Better sizing logic for OCR
                            const maxSize = 1200; // Increased for better OCR accuracy
                            let { width, height } = img;

                            if (width > maxSize || height > maxSize) {
                                const ratio = Math.min(maxSize / width, maxSize / height);
                                width = Math.round(width * ratio);
                                height = Math.round(height * ratio);
                                console.log(`Resizing image to: ${width}x${height} (ratio: ${ratio.toFixed(3)})`);
                            } else {
                                console.log('Image size is within limits, no resizing needed');
                            }

                            canvas.width = width;
                            canvas.height = height;

                            // FIXED: Improved image processing for better OCR
                            ctx.fillStyle = 'white';
                            ctx.fillRect(0, 0, width, height);
                            ctx.drawImage(img, 0, 0, width, height);

                            // Apply slight contrast enhancement
                            const imageData = ctx.getImageData(0, 0, width, height);
                            const data = imageData.data;

                            for (let i = 0; i < data.length; i += 4) {
                                // Simple contrast enhancement
                                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
                                const factor = 1.2; // Slight contrast boost

                                data[i] = Math.min(255, Math.max(0, (data[i] - avg) * factor + avg));
                                data[i + 1] = Math.min(255, Math.max(0, (data[i + 1] - avg) * factor + avg));
                                data[i + 2] = Math.min(255, Math.max(0, (data[i + 2] - avg) * factor + avg));
                            }

                            ctx.putImageData(imageData, 0, 0);

                            // Return optimized image with high quality
                            const optimizedData = canvas.toDataURL('image/png'); // PNG for better OCR

                            const endTime = performance.now();
                            console.log(`✅ Image optimization completed in ${(endTime - startTime).toFixed(2)}ms`);
                            console.log(`Optimized image size: ${optimizedData.length} characters`);

                            resolve(optimizedData);
                        } catch (error) {
                            console.error('❌ Image optimization failed:', error);
                            resolve(imageDataUrl); // Return original if optimization fails
                        }
                    };

                    img.onerror = function() {
                        console.error('❌ Failed to load image for optimization');
                        resolve(imageDataUrl); // Return original if loading fails
                    };

                    console.log('Loading image for optimization...');
                    img.src = imageDataUrl;
                });
            }

            // Faster demo simulation
            async function simulateOCRProcessing(index) {
                console.log('=== SIMULATING OCR PROCESSING ===');
                const sampleResults = [
                    {
                        text: `RECEIPT\nABC Restaurant\nDate: ${new Date().toLocaleDateString()}\nItem: Business Lunch\nAmount: $45.50\nTax: $3.64\nTotal: $49.14\nPayment: Credit Card\nThank you!`,
                        confidence: 85,
                        words: 15
                    },
                    {
                        text: `INVOICE #INV-2024-001\nVendor: Tech Solutions Ltd\nDate: ${new Date().toLocaleDateString()}\nDescription: Software License\nAmount: $299.00\nTax (8%): $23.92\nTotal: $322.92\nPayment Terms: Net 30`,
                        confidence: 92,
                        words: 20
                    }
                ];

                // Simulate progress more quickly
                for (let i = 0; i <= 100; i += 25) {
                    console.log(`Demo OCR progress: ${i}%`);
                    updateOCRProgress(i, `Demo processing: ${i}%`);
                    await new Promise(resolve => setTimeout(resolve, 100));
                }

                ocrResults[index] = sampleResults[index % sampleResults.length];
                console.log('✅ Demo OCR simulation completed');
            }

            // Helper functions for better UX
            function showLoadingStatus(message) {
                console.log(`📱 Showing loading status: ${message}`);
                const ocrResultsDiv = document.getElementById('ocrResults');
                if (ocrResultsDiv) {
                    ocrResultsDiv.innerHTML = `
                        <div class="text-center p-4">
                            <div class="spinner-border text-success" role="status"></div>
                            <p class="mt-2 text-muted">${message}</p>
                        </div>
                    `;
                }
            }

            function showReadyState() {
                console.log('📱 Showing ready state');
                const approveBtn = document.getElementById('approveAndSubmit');
                if (approveBtn) {
                    approveBtn.disabled = false;
                }
                showOCRPending();
            }

            function showOCRPending() {
                console.log('📱 Showing OCR pending state');
                const ocrResultsDiv = document.getElementById('ocrResults');
                if (ocrResultsDiv) {
                    ocrResultsDiv.innerHTML = `
                        <div class="text-center p-4">
                            <i class="fas fa-play-circle fa-3x text-success mb-3"></i>
                            <h6>Ready for OCR Processing</h6>
                            <p class="text-muted">Click "Process Current Document" to extract text</p>
                            <button class="btn btn-success" onclick="processCurrentDocumentOCR()">
                                <i class="fas fa-cog me-1"></i> Process Current Document
                            </button>
                        </div>
                    `;
                }
            }

            function showOCRNotSupported() {
                console.log('📱 Showing OCR not supported message');
                const ocrResultsDiv = document.getElementById('ocrResults');
                if (ocrResultsDiv) {
                    ocrResultsDiv.innerHTML = `
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            OCR not supported for this file type
                        </div>
                    `;
                }
            }

            function handleNoFiles() {
                console.log('📱 Handling no files scenario');
                const documentViewer = document.getElementById('documentViewer');
                if (documentViewer) {
                    documentViewer.innerHTML = `
                        <div class="text-center p-4">
                            <i class="fas fa-upload fa-3x text-muted mb-3"></i>
                            <h6>No documents uploaded</h6>
                            <p class="text-muted">Please go back and upload documents for OCR processing.</p>
                            <a href="#" class="btn btn-primary" onclick="history.back()">
                                <i class="fas fa-arrow-left me-2"></i>Back to Form
                            </a>
                        </div>
                    `;
                }
                showOCRNotSupported();
            }

            function updateFileCounter() {
                const fileCount = document.getElementById('fileCount');
                const docCounter = document.getElementById('docCounter');

                if (fileCount) {
                    fileCount.textContent = `${uploadedFiles.length} file${uploadedFiles.length !== 1 ? 's' : ''}`;
                }

                if (docCounter) {
                    docCounter.textContent = uploadedFiles.length > 0 ? `${currentDocIndex + 1} / ${uploadedFiles.length}` : '0 / 0';
                }

                const prevBtn = document.getElementById('prevDoc');
                const nextBtn = document.getElementById('nextDoc');

                if (prevBtn) prevBtn.disabled = currentDocIndex === 0;
                if (nextBtn) nextBtn.disabled = currentDocIndex === uploadedFiles.length - 1;

                console.log(`📊 File counter updated: ${uploadedFiles.length} files, current: ${currentDocIndex + 1}`);
            }

            function updateOCRProgress(progress, message) {
                const confidenceBar = document.getElementById('confidenceBar');
                const confidenceText = document.getElementById('confidenceText');

                if (confidenceBar) {
                    confidenceBar.style.width = `${progress}%`;

                    if (progress === 100) {
                        confidenceBar.classList.remove('progress-bar-animated');
                    } else {
                        confidenceBar.classList.add('progress-bar-animated');
                    }
                }

                if (confidenceText) {
                    confidenceText.textContent = message;
                }

                console.log(`📈 Progress updated: ${progress}% - ${message}`);
            }

            // FIXED: Improved error display in OCR results
            function displayOCRResult(index) {
                console.log(`📄 Displaying OCR result for index ${index}`);
                const ocrResultsDiv = document.getElementById('ocrResults');
                if (!ocrResultsDiv) return;

                const result = ocrResults[index];

                if (!result) {
                    console.log('❌ No OCR result available');
                    showOCRPending();
                    return;
                }

                if (result.error) {
                    console.log('❌ Displaying OCR error result');
                    ocrResultsDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>OCR Processing Failed</strong><br>
                            ${result.text}
                            <hr>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-danger" onclick="processCurrentDocumentOCR()">
                                    <i class="fas fa-redo me-1"></i> Retry OCR
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" onclick="location.reload()">
                                    <i class="fas fa-refresh me-1"></i> Refresh Page
                                </button>
                            </div>
                        </div>
                    `;
                } else {
                    console.log(`✅ Displaying successful OCR result: ${result.text.length} characters, ${result.confidence}% confidence`);
                    ocrResultsDiv.innerHTML = `
                        <div class="ocr-text-container">
                            <div class="alert alert-success">
                                <small><strong>Confidence:</strong> ${result.confidence}% | <strong>Words:</strong> ${result.words || 'N/A'}</small>
                            </div>
                            <div class="border rounded p-3" style="background-color: #f8f9fa; max-height: 400px; overflow-y: auto;">
                                <pre style="white-space: pre-wrap; font-family: 'Courier New', monospace; font-size: 12px; margin: 0;">${result.text}</pre>
                            </div>
                        </div>
                    `;
                }

                updateOCRProgress(result.confidence || 0, `Confidence: ${result.confidence || 0}%`);
            }

            // Handle Approve & Submit button
            const approveAndSubmitBtn = document.getElementById('approveAndSubmit');
            if (approveAndSubmitBtn) {
                approveAndSubmitBtn.addEventListener('click', async () => {
                    console.log('📤 Approve & Submit clicked');

                    if (ocrResults.length === 0) {
                        alert('Please process at least one document with OCR before submitting.');
                        return;
                    }

                    // Collect all OCR results
                    const allOcrText = ocrResults
                        .filter(result => result && !result.error)
                        .map((result, index) => `Document ${index + 1}:\n${result.text}`)
                        .join('\n\n---\n\n');

                    // Set OCR results in hidden form
                    document.getElementById('ocrResultsField').value = allOcrText;

                    // Show simple confirmation
                    if (confirm('Submit your claim with OCR verification?')) {
                        // Submit the form
                        document.getElementById('finalSubmissionForm').submit();
                    }
                });
            }

            function showError(message) {
                console.error(`🚨 Showing error: ${message}`);
                const pageTitle = document.querySelector('.page-title');
                if (pageTitle) {
                    const alertDiv = document.createElement('div');
                    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
                    alertDiv.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    pageTitle.after(alertDiv);
                }
            }

            // Event listeners with null checks
            const prevDocBtn = document.getElementById('prevDoc');
            if (prevDocBtn) {
                prevDocBtn.addEventListener('click', () => {
                    console.log('⬅️ Previous document clicked');
                    if (currentDocIndex > 0) {
                        loadDocument(currentDocIndex - 1);
                    }
                });
            }

            const nextDocBtn = document.getElementById('nextDoc');
            if (nextDocBtn) {
                nextDocBtn.addEventListener('click', () => {
                    console.log('➡️ Next document clicked');
                    if (currentDocIndex < uploadedFiles.length - 1) {
                        loadDocument(currentDocIndex + 1);
                    }
                });
            }

            const reprocessBtn = document.getElementById('reprocessOCR');
            if (reprocessBtn) {
                reprocessBtn.addEventListener('click', async () => {
                    console.log('🔄 Reprocess OCR clicked');
                    ocrResults[currentDocIndex] = null;
                    await processCurrentDocumentOCR();
                });
            }

            const copyBtn = document.getElementById('copyOCRText');
            if (copyBtn) {
                copyBtn.addEventListener('click', () => {
                    console.log('📋 Copy OCR text clicked');
                    const result = ocrResults[currentDocIndex];
                    if (result && !result.error) {
                        navigator.clipboard.writeText(result.text).then(() => {
                            console.log('✅ Text copied to clipboard');
                            const originalText = copyBtn.innerHTML;
                            copyBtn.innerHTML = '<i class="fas fa-check me-1"></i>Copied!';
                            copyBtn.classList.add('btn-success');
                            copyBtn.classList.remove('btn-outline-secondary');

                            setTimeout(() => {
                                copyBtn.innerHTML = originalText;
                                copyBtn.classList.remove('btn-success');
                                copyBtn.classList.add('btn-outline-secondary');
                            }, 2000);
                        }).catch(err => {
                            console.error('❌ Failed to copy text:', err);
                            showError('Failed to copy text to clipboard');
                        });
                    } else {
                        showError('No text available to copy');
                    }
                });
            }

            // Make functions available globally
            window.processCurrentDocumentOCR = processCurrentDocumentOCR;

            // FIXED: Add cleanup on page unload
            window.addEventListener('beforeunload', async () => {
                if (ocrWorker) {
                    try {
                        await ocrWorker.terminate();
                        console.log('✅ OCR worker cleaned up on page unload');
                    } catch (e) {
                        console.log('OCR worker cleanup completed');
                    }
                }
            });

            // FIXED: Add visibility change handler to pause/resume OCR
            document.addEventListener('visibilitychange', () => {
                if (document.hidden) {
                    console.log('📴 Page hidden, pausing OCR operations');
                } else {
                    console.log('👁️ Page visible, resuming OCR operations');
                }
            });

            // FIXED: Add error handler for unhandled promise rejections
            window.addEventListener('unhandledrejection', (event) => {
                console.error('❌ Unhandled promise rejection:', event.reason);
                if (event.reason && event.reason.message && event.reason.message.includes('OCR')) {
                    showError('OCR processing encountered an error. Please try refreshing the page.');
                }
            });

            console.log('✅ OCR page initialized successfully');
            console.log('=== INITIALIZATION COMPLETE ===');
        });
    </script>
}
<style>
    .page-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .document-viewer {
        min-height: 400px;
        max-height: 500px;
        overflow: auto;
        background-color: #f8f9fa;
    }

    .document-nav {
        background-color: #f8f9fa;
    }

    .info-group {
        padding: 0.75rem;
        border-radius: 6px;
        background-color: #f8f9fa;
    }

    .info-value {
        margin-top: 0.25rem;
        font-weight: 500;
    }

    .card-header {
        font-weight: 600;
    }

    .btn-group .btn {
        border-radius: 6px;
    }

        .btn-group .btn:not(:last-child) {
            margin-right: 0.5rem;
        }

    .ocr-text-container {
        font-size: 0.9rem;
    }

    .progress {
        border-radius: 4px;
    }

    .progress-bar {
        transition: width 0.3s ease;
    }


    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    .badge {
        font-size: 0.75em;
    }

    .spinner-border {
        width: 2rem;
        height: 2rem;
    }
</style>
}