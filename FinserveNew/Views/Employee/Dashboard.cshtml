@{
    ViewData["Title"] = "Employee Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Dashboard Content -->
<div class="dashboard-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="page-title">
                    <i class="fas fa-tachometer-alt me-2"></i>
                    Employee Dashboard
                </h1>
                <p class="page-subtitle">Welcome back, @User.Identity.Name</p>
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-primary" onclick="exportReport()">
                    <i class="fas fa-download me-2"></i>Export Report
                </button>
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-plus me-2"></i>Quick Action
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Claim")">Submit New Claim</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Leaves")">Apply for Leave</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row mb-4">
        <div class="col-lg-6 col-md-6 mb-3">
            <div class="stat-card">
                <div class="stat-icon bg-info">
                    <i class="fas fa-calendar-alt"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@ViewBag.TotalLeaveDaysUsed</div>
                    <div class="stat-label">Leave Days Used</div>
                    <div class="stat-change @(ViewBag.TotalRemainingLeave > 10 ? "positive" : ViewBag.TotalRemainingLeave > 5 ? "neutral" : "negative")">
                        <i class="fas fa-calendar-check"></i> @ViewBag.TotalRemainingLeave days remaining
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-md-6 mb-3">
            <div class="stat-card">
                <div class="stat-icon bg-warning">
                    <i class="fas fa-hourglass-half"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@(ViewBag.PendingClaims + ViewBag.PendingLeaves)</div>
                    <div class="stat-label">Pending Requests</div>
                    <div class="stat-change @(ViewBag.PendingClaims + ViewBag.PendingLeaves > 3 ? "negative" : "neutral")">
                        <i class="fas fa-@(ViewBag.PendingClaims + ViewBag.PendingLeaves > 3 ? "exclamation-triangle" : "clock")"></i>
                        @(ViewBag.PendingClaims + ViewBag.PendingLeaves > 3 ? "Needs attention" : "Under review")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="row">
        <!-- Left Column -->
        <div class="col-lg-8">
            <!-- Quick Actions -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bolt me-2"></i>Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <a href="@Url.Action("Create", "Claim")" class="quick-action-btn">
                                <div class="quick-action-icon bg-primary">
                                    <i class="fas fa-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Submit New Claim</h6>
                                    <p>Create a new medical claim</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-4 mb-3">
                            <a href="@Url.Action("Create", "Leaves")" class="quick-action-btn">
                                <div class="quick-action-icon bg-success">
                                    <i class="fas fa-calendar-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Apply for Leave</h6>
                                    <p>Submit a leave request</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-4 mb-3">
                            <a href="@Url.Action("Index", "Claim")" class="quick-action-btn">
                                <div class="quick-action-icon bg-info">
                                    <i class="fas fa-file-alt"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>View All Claims</h6>
                                    <p>Check claim history</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Recent Claims -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-file-medical me-2"></i>Recent Claims
                    </h5>
                    <a href="@Url.Action("Index", "Claim")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentClaims != null && ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Claim ID</th>
                                        <th>Type</th>
                                        <th>Amount</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var claim in (List<FinserveNew.Models.Claim>)ViewBag.RecentClaims)
                                    {
                                        <tr>
                                            <td>@claim.CreatedDate.ToString("dd MMM, yyyy")</td>
                                            <td>#CLM-@claim.Id.ToString("D3")</td>
                                            <td>@claim.ClaimType</td>
                                            <td>RM @claim.ClaimAmount.ToString("N2")</td>
                                            <td>
                                                <span class="badge bg-@(claim.Status == "Approved" ? "success" : claim.Status == "Pending" ? "warning" : claim.Status == "Processing" ? "info" : "danger")">
                                                    @claim.Status
                                                </span>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("Edit", "Claim", new { id = claim.Id })" class="btn btn-sm btn-outline-primary">View</a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-file-medical fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No claims submitted yet</p>
                            <a href="@Url.Action("Create", "Claim")" class="btn btn-primary">Submit Your First Claim</a>
                        </div>
                    }
                </div>
            </div>

            <!-- Recent Leave Applications -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Recent Leave Applications
                    </h5>
                    <a href="@Url.Action("LeaveRecords", "Leaves")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentLeaves != null && ((List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves).Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Leave Type</th>
                                        <th>From</th>
                                        <th>To</th>
                                        <th>Days</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var leave in (List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves)
                                    {
                                        var duration = (leave.EndDate.DayNumber - leave.StartDate.DayNumber) + 1;
                                        <tr>
                                            <td>@(leave.LeaveType?.TypeName ?? "N/A")</td>
                                            <td>@leave.StartDate.ToString("dd MMM, yyyy")</td>
                                            <td>@leave.EndDate.ToString("dd MMM, yyyy")</td>
                                            <td>@duration days</td>
                                            <td>
                                                <span class="badge bg-@(leave.Status == "Approved" ? "success" : leave.Status == "Pending" ? "warning" : "danger")">
                                                    @leave.Status
                                                </span>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("Details", "Leaves", new { id = leave.LeaveID })" class="btn btn-sm btn-outline-primary">View</a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No leave applications yet</p>
                            <a href="@Url.Action("Create", "Leaves")" class="btn btn-success">Apply for Leave</a>
                        </div>
                    }
                </div>
            </div>
        </div>
       

        <!-- Right Column -->
        <div class="col-lg-4">
            <!-- Leave Balance -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-check me-2"></i>Leave Balance (@ViewBag.CurrentYear)
                    </h5>
                </div>
                <div class="card-body">
                    @if (ViewBag.LeaveBalances != null && ((Dictionary<string, object>)ViewBag.LeaveBalances).Any())
                    {
                        @foreach (var balance in (Dictionary<string, object>)ViewBag.LeaveBalances)
                        {
                            var leaveBalance = balance.Value as dynamic;
                            var percentage = leaveBalance.DefaultDays > 0 ? (leaveBalance.RemainingDays * 100.0 / leaveBalance.DefaultDays) : 0;
                            var progressColor = percentage > 70 ? "success" : percentage > 30 ? "warning" : "danger";

                            <div class="leave-balance-item">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span>@balance.Key</span>
                                    <span class="fw-bold">@leaveBalance.RemainingDays / @leaveBalance.DefaultDays days</span>
                                </div>
                                <div class="progress mb-3">
                                    <div class="progress-bar bg-@progressColor" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center">No leave balance data available</p>
                    }
                </div>
            </div>

            <!-- Notifications -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bell me-2"></i>Notifications
                    </h5>
                    <button class="btn btn-sm btn-outline-secondary" onclick="markAllAsRead()">
                        Mark All Read
                    </button>
                </div>
                <div class="card-body" id="notificationContainer">
                    @{
                        var hasNotifications = false;
                        var currentMonth = DateTime.Now.Month;
                        var currentYear = DateTime.Now.Year;
                        var isDecember = currentMonth == 12;
                    }

                    @* Leave Reminder for December *@
                    @if (isDecember && ViewBag.TotalRemainingLeave != null && ViewBag.TotalRemainingLeave > 10)
                    {
                        hasNotifications = true;
                        <div class="notification-item" data-type="leave-reminder" data-id="leave-reminder-@currentYear">
                            <div class="notification-icon bg-warning">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="notification-content">
                                <h6>Leave Balance Reminder</h6>
                                <p>You have @ViewBag.TotalRemainingLeave days of leave remaining. Please plan to clear your leave before year-end.</p>
                                <small class="text-muted">December @DateTime.Now.Year</small>
                            </div>
                            <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'leave-reminder', 'leave-reminder-@currentYear')">
                                Mark as Read
                            </button>
                        </div>
                    }

                    @* Approved Claims *@
                    @if (ViewBag.RecentClaims != null)
                    {
                        var approvedClaims = ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Where(c => c.Status == "Approved").Take(3);
                        foreach (var claim in approvedClaims)
                        {
                            hasNotifications = true;
                            <div class="notification-item" data-type="claim" data-id="@claim.Id">
                                <div class="notification-icon bg-success">
                                    <i class="fas fa-check"></i>
                                </div>
                                <div class="notification-content">
                                    <h6>Claim Approved</h6>
                                    <p>Your @claim.ClaimType claim for $@claim.ClaimAmount.ToString("N2") has been approved.</p>
                                    <small class="text-muted">@((DateTime.Now - claim.CreatedDate).Days) days ago</small>
                                </div>
                                <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'claim', '@claim.Id')">
                                    Mark as Read
                                </button>
                            </div>
                        }
                    }

                    @* Approved Leaves *@
                    @if (ViewBag.RecentLeaves != null)
                    {
                        var approvedLeaves = ((List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves).Where(l => l.Status == "Approved").Take(2);
                        foreach (var leave in approvedLeaves)
                        {
                            hasNotifications = true;
                            <div class="notification-item" data-type="leave" data-id="@leave.LeaveID">
                                <div class="notification-icon bg-success">
                                    <i class="fas fa-calendar-check"></i>
                                </div>
                                <div class="notification-content">
                                    <h6>Leave Approved</h6>
                                    <p>Your @(leave.LeaveType?.TypeName ?? "leave") request has been approved.</p>
                                    <small class="text-muted">@leave.StartDate.ToString("MMM dd") - @leave.EndDate.ToString("MMM dd")</small>
                                </div>
                                <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'leave', '@leave.LeaveID')">
                                    Mark as Read
                                </button>
                            </div>
                        }
                    }

                    @if (!hasNotifications)
                    {
                        <div class="text-center py-3" id="noNotifications">
                            <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                            <p class="text-muted">No recent activity</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Calendar Widget -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar me-2"></i>
                        <span id="calendarTitle">@ViewBag.CurrentMonth</span>
                    </h5>
                </div>
                <div class="card-body">
                    <div class="calendar-widget" id="calendarWidget">
                        <!-- Calendar navigation -->
                        <div class="calendar-navigation">
                            <button class="btn btn-sm btn-outline-primary" id="prevMonth" onclick="changeMonth(-1)">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <div class="calendar-month-year" id="calendarMonthYear">
                                <!-- Will be populated by JavaScript -->
                            </div>
                            <button class="btn btn-sm btn-outline-primary" id="nextMonth" onclick="changeMonth(1)">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>

                        <!-- Calendar grid -->
                        <div class="calendar-grid" id="calendarGrid">
                            <!-- Will be populated by JavaScript -->
                        </div>

                        <!-- Calendar legend -->
                        <div class="calendar-legend">
                            <div class="legend-item">
                                <div class="legend-color today"></div>
                                <span>Today</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color leave-day"></div>
                                <span>Approved Leave</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
  </div>

@section Scripts {
            <script>
                // Calendar functionality - Enhanced with month navigation
                document.addEventListener('DOMContentLoaded', function() {
                    initializeCalendar();
                    loadReadNotifications();
                });

                // Calendar state
                let currentCalendarMonth = new Date().getMonth();
                let currentCalendarYear = new Date().getFullYear();
                const today = new Date();

                // Get calendar data from server (passed from controller)
                const calendarData = @Html.Raw(Json.Serialize(ViewBag.CalendarData ?? new Dictionary<string, List<int>>()));

                // Initialize calendar
                function initializeCalendar() {
                    generateCalendar();
                    updateCalendarTitle();
                }

                // Change month function
                function changeMonth(direction) {
                    currentCalendarMonth += direction;

                    // Handle year boundaries
                    if (currentCalendarMonth > 11) {
                        currentCalendarMonth = 0;
                        currentCalendarYear++;
                    } else if (currentCalendarMonth < 0) {
                        currentCalendarMonth = 11;
                        currentCalendarYear--;
                    }

                    generateCalendar();
                    updateCalendarTitle();
                }

                // Update calendar title
                function updateCalendarTitle() {
                    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                        'July', 'August', 'September', 'October', 'November', 'December'];

                    const monthYearElement = document.getElementById('calendarMonthYear');
                    const titleElement = document.getElementById('calendarTitle');

                    const monthYearText = `${monthNames[currentCalendarMonth]} ${currentCalendarYear}`;

                    if (monthYearElement) {
                        monthYearElement.textContent = monthYearText;
                    }
                    if (titleElement) {
                        titleElement.textContent = monthYearText;
                    }
                }

                // Generate calendar with leave dates
                function generateCalendar() {
                    const calendarGrid = document.getElementById('calendarGrid');
                    if (!calendarGrid) return;

                    // Get first day of month and number of days
                    const firstDay = new Date(currentCalendarYear, currentCalendarMonth, 1);
                    const lastDay = new Date(currentCalendarYear, currentCalendarMonth + 1, 0);
                    const firstDayWeek = firstDay.getDay();
                    const daysInMonth = lastDay.getDate();

                    // Get leave dates for current month
                    const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
                    const leaveDatesForMonth = calendarData[monthKey] || [];
                    const leaveDatesSet = new Set(leaveDatesForMonth);

                    // Build calendar HTML
                    let calendarHTML = `
                        <div class="calendar-day-header">S</div>
                        <div class="calendar-day-header">M</div>
                        <div class="calendar-day-header">T</div>
                        <div class="calendar-day-header">W</div>
                        <div class="calendar-day-header">T</div>
                        <div class="calendar-day-header">F</div>
                        <div class="calendar-day-header">S</div>
                    `;

                    // Add empty cells for days before month starts
                    for (let i = 0; i < firstDayWeek; i++) {
                        calendarHTML += '<div class="calendar-day"></div>';
                    }

                    // Add days of the month
                    for (let day = 1; day <= daysInMonth; day++) {
                        let classes = 'calendar-day';

                        // Check if it's today
                        if (day === today.getDate() &&
                            currentCalendarMonth === today.getMonth() &&
                            currentCalendarYear === today.getFullYear()) {
                            classes += ' today';
                        }

                        // Check if it's a leave day
                        if (leaveDatesSet.has(day)) {
                            classes += ' leave-day';
                        }

                        calendarHTML += `<div class="${classes}" onclick="selectDate(${day})">${day}</div>`;
                    }

                    calendarGrid.innerHTML = calendarHTML;
                }

                // Optional: Handle date selection
                function selectDate(day) {
                    const selectedDate = new Date(currentCalendarYear, currentCalendarMonth, day);
                    const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
                    const leaveDatesForMonth = calendarData[monthKey] || [];

                    if (leaveDatesForMonth.includes(day)) {
                        // Show tooltip or modal with leave details
                        showLeaveDetails(selectedDate);
                    }
                }

                // Optional: Show leave details
                function showLeaveDetails(date) {
                    const formattedDate = date.toLocaleDateString('en-US', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    // You can enhance this to show actual leave details
                    alert(`Leave scheduled for ${formattedDate}`);
                }

                // Export report functionality (existing)
                function exportReport() {
                    alert('Export functionality will be implemented soon!');
                }

                // Read notifications functions (existing - keeping your current implementation)
                let readNotifications = JSON.parse(localStorage.getItem('readNotifications') || '[]');

                function loadReadNotifications() {
                    readNotifications.forEach(function(notificationId) {
                        const notification = document.querySelector(`[data-id="${notificationId}"]`);
                        if (notification) {
                            notification.style.display = 'none';
                        }
                    });
                    checkForEmptyNotifications();
                }

                function markAsRead(button, type, id) {
                    const notificationItem = button.closest('.notification-item');

                    if (!readNotifications.includes(id)) {
                        readNotifications.push(id);
                        localStorage.setItem('readNotifications', JSON.stringify(readNotifications));
                    }

                    notificationItem.style.transition = 'opacity 0.3s ease';
                    notificationItem.style.opacity = '0';

                    setTimeout(() => {
                        notificationItem.style.display = 'none';
                        checkForEmptyNotifications();
                    }, 300);
                }

                function markAllAsRead() {
                    const notifications = document.querySelectorAll('.notification-item');

                    notifications.forEach(function(notification) {
                        const id = notification.getAttribute('data-id');
                        if (id && !readNotifications.includes(id)) {
                            readNotifications.push(id);
                        }

                        notification.style.transition = 'opacity 0.3s ease';
                        notification.style.opacity = '0';

                        setTimeout(() => {
                            notification.style.display = 'none';
                        }, 300);
                    });

                    localStorage.setItem('readNotifications', JSON.stringify(readNotifications));

                    setTimeout(() => {
                        checkForEmptyNotifications();
                    }, 300);
                }

                function checkForEmptyNotifications() {
                    const visibleNotifications = document.querySelectorAll('.notification-item[style*="display: none"], .notification-item[style*="opacity: 0"]');
                    const allNotifications = document.querySelectorAll('.notification-item');

                    if (visibleNotifications.length === allNotifications.length || allNotifications.length === 0) {
                        const container = document.getElementById('notificationContainer');
                        let emptyState = document.getElementById('noNotifications');

                        if (!emptyState) {
                            emptyState = document.createElement('div');
                            emptyState.id = 'noNotifications';
                            emptyState.className = 'text-center py-3';
                            emptyState.innerHTML = `
                                <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                                <p class="text-muted">No recent activity</p>
                            `;
                            container.appendChild(emptyState);
                        } else {
                            emptyState.style.display = 'block';
                        }
                    }
                }
            </script>

}

<style>
    /* Dashboard Styles */
    .dashboard-container {
        padding: 20px;
    }

    .page-header {
        margin-bottom: 30px;
    }

    .page-title {
        color: #2c3e50;
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 5px;
    }

    .page-subtitle {
        color: #7f8c8d;
        font-size: 1rem;
        margin-bottom: 0;
    }

    /* Stat Cards */
    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 15px;
        transition: transform 0.2s ease;
        height: 100%;
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        line-height: 1;
    }

    .stat-label {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .stat-change {
        font-size: 0.8rem;
        font-weight: 500;
    }

        .stat-change.positive {
            color: #27ae60;
        }

        .stat-change.negative {
            color: #e74c3c;
        }

        .stat-change.neutral {
            color: #f39c12;
        }

    /* Quick Actions */
    .quick-action-btn {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 20px;
        background: white;
        border: 2px solid #ecf0f1;
        border-radius: 12px;
        text-decoration: none;
        color: inherit;
        transition: all 0.3s ease;
        height: 100%;
    }

        .quick-action-btn:hover {
            border-color: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.2);
            color: inherit;
            text-decoration: none;
        }

    .quick-action-icon {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        color: white;
    }

    .quick-action-content h6 {
        margin-bottom: 5px;
        color: #2c3e50;
        font-weight: 600;
    }

    .quick-action-content p {
        margin-bottom: 0;
        color: #7f8c8d;
        font-size: 0.85rem;
    }

    /* Cards */
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background: white;
        border-bottom: 1px solid #ecf0f1;
        border-radius: 15px 15px 0 0 !important;
        padding: 20px;
    }

    .card-title {
        color: #2c3e50;
        font-weight: 600;
    }

    /* Leave Balance */
    .leave-balance-item {
        margin-bottom: 20px;
    }

        .leave-balance-item:last-child {
            margin-bottom: 0;
        }

    .progress {
        height: 8px;
        border-radius: 4px;
        background-color: #ecf0f1;
    }

    .progress-bar {
        border-radius: 4px;
    }

    /* Notifications */
    .notification-item {
        display: flex;
        align-items: flex-start;
        gap: 15px;
        padding: 15px 0;
        border-bottom: 1px solid #ecf0f1;
        position: relative;
    }

        .notification-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

    .notification-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        color: white;
        flex-shrink: 0;
    }

    .notification-content {
        flex: 1;
    }

        .notification-content h6 {
            margin-bottom: 5px;
            color: #2c3e50;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .notification-content p {
            margin-bottom: 5px;
            color: #7f8c8d;
            font-size: 0.85rem;
            line-height: 1.4;
        }

    .notification-read-btn {
        font-size: 0.75rem;
        padding: 4px 8px;
        border-radius: 4px;
        white-space: nowrap;
        margin-left: 10px;
        align-self: flex-start;
        margin-top: 5px;
    }

    /* Calendar Widget */
            .calendar-widget {
                padding: 15px;
            }

            .calendar-navigation {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding: 10px 0;
            }

            .calendar-month-year {
                font-size: 1.1rem;
                font-weight: 600;
                color: #2c3e50;
                text-align: center;
                min-width: 150px;
            }

            .calendar-navigation .btn {
                width: 35px;
                height: 35px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 0;
                transition: all 0.2s ease;
            }

                .calendar-navigation .btn:hover {
                    transform: scale(1.1);
                    box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
                }

            .calendar-grid {
                display: grid;
                grid-template-columns: repeat(7, 1fr);
                gap: 3px;
                margin-bottom: 20px;
            }

            .calendar-day-header {
                padding: 10px 4px;
                text-align: center;
                font-weight: 600;
                color: #7f8c8d;
                font-size: 0.8rem;
                background-color: #f8f9fa;
                border-radius: 6px;
                margin-bottom: 5px;
            }

            .calendar-day {
                padding: 10px 4px;
                text-align: center;
                font-size: 0.9rem;
                color: #2c3e50;
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.2s ease;
                min-height: 38px;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                border: 1px solid transparent;
            }

                .calendar-day:hover {
                    background-color: #e3f2fd;
                    border-color: #90caf9;
                    transform: scale(1.05);
                }

                .calendar-day.today {
                    background-color: #3498db;
                    color: white;
                    font-weight: 600;
                    box-shadow: 0 2px 8px rgba(52, 152, 219, 0.4);
                }

                .calendar-day.leave-day {
                    background-color: #e8f5e8;
                    color: #27ae60;
                    font-weight: 600;
                    border-color: #27ae60;
                }

                .calendar-day.today.leave-day {
                    background-color: #27ae60;
                    color: white;
                    box-shadow: 0 2px 8px rgba(39, 174, 96, 0.4);
                }

                .calendar-day.leave-day:hover {
                    background-color: #d4edda;
                    border-color: #1e7e34;
                }

                .calendar-day.today:hover {
                    background-color: #2980b9;
                    transform: scale(1.05);
                }

            .calendar-legend {
                display: flex;
                justify-content: space-around;
                gap: 15px;
                padding-top: 15px;
                border-top: 1px solid #ecf0f1;
            }

            .legend-item {
                display: flex;
                align-items: center;
                gap: 8px;
                font-size: 0.8rem;
                color: #7f8c8d;
            }

            .legend-color {
                width: 14px;
                height: 14px;
                border-radius: 3px;
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            }

                .legend-color.today {
                    background-color: #3498db;
                }

                .legend-color.leave-day {
                    background-color: #27ae60;
                }


    /* Table Styles */
    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
    }

    .table {
        margin-bottom: 0;
    }

        .table th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #ecf0f1;
            color: #2c3e50;
            font-weight: 600;
            font-size: 0.85rem;
            padding: 12px;
        }

        .table td {
            padding: 12px;
            vertical-align: middle;
            border-top: 1px solid #ecf0f1;
            font-size: 0.85rem;
        }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
    }

    /* Badge Styles */
    .badge {
        font-size: 0.75rem;
        padding: 5px 10px;
        border-radius: 6px;
        font-weight: 500;
    }

    /* Button Styles */
    .btn {
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .btn-sm {
        padding: 6px 12px;
        font-size: 0.75rem;
    }

    .btn-outline-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.4);
    }

    .btn-success:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(39, 174, 96, 0.4);
    }

    /* Empty State Styles */
    .text-center i.fa-3x {
        opacity: 0.3;
    }

    .text-center i.fa-2x {
        opacity: 0.3;
    }

  
</style>