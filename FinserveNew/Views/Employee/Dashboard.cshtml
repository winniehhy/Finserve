@{
    ViewData["Title"] = "Employee Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Dashboard Content -->
<div class="dashboard-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="page-title">
                    <i class="fas fa-tachometer-alt me-2"></i>
                    Employee Dashboard
                </h1>
                <p class="page-subtitle">Welcome back, @User.Identity.Name | @ViewBag.CurrentMonth</p>
            </div>
            <div class="d-flex gap-2">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-plus me-2"></i>Quick Action
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Claim")"><i class="fas fa-plus-circle me-2"></i>Submit New Claim</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Leaves")"><i class="fas fa-calendar-plus me-2"></i>Apply for Leave</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="@Url.Action("Payslips", "Payroll")"><i class="fas fa-file-invoice me-2"></i>View Payslips</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row mb-4">
        @{
            // Fixed null handling for ViewBag values
            var pendingClaims = (ViewBag.PendingClaims as int?) ?? 0;
            var pendingLeaves = (ViewBag.PendingLeaves as int?) ?? 0;
            var totalPending = pendingClaims + pendingLeaves;

            // FIXED: Cast as double instead of int
            var totalRemainingLeave = (ViewBag.TotalRemainingLeave as double?) ?? 0.0;
        }

        <div class="col-lg-6 col-md-6 mb-3">
            <div class="stat-card">
                <div class="stat-icon bg-warning">
                    <i class="fas fa-hourglass-half"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@totalPending</div>
                    <div class="stat-label">Pending Requests</div>
                    <div class="stat-change @(totalPending > 3 ? "negative" : "neutral")">
                        <i class="fas fa-@(totalPending > 3 ? "exclamation-triangle" : "clock")"></i>
                        @(totalPending > 3 ? "Needs attention" : "Under review")
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-md-6 mb-3">
            <div class="stat-card">
                <div class="stat-icon bg-info">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@totalRemainingLeave.ToString("0.#")</div>
                    <div class="stat-label">Remaining Leave Days</div>
                    <div class="stat-change @(totalRemainingLeave < 3 ? "negative" : "neutral")">
                        <i class="fas fa-@(totalRemainingLeave < 3 ? "exclamation-triangle" : "calendar")"></i>
                        @(totalRemainingLeave < 3 ? "Plan ahead" : "This year")
                    </div>
                </div>
            </div>
        </div>        
    </div>

    <!-- Main Content Grid -->
    <div class="row">
        <!-- Left Column -->
        <div class="col-lg-8">
            <!-- Quick Actions -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bolt me-2"></i>Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <a href="@Url.Action("Create", "Claim")" class="quick-action-btn">
                                <div class="quick-action-icon bg-primary">
                                    <i class="fas fa-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Submit Claim</h6>
                                    <p>Create medical claim</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-3">
                            <a href="@Url.Action("Create", "Leaves")" class="quick-action-btn">
                                <div class="quick-action-icon bg-success">
                                    <i class="fas fa-calendar-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Apply Leave</h6>
                                    <p>Submit leave request</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-3">
                            <a href="@Url.Action("Payslips", "Payroll")" class="quick-action-btn">
                                <div class="quick-action-icon bg-info">
                                    <i class="fas fa-file-invoice"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>View Payslips</h6>
                                    <p>Download pay stubs</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 mb-3">
                            <a href="@Url.Action("Index", "Claim")" class="quick-action-btn">
                                <div class="quick-action-icon bg-secondary">
                                    <i class="fas fa-history"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Claims History</h6>
                                    <p>View all claims</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Claims -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-file-medical me-2"></i>Recent Claims
                    </h5>
                    <a href="@Url.Action("Index", "Claim")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentClaims != null && ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Claim ID</th>
                                        <th>Date</th>
                                        <th>Type</th>
                                        <th>Amount</th>
                                        <th>Description</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var claim in (List<FinserveNew.Models.Claim>)ViewBag.RecentClaims)
                                    {
                                        <tr class="@(claim.Status == "Pending" && (DateTime.Now - claim.CreatedDate).Days > 7 ? "table-warning" : "")">
                                            <td>#CLM-@claim.Id</td>
                                            <td>@claim.CreatedDate.ToString("dd MMM yyyy")</td>
                                            <td>
                                                <span class="badge bg-info">@claim.ClaimType</span>
                                            </td>
                                            <td>
                                                <strong>@claim.DisplayAmount</strong>
                                            </td>
                                            <td>
                                                <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@claim.Description">
                                                    @(claim.Description?.Length > 50 ? claim.Description.Substring(0, 50) + "..." : claim.Description)
                                                </span>
                                            </td>
                                            <td>
                                                @if (claim.Status == "Pending")
                                                {
                                                    <span class="badge bg-warning">@claim.Status</span>
                                                }
                                                else if (claim.Status == "Approved")
                                                {
                                                    <span class="badge bg-success">@claim.Status</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">@claim.Status</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a asp-action="Details" asp-controller="Claim" asp-route-id="@claim.Id" class="btn btn-sm btn-outline-primary" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    @if (claim.Status == "Pending")
                                                    {
                                                        <a asp-action="Edit" asp-controller="Claim" asp-route-id="@claim.Id" class="btn btn-sm btn-outline-success" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-file-medical fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No claims submitted yet</h5>
                            <p class="text-muted">Start by submitting your first medical claim.</p>
                            <a href="@Url.Action("Create", "Claim")" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Submit First Claim
                            </a>
                        </div>
                    }
                </div>
            </div>

            <!-- Recent Leave Applications -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Recent Leave Applications
                    </h5>
                    <a href="@Url.Action("LeaveRecords", "Leaves")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentLeaves != null && ((List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves).Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Leave ID</th>
                                    <th>Leave Type</th>
                                    <th>From</th>
                                    <th>To</th>
                                        <th>Days</th>
                                        <th>Status</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var leave in (List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves)
                                    {
                                        var duration = (leave.EndDate.DayNumber - leave.StartDate.DayNumber) + 1;
                                        var isUpcoming = leave.StartDate > DateOnly.FromDateTime(DateTime.Now);
                                        var isOngoing = leave.StartDate <= DateOnly.FromDateTime(DateTime.Now) && leave.EndDate >= DateOnly.FromDateTime(DateTime.Now);
                                        
                                        <tr class="@(leave.Status == "Pending" && (DateTime.Now - leave.CreatedDate).Days > 3 ? "table-warning" : isOngoing && leave.Status == "Approved" ? "table-success" : "")">
                                            <td><strong>#LVE-@leave.LeaveID</strong></td>
                                            <td>
                                                <span class="badge bg-info">@(leave.LeaveType?.TypeName ?? "N/A")</span>
                                            </td>
                                            <td>
                                                @if (isOngoing && leave.Status == "Approved")
                                                {
                                                    <span class="badge bg-success">On Leave</span>
                                                }
                                                else if (isUpcoming && leave.Status == "Approved")
                                                {
                                                    <span class="badge bg-primary">Upcoming</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">@(leave.StartDate < DateOnly.FromDateTime(DateTime.Now) ? "Past" : "Future")</span>
                                                }
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@leave.StartDate.ToString("dd MMM")</strong> - <strong>@leave.EndDate.ToString("dd MMM, yyyy")</strong>
                                                </div>
                                            </td>
                                            <td><strong>@duration days</strong></td>
                                            <td>
                                                <span class="badge bg-@(leave.Status == "Approved" ? "success" : leave.Status == "Pending" ? "warning" : "danger")">
                                                    @leave.Status
                                                </span>
                                            </td>
                                            <td>
                                                <a href="@Url.Action("Details", "Leaves", new { id = leave.LeaveID })" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye me-1"></i>View
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No leave applications yet</h5>
                            <p class="text-muted">Apply for your first leave when needed.</p>
                            <a href="@Url.Action("Create", "Leaves")" class="btn btn-success">
                                <i class="fas fa-calendar-plus me-2"></i>Apply for Leave
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-lg-4">
            <!-- Leave Balance -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-check me-2"></i>Leave Balance (@((ViewBag.CurrentYear as int?) ?? DateTime.Now.Year))
                    </h5>
                </div>
                <div class="card-body">
                    @if (ViewBag.LeaveBalances != null && ((Dictionary<string, object>)ViewBag.LeaveBalances).Any())
                    {
                        foreach (var balance in (Dictionary<string, object>)ViewBag.LeaveBalances)
                        {
                            var leaveBalance = balance.Value as dynamic;
                            if (leaveBalance != null)
                            {
                                var remainingDays = Convert.ToDouble(leaveBalance.RemainingDays ?? 0);
                                var defaultDays = Convert.ToDouble(leaveBalance.DefaultDays ?? 0);
                                var usedDays = Convert.ToDouble(leaveBalance.UsedDays ?? 0);
                                var pendingDays = Convert.ToDouble(leaveBalance.PendingDays ?? 0);
                                var percentage = defaultDays > 0 ? (remainingDays * 100.0 / defaultDays) : 0;
                                var progressColor = percentage > 70 ? "success" : percentage > 30 ? "warning" : "danger";

                                <div class="leave-balance-item">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="fw-medium">@balance.Key</span>
                                        <span class="fw-bold">@remainingDays.ToString("0.#") / @defaultDays.ToString("0.#") days</span>
                                    </div>
                                    <div class="progress mb-2" style="height: 10px;">
                                        <div class="progress-bar bg-@progressColor"
                                             style="width: @percentage.ToString("0.0")%"
                                             role="progressbar"
                                             aria-valuenow="@remainingDays"
                                             aria-valuemin="0"
                                             aria-valuemax="@defaultDays">
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-between text-sm">
                                        <small class="text-muted">Used: @usedDays.ToString("0.#") days</small>
                                        @if (pendingDays > 0)
                                        {
                                            <small class="text-warning">Pending: @pendingDays.ToString("0.#") days</small>
                                        }
                                    </div>
                                    <hr class="my-3">
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-circle fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No leave balance data available</p>
                            <small class="text-muted">Contact HR if you believe this is an error</small>
                        </div>
                    }
                </div>
            </div>

            <!-- Notifications -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bell me-2"></i>Notifications
                    </h5>
                    <button class="btn btn-sm btn-outline-secondary" onclick="markAllAsRead()">
                        Mark All Read
                    </button>
                </div>
                <div class="card-body" id="notificationContainer">
                    @{
                        var hasNotifications = false;
                        var currentMonth = DateTime.Now.Month;
                        var currentYear = DateTime.Now.Year;
                        var isDecember = currentMonth == 12;
                    }

                    @* Leave Reminder for December *@
                    @if (isDecember && totalRemainingLeave > 10)
                    {
                        hasNotifications = true;
                        <div class="notification-item urgent" data-type="leave-reminder" data-id="leave-reminder-@currentYear">
                            <div class="notification-icon bg-warning">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="notification-content">
                                <h6>Leave Balance Reminder</h6>
                                <p>You have @totalRemainingLeave.ToString("0.#") days of leave remaining. Please plan to clear your leave before year-end.</p>
                                <small class="text-muted">December @DateTime.Now.Year</small>
                            </div>
                            <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'leave-reminder', 'leave-reminder-@currentYear')">
                                Mark as Read
                            </button>
                        </div>
                    }

                    @* Low Leave Balance Warning *@
                    @if (totalRemainingLeave < 3 && totalRemainingLeave > 0)
                    {
                        hasNotifications = true;
                        <div class="notification-item" data-type="low-leave" data-id="low-leave-@currentYear">
                            <div class="notification-icon bg-warning">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="notification-content">
                                <h6>Low Leave Balance</h6>
                                <p>You only have @totalRemainingLeave.ToString("0.#") days of leave remaining this year. Plan your leave carefully.</p>
                                <small class="text-muted">Current year balance</small>
                            </div>
                            <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'low-leave', 'low-leave-@currentYear')">
                                Mark as Read
                            </button>
                        </div>
                    }
                    @* Approved Claims *@
                    @if (ViewBag.RecentClaims != null)
                    {
                        var recentApprovedClaims = ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Where(c => c.Status == "Approved" && (DateTime.Now - c.CreatedDate).Days <= 7).Take(2);
                        foreach (var claim in recentApprovedClaims)
                        {
                            hasNotifications = true;
                            <div class="notification-item" data-type="claim" data-id="claim-@claim.Id">
                                <div class="notification-icon bg-success">
                                    <i class="fas fa-check"></i>
                                </div>
                                <div class="notification-content">
                                    <h6>Claim Approved</h6>
                                    <p>Your @claim.ClaimType claim for @claim.DisplayAmount has been approved.</p>
                                    <small class="text-muted">@((DateTime.Now - claim.CreatedDate).Days) days ago</small>
                                </div>
                                <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'claim', 'claim-@claim.Id')">
                                    Mark as Read
                                </button>
                            </div>
                        }
                    }

                    @* Approved Leaves *@
                    @if (ViewBag.RecentLeaves != null)
                    {
                        var recentApprovedLeaves = ((List<FinserveNew.Models.LeaveModel>)ViewBag.RecentLeaves).Where(l => l.Status == "Approved" && (DateTime.Now - l.CreatedDate).Days <= 7).Take(2);
                        foreach (var leave in recentApprovedLeaves)
                        {
                            hasNotifications = true;
                            <div class="notification-item" data-type="leave" data-id="leave-@leave.LeaveID">
                                <div class="notification-icon bg-success">
                                    <i class="fas fa-calendar-check"></i>
                                </div>
                                <div class="notification-content">
                                    <h6>Leave Approved</h6>
                                    <p>Your @(leave.LeaveType?.TypeName ?? "leave") request has been approved.</p>
                                    <small class="text-muted">@leave.StartDate.ToString("MMM dd") - @leave.EndDate.ToString("MMM dd")</small>
                                </div>
                                <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'leave', 'leave-@leave.LeaveID')">
                                    Mark as Read
                                </button>
                            </div>
                        }
                    }

                    @if (!hasNotifications)
                    {
                        <div class="text-center py-3" id="noNotifications">
                            <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                            <p class="text-muted">All caught up! No recent notifications.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Enhanced Calendar Widget -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar me-2"></i>Leave Calendar
                    </h5>
                </div>
                <div class="card-body">
                    <div class="calendar-widget" id="calendarWidget">
                        <!-- Calendar navigation -->
                        <div class="calendar-navigation">
                            <button class="btn btn-sm btn-outline-primary" id="prevMonth" onclick="changeMonth(-1)">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <div class="calendar-month-year" id="calendarMonthYear">
                                <!-- Will be populated by JavaScript -->
                            </div>
                            <button class="btn btn-sm btn-outline-primary" id="nextMonth" onclick="changeMonth(1)">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>

                        <!-- Calendar grid -->
                        <div class="calendar-grid" id="calendarGrid">
                            <!-- Will be populated by JavaScript -->
                        </div>

                        <!-- Calendar legend -->
                        <div class="calendar-legend">
                            <div class="legend-item">
                                <div class="legend-color today"></div>
                                <span>Today</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color leave-day"></div>
                                <span>Approved Leave</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced Employee Dashboard functionality
        document.addEventListener('DOMContentLoaded', function() {
            initializeCalendar();
            loadReadNotifications();
            initializeTooltips();
        });

        // Initialize Bootstrap tooltips
        function initializeTooltips() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Calendar state
        let currentCalendarMonth = new Date().getMonth();
        let currentCalendarYear = new Date().getFullYear();
        const today = new Date();

        // Get calendar data from server (passed from controller) - with null safety
        const calendarData = @Html.Raw(Json.Serialize(ViewBag.CalendarData ?? new Dictionary<string, List<int>>()));

        // Initialize calendar
        function initializeCalendar() {
            generateCalendar();
            updateCalendarTitle();
        }

        // Change month function
        function changeMonth(direction) {
            currentCalendarMonth += direction;

            // Handle year boundaries
            if (currentCalendarMonth > 11) {
                currentCalendarMonth = 0;
                currentCalendarYear++;
            } else if (currentCalendarMonth < 0) {
                currentCalendarMonth = 11;
                currentCalendarYear--;
            }

            generateCalendar();
            updateCalendarTitle();
        }

        // Update calendar title
        function updateCalendarTitle() {
            const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'];

            const monthYearElement = document.getElementById('calendarMonthYear');
            const titleElement = document.getElementById('calendarTitle');

            const monthYearText = `${monthNames[currentCalendarMonth]} ${currentCalendarYear}`;

            if (monthYearElement) {
                monthYearElement.textContent = monthYearText;
            }
            if (titleElement) {
                titleElement.textContent = monthYearText;
            }
        }

        // Generate calendar with leave dates
        function generateCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            if (!calendarGrid) return;

            // Get first day of month and number of days
            const firstDay = new Date(currentCalendarYear, currentCalendarMonth, 1);
            const lastDay = new Date(currentCalendarYear, currentCalendarMonth + 1, 0);
            const firstDayWeek = firstDay.getDay();
            const daysInMonth = lastDay.getDate();

            // Get leave dates for current month
            const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
            const leaveDatesForMonth = calendarData[monthKey] || [];
            const leaveDatesSet = new Set(leaveDatesForMonth);

            // Build calendar HTML
            let calendarHTML = `
                <div class="calendar-day-header">S</div>
                <div class="calendar-day-header">M</div>
                <div class="calendar-day-header">T</div>
                <div class="calendar-day-header">W</div>
                <div class="calendar-day-header">T</div>
                <div class="calendar-day-header">F</div>
                <div class="calendar-day-header">S</div>
            `;

            // Add empty cells for days before month starts
            for (let i = 0; i < firstDayWeek; i++) {
                calendarHTML += '<div class="calendar-day"></div>';
            }

            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                let classes = 'calendar-day';

                // Check if it's today
                if (day === today.getDate() &&
                    currentCalendarMonth === today.getMonth() &&
                    currentCalendarYear === today.getFullYear()) {
                    classes += ' today';
                }

                // Check if it's a leave day
                if (leaveDatesSet.has(day)) {
                    classes += ' leave-day';
                }

                calendarHTML += `<div class="${classes}" onclick="selectDate(${day})" title="${leaveDatesSet.has(day) ? 'Leave day' : ''}">${day}</div>`;
            }

            calendarGrid.innerHTML = calendarHTML;
        }

        // Handle date selection
        function selectDate(day) {
            const selectedDate = new Date(currentCalendarYear, currentCalendarMonth, day);
            const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
            const leaveDatesForMonth = calendarData[monthKey] || [];

            if (leaveDatesForMonth.includes(day)) {
                showLeaveDetails(selectedDate);
            }
        }

        // Show leave details
        function showLeaveDetails(date) {
            const formattedDate = date.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            // Create a modal or tooltip to show leave details
            if (confirm(`You have approved leave on ${formattedDate}.\n\nWould you like to view your leave records?`)) {
                window.location.href = '@Url.Action("LeaveRecords", "Leaves")';
            }
        }

        // Read notifications functions with localStorage safety
        let readNotifications = [];
        try {
            readNotifications = JSON.parse(localStorage.getItem('employee_readNotifications') || '[]');
        } catch (e) {
            console.warn('Failed to parse readNotifications from localStorage:', e);
            readNotifications = [];
        }

        function loadReadNotifications() {
            readNotifications.forEach(function(notificationId) {
                const notification = document.querySelector(`[data-id="${notificationId}"]`);
                if (notification) {
                    notification.style.display = 'none';
                }
            });
            checkForEmptyNotifications();
        }

        function markAsRead(button, type, id) {
            const notificationItem = button.closest('.notification-item');

            if (!readNotifications.includes(id)) {
                readNotifications.push(id);
                try {
                    localStorage.setItem('employee_readNotifications', JSON.stringify(readNotifications));
                } catch (e) {
                    console.warn('Failed to save to localStorage:', e);
                }
            }

            notificationItem.style.transition = 'opacity 0.3s ease';
            notificationItem.style.opacity = '0';

            setTimeout(() => {
                notificationItem.style.display = 'none';
                checkForEmptyNotifications();
            }, 300);
        }

        function markAllAsRead() {
            const notifications = document.querySelectorAll('.notification-item');

            notifications.forEach(function(notification) {
                const id = notification.getAttribute('data-id');
                if (id && !readNotifications.includes(id)) {
                    readNotifications.push(id);
                }

                notification.style.transition = 'opacity 0.3s ease';
                notification.style.opacity = '0';

                setTimeout(() => {
                    notification.style.display = 'none';
                }, 300);
            });

            try {
                localStorage.setItem('employee_readNotifications', JSON.stringify(readNotifications));
            } catch (e) {
                console.warn('Failed to save to localStorage:', e);
            }

            setTimeout(() => {
                checkForEmptyNotifications();
            }, 300);
        }

        function checkForEmptyNotifications() {
            const visibleNotifications = document.querySelectorAll('.notification-item[style*="display: none"], .notification-item[style*="opacity: 0"]');
            const allNotifications = document.querySelectorAll('.notification-item');

            if (visibleNotifications.length === allNotifications.length || allNotifications.length === 0) {
                const container = document.getElementById('notificationContainer');
                let emptyState = document.getElementById('noNotifications');

                if (!emptyState) {
                    emptyState = document.createElement('div');
                    emptyState.id = 'noNotifications';
                    emptyState.className = 'text-center py-3';
                    emptyState.innerHTML = `
                        <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                        <p class="text-muted">All caught up! No recent notifications.</p>
                    `;
                    container.appendChild(emptyState);
                } else {
                    emptyState.style.display = 'block';
                }
            }
        }

        // Auto-refresh notifications every 5 minutes
        setInterval(function() {
            // You could add AJAX call here to refresh notifications
        }, 300000); // 5 minutes
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/rbac_dashboard.css" />
    <style>
        /* Employee Dashboard specific styles */
        .stat-card.urgent {
            animation: urgentPulse 2s infinite;
            border: 2px solid #dc3545;
        }

        .notification-item.urgent {
            border-left: 4px solid #dc3545;
            background-color: #fff5f5;
        }

        .quick-action-btn.urgent {
            animation: urgentPulse 2s infinite;
        }

        @@keyframes urgentPulse {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }

        /* Enhanced table styling */
        .table-warning {
            --bs-table-bg: #fff3cd;
        }

        .table-success {
            --bs-table-bg: #d1edff;
        }

        /* Enhanced leave balance progress bars */
        .progress {
            border-radius: 6px;
            overflow: hidden;
        }

        .progress-bar {
            transition: width 0.3s ease;
        }

        /* Enhanced calendar styling */
        .calendar-day {
            transition: all 0.2s ease;
            cursor: pointer;
            font-weight: 500;
        }

        .calendar-day:hover {
            background: #e3f2fd;
            transform: scale(1.05);
        }

        .calendar-day.today {
            background: #2196f3;
            color: white;
            font-weight: 700;
            box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);
        }

        .calendar-day.leave-day {
            background: #4caf50;
            color: white;
            font-weight: 600;
        }

        .calendar-day.leave-day.today {
            background: #388e3c;
        }

        /* Enhanced notification styling */
        .notification-item {
            border-radius: 10px;
            margin-bottom: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .notification-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        /* Enhanced quick action buttons */
        .quick-action-btn {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .quick-action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .quick-action-btn:hover::before {
            left: 100%;
        }

        /* Badge positioning for notifications */
        .position-absolute {
            z-index: 10;
        }

        /* Enhanced card hover effects */
        .card {
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }

        /* Status indicators */
        .badge {
            font-size: 0.75em;
            padding: 0.375em 0.5em;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .stat-number {
                font-size: 1.5rem;
            }

            .quick-action-content h6 {
                font-size: 0.9rem;
            }

            .quick-action-content p {
                font-size: 0.75rem;
            }

            .notification-item {
                padding: 12px;
            }
        }
    </style>
}