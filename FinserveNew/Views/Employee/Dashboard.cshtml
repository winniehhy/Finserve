@{
    ViewData["Title"] = "Employee Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Dashboard Content -->
<div class="dashboard-container">
    <!-- Page Header -->
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="page-title">
                    <i class="fas fa-tachometer-alt me-2"></i>
                    Employee Dashboard
                </h1>
                <p class="page-subtitle">Welcome back, @User.Identity.Name | @ViewBag.CurrentMonth</p>
            </div>
            <div class="d-flex gap-2">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-plus me-2"></i>Quick Action
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Claim")"><i class="fas fa-plus-circle me-2"></i>Submit New Claim</a></li>
                        <li><a class="dropdown-item" href="@Url.Action("Create", "Leaves")"><i class="fas fa-calendar-plus me-2"></i>Apply for Leave</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="@Url.Action("Payslips", "Payroll")"><i class="fas fa-file-invoice me-2"></i>View Payslips</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row mb-3">
        @{
            // Fixed null handling for ViewBag values
            var pendingClaims = (ViewBag.PendingClaims as int?) ?? 0;
            var pendingLeaves = (ViewBag.PendingLeaves as int?) ?? 0;
            var totalPending = pendingClaims + pendingLeaves;

            // FIXED: Cast as double instead of int
            var totalRemainingLeave = (ViewBag.TotalRemainingLeave as double?) ?? 0.0;
        }

        <div class="col-lg-6 col-md-6 mb-2">
            <div class="stat-card compact">
                <div class="stat-icon bg-warning">
                    <i class="fas fa-hourglass-half"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@totalPending</div>
                    <div class="stat-label">Pending Requests</div>
                    <div class="stat-change @(totalPending > 3 ? "negative" : "neutral")">
                        <i class="fas fa-@(totalPending > 3 ? "exclamation-triangle" : "clock")"></i>
                        @(totalPending > 3 ? "Needs attention" : "Under review")
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6 col-md-6 mb-2">
            <div class="stat-card compact">
                <div class="stat-icon bg-info">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@totalRemainingLeave.ToString("0.#")</div>
                    <div class="stat-label">Remaining Leave Days</div>
                    <div class="stat-change @(totalRemainingLeave < 3 ? "negative" : "neutral")">
                        <i class="fas fa-@(totalRemainingLeave < 3 ? "exclamation-triangle" : "calendar")"></i>
                        @(totalRemainingLeave < 3 ? "Plan ahead" : "This year")
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div class="row">
        <!-- Left Column -->
        <div class="col-lg-8 col-xl-8">
            <!-- Quick Actions -->
            <div class="card mb-3">
                <div class="card-header py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-bolt me-2"></i>Quick Actions
                    </h6>
                </div>
                <div class="card-body py-3">
                    <div class="row g-2">
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("Create", "Claim")" class="quick-action-btn compact">
                                <div class="quick-action-icon bg-primary">
                                    <i class="fas fa-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Submit Claim</h6>
                                    <p>Create medical claim</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("Create", "Leaves")" class="quick-action-btn compact">
                                <div class="quick-action-icon bg-success">
                                    <i class="fas fa-calendar-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Apply Leave</h6>
                                    <p>Submit leave request</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("UnpaidLeaveRequests", "Leaves")" class="quick-action-btn compact">
                                <div class="quick-action-icon bg-warning">
                                    <i class="fas fa-file-invoice"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Unpaid Leaves</h6>
                                    <p>View unpaid requests</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("Payslips", "Payroll")" class="quick-action-btn compact">
                                <div class="quick-action-icon bg-info">
                                    <i class="fas fa-file-invoice"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>View Payslips</h6>
                                    <p>Download pay stubs</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Claims -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-file-medical me-2"></i>Recent Claims
                    </h6>
                    <a href="@Url.Action("Index", "Claim")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body py-2">
                    @if (ViewBag.RecentClaims != null && ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Any())
                    {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var claim in ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Take(3))
                                {
                                <tr class="@(claim.Status == "Pending" && (DateTime.Now - claim.CreatedDate).Days > 7 ? "table-warning" : "")">
                                    <td><small>#CLM-@claim.Id</small></td>
                                    <td><small>@claim.CreatedDate.ToString("dd MMM")</small></td>
                                    <td>
                                        <span class="badge bg-info badge-sm">@claim.ClaimType</span>
                                    </td>
                                    <td>
                                        <strong>@claim.DisplayAmount</strong>
                                    </td>
                                    <td>
                                        @if (claim.Status == "Pending")
                                        {
                                        <span class="badge bg-warning badge-sm">@claim.Status</span>
                                        }
                                        else if (claim.Status == "Approved")
                                        {
                                        <span class="badge bg-success badge-sm">@claim.Status</span>
                                        }
                                        else
                                        {
                                        <span class="badge bg-danger badge-sm">@claim.Status</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-controller="Claim" asp-route-id="@claim.Id" class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            @if (claim.Status == "Pending")
                                            {
                                            <a asp-action="Edit" asp-controller="Claim" asp-route-id="@claim.Id" class="btn btn-sm btn-outline-success" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    }
                    else
                    {
                    <div class="text-center py-3">
                        <i class="fas fa-file-medical fa-2x text-muted mb-2"></i>
                        <h6 class="text-muted">No claims submitted yet</h6>
                        <p class="text-muted mb-2">Start by submitting your first medical claim.</p>
                        <a href="@Url.Action("Create", "Claim")" class="btn btn-primary btn-sm">
                            <i class="fas fa-plus me-2"></i>Submit First Claim
                        </a>
                    </div>
                    }
                </div>
            </div>

            <!-- Recent Leave Applications -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Recent Leave Applications
                    </h6>
                    <a href="@Url.Action("LeaveRecords", "Leaves")" class="btn btn-sm btn-outline-primary">View All</a>
                </div>
                <div class="card-body py-2">
                    @if (ViewBag.RecentLeaves != null && ((List<object>)ViewBag.RecentLeaves).Any())
                    {
                    <div class="table-responsive">
                        <table class="table table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Type</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Days</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (dynamic leave in ((List<object>)ViewBag.RecentLeaves).Take(3))
                                    {
                                        var leaveType = leave.GetType().GetProperty("Type")?.GetValue(leave)?.ToString();
                                        var isUnpaid = leaveType == "Unpaid";
                                        var duration = isUnpaid ? Convert.ToDouble(leave.Days) : (leave.EndDate.DayNumber - leave.StartDate.DayNumber) + 1;
                                <tr>
                                    <td><small>#LVE-@leave.Id.ToString("D3")</small></td>
                                    <td>
                                        <span class="badge bg-info badge-sm">@(leave.LeaveType?.TypeName ?? "N/A")</span>
                                    </td>
                                    <td><small>@leave.StartDate.ToString("dd MMM")</small></td>
                                    <td><small>@leave.EndDate.ToString("dd MMM")</small></td>
                                    <td><strong>@duration.ToString("0.#")</strong></td>
                                    <td>
                                        <span class="badge bg-@(leave.Status == "Approved" ? "success" : leave.Status == "Pending" ? "warning" : "danger") badge-sm">
                                            @leave.Status
                                        </span>
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Details", "Leaves", new { id = leave.Id })" class="btn btn-sm btn-outline-primary">View</a>
                                    </td>
                                </tr>
                                    }
                            </tbody>
                        </table>
                    </div>
                    }
                    else
                    {
                    <div class="text-center py-3">
                        <i class="fas fa-calendar-alt fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-2">No recent leave applications</p>
                        <a href="@Url.Action("Create", "Leaves")" class="btn btn-primary btn-sm">Apply for Leave</a>
                    </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-lg-4 col-xl-4">
            <!-- Leave Balance -->
            <div class="card mb-3">
                <div class="card-header py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-calendar-check me-2"></i>Leave Balance (@((ViewBag.CurrentYear as int?) ?? DateTime.Now.Year))
                    </h6>
                </div>
                <div class="card-body py-2">
                    @if (ViewBag.LeaveBalances != null && ((Dictionary<string, object>)ViewBag.LeaveBalances).Any())
                    {
                        foreach (var balance in (Dictionary<string, object>)ViewBag.LeaveBalances)
                        {
                            var leaveBalance = balance.Value as dynamic;
                            if (leaveBalance != null)
                            {
                                var remainingDays = Convert.ToDouble(leaveBalance.RemainingDays ?? 0);
                                var defaultDays = Convert.ToDouble(leaveBalance.DefaultDays ?? 0);
                                var usedDays = Convert.ToDouble(leaveBalance.UsedDays ?? 0);
                                var pendingDays = Convert.ToDouble(leaveBalance.PendingDays ?? 0);
                                var percentage = defaultDays > 0 ? (remainingDays * 100.0 / defaultDays) : 0;
                                var progressColor = percentage > 70 ? "success" : percentage > 30 ? "warning" : "danger";

                    <div class="leave-balance-item compact">
                        <div class="d-flex justify-content-between align-items-center mb-1">
                            <small class="fw-medium">@balance.Key</small>
                            <small class="fw-bold">@remainingDays.ToString("0.#") / @defaultDays.ToString("0.#")</small>
                        </div>
                        <div class="progress mb-1" style="height: 8px;">
                            <div class="progress-bar bg-@progressColor"
                                 style="width: @percentage.ToString("0.0")%"
                                 role="progressbar"
                                 aria-valuenow="@remainingDays"
                                 aria-valuemin="0"
                                 aria-valuemax="@defaultDays">
                            </div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <small class="text-muted">Used: @usedDays.ToString("0.#")</small>
                            @if (pendingDays > 0)
                                {
                            <small class="text-warning">Pending: @pendingDays.ToString("0.#")</small>
                                }
                        </div>
                        <hr class="my-2">
                    </div>
                            }
                        }
                    }
                    else
                    {
                    <div class="text-center py-3">
                        <i class="fas fa-exclamation-circle fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-1">No leave balance data available</p>
                        <small class="text-muted">Contact HR if you believe this is an error</small>
                    </div>
                    }
                </div>
            </div>

            <!-- Notifications -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-bell me-2"></i>Notifications
                    </h6>
                    <button class="btn btn-sm btn-outline-secondary" onclick="markAllAsRead()">
                        <small>Mark All Read</small>
                    </button>
                </div>
                <div class="card-body py-2" id="notificationContainer">
                    @{
                    var hasNotifications = false;
                    var currentMonth = DateTime.Now.Month;
                    var currentYear = DateTime.Now.Year;
                    var isDecember = currentMonth == 12;
                    }

                    @* Leave Reminder for December *@
                    @if (isDecember && totalRemainingLeave > 10)
                    {
                        hasNotifications = true;
                    <div class="notification-item compact urgent" data-type="leave-reminder" data-id="leave-reminder-@currentYear">
                        <div class="notification-icon bg-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <div class="notification-content">
                            <h6>Leave Balance Reminder</h6>
                            <p><small>You have @totalRemainingLeave.ToString("0.#") days remaining. Plan to clear before year-end.</small></p>
                            <small class="text-muted">December @DateTime.Now.Year</small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'leave-reminder', 'leave-reminder-@currentYear')">
                            <small>Read</small>
                        </button>
                    </div>
                    }

                    @* Low Leave Balance Warning *@
                    @if (totalRemainingLeave < 3 && totalRemainingLeave > 0)
                    {
                        hasNotifications = true;
                    <div class="notification-item compact" data-type="low-leave" data-id="low-leave-@currentYear">
                        <div class="notification-icon bg-warning">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <div class="notification-content">
                            <h6>Low Leave Balance</h6>
                            <p><small>Only @totalRemainingLeave.ToString("0.#") days remaining. Plan carefully.</small></p>
                            <small class="text-muted">Current year balance</small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'low-leave', 'low-leave-@currentYear')">
                            <small>Read</small>
                        </button>
                    </div>
                    }

                    @* Approved Claims *@
                    @if (ViewBag.RecentClaims != null)
                    {
                        var recentApprovedClaims = ((List<FinserveNew.Models.Claim>)ViewBag.RecentClaims).Where(c => c.Status == "Approved" && (DateTime.Now - c.CreatedDate).Days <= 7).Take(2);
                        foreach (var claim in recentApprovedClaims)
                        {
                            hasNotifications = true;
                    <div class="notification-item compact" data-type="claim" data-id="claim-@claim.Id">
                        <div class="notification-icon bg-success">
                            <i class="fas fa-check"></i>
                        </div>
                        <div class="notification-content">
                            <h6>Claim Approved</h6>
                            <p><small>@claim.ClaimType claim for @claim.DisplayAmount approved.</small></p>
                            <small class="text-muted">@((DateTime.Now - claim.CreatedDate).Days) days ago</small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary notification-read-btn" onclick="markAsRead(this, 'claim', 'claim-@claim.Id')">
                            <small>Read</small>
                        </button>
                    </div>
                        }
                    }

                    @if (!hasNotifications)
                    {
                    <div class="text-center py-2" id="noNotifications">
                        <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-0"><small>All caught up! No recent notifications.</small></p>
                    </div>
                    }
                </div>
            </div>

            <!-- Compact Calendar Widget -->
            <div class="card">
                <div class="card-header py-2">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-calendar me-2"></i>Leave Calendar
                    </h6>
                </div>
                <div class="card-body py-2">
                    <div class="calendar-widget compact" id="calendarWidget">
                        <!-- Calendar navigation -->
                        <div class="calendar-navigation">
                            <button class="btn btn-sm btn-outline-primary" id="prevMonth" onclick="changeMonth(-1)">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                            <div class="calendar-month-year" id="calendarMonthYear">
                                <!-- Will be populated by JavaScript -->
                            </div>
                            <button class="btn btn-sm btn-outline-primary" id="nextMonth" onclick="changeMonth(1)">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </div>

                        <!-- Calendar grid -->
                        <div class="calendar-grid compact" id="calendarGrid">
                            <!-- Will be populated by JavaScript -->
                        </div>

                        <!-- Calendar legend -->
                        <div class="calendar-legend">
                            <div class="legend-item">
                                <div class="legend-color today"></div>
                                <span><small>Today</small></span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color leave-day"></div>
                                <span><small>Leave</small></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced Employee Dashboard functionality
        document.addEventListener('DOMContentLoaded', function() {
            initializeCalendar();
            loadReadNotifications();
            initializeTooltips();
        });

        // Initialize Bootstrap tooltips
        function initializeTooltips() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Calendar state
        let currentCalendarMonth = new Date().getMonth();
        let currentCalendarYear = new Date().getFullYear();
        const today = new Date();

        // Get calendar data from server (passed from controller) - with null safety
        const calendarData = @Html.Raw(Json.Serialize(ViewBag.CalendarData ?? new Dictionary<string, List<int>>()));

        // Initialize calendar
        function initializeCalendar() {
            generateCalendar();
            updateCalendarTitle();
        }

        // Change month function
        function changeMonth(direction) {
            currentCalendarMonth += direction;

            // Handle year boundaries
            if (currentCalendarMonth > 11) {
                currentCalendarMonth = 0;
                currentCalendarYear++;
            } else if (currentCalendarMonth < 0) {
                currentCalendarMonth = 11;
                currentCalendarYear--;
            }

            generateCalendar();
            updateCalendarTitle();
        }

        // Update calendar title
        function updateCalendarTitle() {
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

            const monthYearElement = document.getElementById('calendarMonthYear');
            const titleElement = document.getElementById('calendarTitle');

            const monthYearText = `${monthNames[currentCalendarMonth]} ${currentCalendarYear}`;

            if (monthYearElement) {
                monthYearElement.textContent = monthYearText;
            }
            if (titleElement) {
                titleElement.textContent = monthYearText;
            }
        }

        // Generate calendar with leave dates
        function generateCalendar() {
            const calendarGrid = document.getElementById('calendarGrid');
            if (!calendarGrid) return;

            // Get first day of month and number of days
            const firstDay = new Date(currentCalendarYear, currentCalendarMonth, 1);
            const lastDay = new Date(currentCalendarYear, currentCalendarMonth + 1, 0);
            const firstDayWeek = firstDay.getDay();
            const daysInMonth = lastDay.getDate();

            // Get leave dates for current month
            const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
            const leaveDatesForMonth = calendarData[monthKey] || [];
            const leaveDatesSet = new Set(leaveDatesForMonth);

            // Build calendar HTML
            let calendarHTML = `
                <div class="calendar-day-header">S</div>
                <div class="calendar-day-header">M</div>
                <div class="calendar-day-header">T</div>
                <div class="calendar-day-header">W</div>
                <div class="calendar-day-header">T</div>
                <div class="calendar-day-header">F</div>
                <div class="calendar-day-header">S</div>
            `;

            // Add empty cells for days before month starts
            for (let i = 0; i < firstDayWeek; i++) {
                calendarHTML += '<div class="calendar-day"></div>';
            }

            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                let classes = 'calendar-day';

                // Check if it's today
                if (day === today.getDate() &&
                    currentCalendarMonth === today.getMonth() &&
                    currentCalendarYear === today.getFullYear()) {
                    classes += ' today';
                }

                // Check if it's a leave day
                if (leaveDatesSet.has(day)) {
                    classes += ' leave-day';
                }

                calendarHTML += `<div class="${classes}" onclick="selectDate(${day})" title="${leaveDatesSet.has(day) ? 'Leave day' : ''}">${day}</div>`;
            }

            calendarGrid.innerHTML = calendarHTML;
        }

        // Handle date selection
        function selectDate(day) {
            const selectedDate = new Date(currentCalendarYear, currentCalendarMonth, day);
            const monthKey = `${currentCalendarYear}-${(currentCalendarMonth + 1).toString().padStart(2, '0')}`;
            const leaveDatesForMonth = calendarData[monthKey] || [];

            if (leaveDatesForMonth.includes(day)) {
                showLeaveDetails(selectedDate);
            }
        }

        // Show leave details
        function showLeaveDetails(date) {
            const formattedDate = date.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            // Create a modal or tooltip to show leave details
            if (confirm(`You have approved leave on ${formattedDate}.\n\nWould you like to view your leave records?`)) {
                window.location.href = '@Url.Action("LeaveRecords", "Leaves")';
            }
        }

        // Read notifications functions with in-memory storage
        let readNotifications = [];

        function loadReadNotifications() {
            readNotifications.forEach(function(notificationId) {
                const notification = document.querySelector(`[data-id="${notificationId}"]`);
                if (notification) {
                    notification.style.display = 'none';
                }
            });
            checkForEmptyNotifications();
        }

        function markAllAsRead() {
            const notifications = document.querySelectorAll('.notification-item');

            notifications.forEach(function(notification) {
                const id = notification.getAttribute('data-id');
                if (id && !readNotifications.includes(id)) {
                    readNotifications.push(id);
                }

                notification.style.transition = 'opacity 0.3s ease';
                notification.style.opacity = '0';

                setTimeout(() => {
                    notification.style.display = 'none';
                }, 300);
            });

            setTimeout(() => {
                checkForEmptyNotifications();
            }, 300);
        }

        function checkForEmptyNotifications() {
            const visibleNotifications = document.querySelectorAll('.notification-item[style*="display: none"], .notification-item[style*="opacity: 0"]');
            const allNotifications = document.querySelectorAll('.notification-item');

            if (visibleNotifications.length === allNotifications.length || allNotifications.length === 0) {
                const container = document.getElementById('notificationContainer');
                let emptyState = document.getElementById('noNotifications');

                if (!emptyState) {
                    emptyState = document.createElement('div');
                    emptyState.id = 'noNotifications';
                    emptyState.className = 'text-center py-2';
                    emptyState.innerHTML = `
                        <i class="fas fa-bell-slash fa-2x text-muted mb-2"></i>
                        <p class="text-muted mb-0"><small>All caught up! No recent notifications.</small></p>
                    `;
                    container.appendChild(emptyState);
                } else {
                    emptyState.style.display = 'block';
                }
            }
        }

        // Auto-refresh notifications every 5 minutes
        setInterval(function() {
            // You could add AJAX call here to refresh notifications
        }, 300000); // 5 minutes
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/css/rbac_dashboard.css" />
    <style>
        /* Compact Dashboard Styles */
        .dashboard-container {
            font-size: 0.9rem;
        }

        /* Compact stat cards */
        .stat-card.compact {
            padding: 1rem;
            min-height: auto;
        }

        .stat-card.compact .stat-number {
            font-size: 1.5rem;
        }

        .stat-card.compact .stat-label {
            font-size: 0.8rem;
        }

        .stat-card.compact .stat-change {
            font-size: 0.75rem;
        }

        /* Compact quick action buttons */
        .quick-action-btn.compact {
            padding: 0.75rem;
            min-height: auto;
        }

        .quick-action-btn.compact .quick-action-icon {
            width: 35px;
            height: 35px;
            line-height: 35px;
        }

        .quick-action-btn.compact .quick-action-content h6 {
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
        }

        .quick-action-btn.compact .quick-action-content p {
            font-size: 0.7rem;
            margin-bottom: 0;
        }

        /* Compact cards */
        .card.mb-3 {
            margin-bottom: 1rem !important;
        }

        .card-header.py-2 {
            padding: 0.5rem 1rem !important;
        }

        .card-body.py-2 {
            padding: 0.5rem 1rem !important;
        }

        .card-body.py-3 {
            padding: 0.75rem 1rem !important;
        }

        /* Compact tables */
        .table-sm td, .table-sm th {
            padding: 0.4rem;
            font-size: 0.8rem;
        }

        .badge.badge-sm {
            font-size: 0.7em;
            padding: 0.25em 0.4em;
        }

        /* Compact notifications */
        .notification-item.compact {
            padding: 0.75rem;
            margin-bottom: 0.5rem;
        }

        .notification-item.compact .notification-content h6 {
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
        }

        .notification-item.compact .notification-content p {
            margin-bottom: 0.25rem;
        }

        .notification-item.compact .notification-icon {
            width: 30px;
            height: 30px;
            line-height: 30px;
        }

        /* Compact leave balance */
        .leave-balance-item.compact {
            margin-bottom: 1rem;
        }

        .leave-balance-item.compact .progress {
            height: 6px;
        }

        /* Compact calendar */
        .calendar-widget.compact {
            font-size: 0.8rem;
        }

        .calendar-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

        .calendar-month-year {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .calendar-grid.compact {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 2px;
            margin-bottom: 0.75rem;
        }

        .calendar-day-header {
            padding: 0.4rem 0.2rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.75rem;
            color: #6c757d;
            background: #f8f9fa;
        }

        .calendar-day {
            padding: 0.4rem 0.2rem;
            text-align: center;
            border: 1px solid #e9ecef;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.75rem;
            min-height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .calendar-day:hover {
            background: #e3f2fd;
            transform: scale(1.05);
        }

        .calendar-day.today {
            background: #2196f3;
            color: white;
            font-weight: 700;
            box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);
        }

        .calendar-day.leave-day {
            background: #4caf50;
            color: white;
            font-weight: 600;
        }

        .calendar-day.leave-day.today {
            background: #388e3c;
        }

        .calendar-legend {
            display: flex;
            justify-content: space-around;
            font-size: 0.75rem;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 2px;
        }

        .legend-color.today {
            background: #2196f3;
        }

        .legend-color.leave-day {
            background: #4caf50;
        }

        /* Enhanced urgent animations */
        .stat-card.urgent {
            animation: urgentPulse 2s infinite;
            border: 2px solid #dc3545;
        }

        .notification-item.urgent {
            border-left: 4px solid #dc3545;
            background-color: #fff5f5;
        }

        .quick-action-btn.urgent {
            animation: urgentPulse 2s infinite;
        }

        @@keyframes urgentPulse {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }

        /* Enhanced table styling */
        .table-warning {
            --bs-table-bg: #fff3cd;
        }

        .table-success {
            --bs-table-bg: #d1edff;
        }

        /* Enhanced leave balance progress bars */
        .progress {
            border-radius: 6px;
            overflow: hidden;
        }

        .progress-bar {
            transition: width 0.3s ease;
        }

        /* Enhanced notification styling */
        .notification-item {
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .notification-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .notification-icon {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            flex-shrink: 0;
        }

        .notification-content {
            flex: 1;
        }

        .notification-read-btn {
            margin-top: 0.5rem;
        }

        /* Enhanced quick action buttons */
        .quick-action-btn {
            display: block;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            background: white;
            border: 1px solid #e9ecef;
            color: inherit;
            position: relative;
            overflow: hidden;
        }

        .quick-action-btn:hover {
            text-decoration: none;
            color: inherit;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .quick-action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .quick-action-btn:hover::before {
            left: 100%;
        }

        .quick-action-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            margin: 0 auto 0.5rem auto;
        }

        /* Enhanced card hover effects */
        .card {
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
        }

        /* Status indicators */
        .badge {
            font-size: 0.75em;
            padding: 0.375em 0.5em;
        }

        /* Responsive adjustments */
        @@media (max-width: 1200px) {
            .dashboard-container {
                font-size: 0.85rem;
            }
        }

        @@media (max-width: 992px) {
            .col-lg-8, .col-lg-4 {
                margin-bottom: 1rem;
            }

            .calendar-day {
                min-height: 25px;
                font-size: 0.7rem;
            }
        }

        @@media (max-width: 768px) {
            .stat-number {
                font-size: 1.3rem;
            }

            .quick-action-content h6 {
                font-size: 0.8rem;
            }

            .quick-action-content p {
                font-size: 0.7rem;
            }

            .notification-item {
                padding: 0.5rem;
                font-size: 0.85rem;
            }

            .calendar-day {
                min-height: 22px;
                font-size: 0.65rem;
                padding: 0.2rem;
            }
        }

        /* Fixed height for right column to ensure fit */
        @@media (min-width: 992px) {
            .col-lg-4 {
                max-height: calc(100vh - 200px);
                overflow-y: auto;
            }

            .col-lg-4::-webkit-scrollbar {
                width: 4px;
            }

            .col-lg-4::-webkit-scrollbar-track {
                background: #f1f1f1;
            }

            .col-lg-4::-webkit-scrollbar-thumb {
                background: #c1c1c1;
                border-radius: 2px;
            }

            .col-lg-4::-webkit-scrollbar-thumb:hover {
                background: #a8a8a8;
            }
        }
    </style>
}AsRead(button, type, id) {
            const notificationItem = button.closest('.notification-item');

            if (!readNotifications.includes(id)) {
                readNotifications.push(id);
            }

            notificationItem.style.transition = 'opacity 0.3s ease';
            notificationItem.style.opacity = '0';

            setTimeout(() => {
                notificationItem.style.display = 'none';
                checkForEmptyNotifications();
            }, 300);
        }

        function mark