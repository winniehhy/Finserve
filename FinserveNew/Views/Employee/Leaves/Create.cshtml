@model FinserveNew.Models.LeaveModel

@{
    ViewData["Title"] = "Apply for Leave";

    // Create leave types list if not provided by controller
    var leaveTypes = ViewData["LeaveTypeID"] as IEnumerable<SelectListItem> ?? new List<SelectListItem>
    {
        new SelectListItem { Value = "1", Text = "Annual Leave" },
        new SelectListItem { Value = "2", Text = "Medical Leave" },
        new SelectListItem { Value = "3", Text = "Hospitalization Leave" },
        new SelectListItem { Value = "4", Text = "Emergency Leave" }
    };
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="page-title mb-0">Apply New Leave</h2>
    <a href="/Leaves/LeaveRecords" class="btn btn-secondary">
        <i class="fas fa-arrow-left me-2"></i>
        Back to My Leaves
    </a>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Leave Application Form</h4>
            </div>
            <div class="card-body">
                <form asp-action="Create" method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <!-- Hidden fields for leave handling -->
                    <input type="hidden" name="ConfirmUnpaidLeave" id="ConfirmUnpaidLeave" value="false" />
                    <input type="hidden" name="IsUnpaidLeaveRequest" id="IsUnpaidLeaveRequest" value="false" />
                    <input type="hidden" name="AlternativeLeaveChoice" id="AlternativeLeaveChoice" value="" />
                    <input type="hidden" name="AlternativeLeaveTypeIds" id="AlternativeLeaveTypeIds" value="" />

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="LeaveTypeID" class="form-label">Leave Type <span class="text-danger">*</span></label>
                            <select asp-for="LeaveTypeID" asp-items="leaveTypes" class="form-select" id="LeaveTypeID" required>
                                <option value="">-- Select Leave Type --</option>
                            </select>
                            <span asp-validation-for="LeaveTypeID" class="text-danger"></span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Available Days</label>
                            <div id="availableDays" class="form-control bg-light text-muted">
                                Select a leave type to see available days
                            </div>
                        </div>
                    </div>

                    <!-- Half Day / Full Day Selection -->
                    <div class="mb-3" id="dayTypeSection" style="display: none;">
                        <label class="form-label">Day Type <span class="text-danger">*</span></label>
                        <div class="d-flex gap-3">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="DayType" id="fullDay" value="full" checked>
                                <label class="form-check-label" for="fullDay">
                                    Full Day
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="DayType" id="halfDay" value="half">
                                <label class="form-check-label" for="halfDay">
                                    Half Day
                                </label>
                            </div>
                        </div>
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Half day will deduct 0.5 days from your leave balance
                        </div>
                    </div>

                    <!-- Medical Certificate Upload Section -->
                    <div class="mb-3" id="medicalCertificateSection" style="display: none;">
                        <div class="alert alert-info">
                            <i class="fas fa-file-medical me-2"></i>
                            <strong>Medical Certificate Required:</strong> Please upload an official medical certificate to support your medical leave application.
                        </div>

                        <label class="form-label">Medical Certificate <span class="text-danger">*</span></label>
                        <input type="file" name="MedicalCertificate" id="MedicalCertificate"
                               class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" />
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Accepted formats: PDF, JPG, PNG, DOC, DOCX (Max size: 5MB)
                        </div>
                        <span id="medicalCertificateError" class="text-danger" style="display: none;"></span>

                        <!-- File preview area -->
                        <div id="filePreview" class="mt-2" style="display: none;">
                            <div class="border rounded p-2 bg-light">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-file-alt me-2 text-primary"></i>
                                    <span id="fileName" class="me-auto"></span>
                                    <span id="fileSize" class="text-muted small me-2"></span>
                                    <button type="button" class="btn btn-sm btn-outline-danger" id="removeFile">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label asp-for="StartDate" class="form-label">Start Date <span class="text-danger">*</span></label>
                            <input asp-for="StartDate" type="date" class="form-control" id="StartDate" required />
                            <span asp-validation-for="StartDate" class="text-danger"></span>
                            <div class="form-text" id="dateHelp">
                                <i class="fas fa-info-circle me-1"></i>
                                <span id="dateHelpText">Select dates from today onwards</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="EndDate" class="form-label">End Date <span class="text-danger">*</span></label>
                            <input asp-for="EndDate" type="date" class="form-control" id="EndDate" required />
                            <span asp-validation-for="EndDate" class="text-danger"></span>
                        </div>
                    </div>

                    <!-- Duration and Balance Warning -->
                    <div class="mb-3">
                        <div class="alert alert-info" id="durationInfo" style="display: none;">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Duration:</strong> <span id="calculatedDuration">0</span> day(s)
                        </div>

                        <!-- Balance Exceeded Warning with Alternative Options -->
                        <div class="alert alert-warning" id="balanceExceededWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <div id="balanceWarningContent"></div>
                        </div>

                        <!-- Alternative Leave Selection -->
                        <div class="card border-info" id="alternativeLeaveSection" style="display: none;">
                            <div class="card-header bg-info bg-opacity-10">
                                <h6 class="card-title mb-0 text-info">
                                    <i class="fas fa-exchange-alt me-2"></i>
                                    Alternative Leave Options
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3" id="alternativeLeaveDetails"></div>

                                <div class="mb-3">
                                    <label class="form-label">Choose how to handle the excess days:</label>

                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="radio" name="LeaveAllocationChoice" id="useAlternative" value="alternative">
                                        <label class="form-check-label" for="useAlternative">
                                            <strong>Use available balance from other leave types</strong>
                                        </label>
                                    </div>

                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="radio" name="LeaveAllocationChoice" id="goUnpaid" value="unpaid">
                                        <label class="form-check-label" for="goUnpaid">
                                            <strong>Apply as unpaid leave</strong>
                                        </label>
                                    </div>
                                </div>

                                <!-- Alternative Leave Types Selection -->
                                <div id="alternativeTypesSelection" style="display: none;">
                                    <div class="mb-3">
                                        <label class="form-label">Select which leave types to use (in order of preference):</label>
                                        <div id="availableAlternatives"></div>
                                        <div class="form-text">
                                            <i class="fas fa-info-circle me-1"></i>
                                            The system will use these leave types in the order you select them.
                                        </div>
                                    </div>

                                    <div class="alert alert-success" id="allocationPreview" style="display: none;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Standard Reason Field -->
                    <div class="mb-3" id="standardReasonSection">
                        <label asp-for="Reason" class="form-label">Reason <span class="text-danger">*</span></label>
                        <textarea asp-for="Reason" class="form-control" id="Reason" rows="4"
                                  placeholder="Please provide a detailed reason for your leave application" required></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>

                    <!-- Unpaid Leave Justification Section (Hidden by default) -->
                    <div class="mb-3" id="unpaidLeaveSection" style="display: none;">
                        <div class="card border-warning">
                            <div class="card-header bg-warning bg-opacity-10">
                                <h6 class="card-title mb-0 text-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    Unpaid Leave Request
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning mb-3">
                                    <div id="unpaidLeaveDetails"></div>
                                </div>

                                <div class="mb-3">
                                    <label for="JustificationReason" class="form-label">
                                        Justification for Unpaid Leave <span class="text-danger">*</span>
                                    </label>
                                    <textarea name="JustificationReason" id="JustificationReason"
                                              class="form-control" rows="4"
                                              placeholder="Please explain why you need to take unpaid leave beyond your allocated balance. This will be reviewed by HR for approval."></textarea>
                                    <div class="form-text">
                                        <i class="fas fa-info-circle me-1"></i>
                                        This request will be sent to HR for approval. Provide a clear justification for exceeding your leave balance.
                                    </div>
                                </div>

                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="checkbox" id="confirmUnpaidLeave" name="ConfirmUnpaidLeave" value="true">
                                    <label class="form-check-label" for="confirmUnpaidLeave">
                                        <strong>I understand and confirm that I want to request unpaid leave</strong>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <a asp-action="LeaveRecords" class="btn btn-secondary">
                            <i class="fas fa-times me-2"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <i class="fas fa-paper-plane me-2"></i>Submit Application
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-chart-bar me-2"></i>Leave Balance Summary
                </h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong>Annual Leave:</strong>
                        <span class="badge bg-primary">@(ViewBag.AnnualLeaveBalance ?? 0) / 14</span>
                    </div>
                    <div class="progress mt-1" style="height: 8px;">
                        <div class="progress-bar bg-primary" role="progressbar"
                             style="width: @(((ViewBag.AnnualLeaveBalance != null ? (double)ViewBag.AnnualLeaveBalance : 0) / 14) * 100)%"></div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong>Medical Leave:</strong>
                        <span class="badge bg-info">@(ViewBag.MedicalLeaveBalance ?? 0) / 10</span>
                    </div>
                    <div class="progress mt-1" style="height: 8px;">
                        <div class="progress-bar bg-info" role="progressbar"
                             style="width: @(((ViewBag.MedicalLeaveBalance != null ? (double)ViewBag.MedicalLeaveBalance : 0) / 10) * 100)%"></div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong>Hospitalization Leave:</strong>
                        <span class="badge bg-success">@(ViewBag.HospitalizationLeaveBalance ?? 0) / 16</span>
                    </div>
                    <div class="progress mt-1" style="height: 8px;">
                        <div class="progress-bar bg-success" role="progressbar"
                             style="width: @(((ViewBag.HospitalizationLeaveBalance != null ? (double)ViewBag.HospitalizationLeaveBalance : 0) / 16) * 100)%"></div>
                    </div>
                </div>
                <div class="mb-0">
                    <div class="alert alert-info mt-3 mb-0">
                        <i class="fas fa-info-circle me-2"></i>
                        <small><strong>Emergency Leave:</strong> Deducts from Annual Leave balance</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="fas fa-lightbulb me-2"></i>Tips
                </h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0">
                    <li class="mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Plan your leave in advance</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Medical leave requires documentation</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Emergency leave deducts from annual balance</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-check text-success me-2"></i>
                        <small>Employees with over 10 days of leave by December 1 will be notified and reminded to clear their balance.</small>
                    </li>
                    
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            console.log('Enhanced Leave Form with Alternative Leave Options initialized');

            // Build leave balances object directly from ViewBag values
            const leaveBalances = {
                '1': {
                    typeName: 'Annual Leave',
                    maxDays: 14,
                    remaining: @(ViewBag.AnnualLeaveBalance ?? 14),
                    allowBackdate: true
                },
                '2': {
                    typeName: 'Medical Leave',
                    maxDays: 10,
                    remaining: @(ViewBag.MedicalLeaveBalance ?? 10),
                    allowBackdate: true
                },
                '3': {
                    typeName: 'Hospitalization Leave',
                    maxDays: 16,
                    remaining: @(ViewBag.HospitalizationLeaveBalance ?? 16),
                    allowBackdate: true
                },
                '4': {
                    typeName: 'Emergency Leave',
                    maxDays: 14,
                    remaining: @(ViewBag.AnnualLeaveBalance ?? 14), // Emergency uses Annual Leave balance
                    allowBackdate: true
                }
            };

            console.log("Leave Balances:", leaveBalances);

            // File validation settings
            const maxFileSize = 5 * 1024 * 1024; // 5MB
            const allowedExtensions = ['.pdf', '.jpg', '.jpeg', '.png', '.doc', '.docx'];

            // State variables
            let isUnpaidLeaveMode = false;
            let isAlternativeLeaveMode = false;
            let calculatedExcessDays = 0;
            let currentLeaveTypeName = '';
            let selectedAlternativeTypes = [];
            let allocationBreakdown = {};

            // Validate leave type selection
            function isValidLeaveType(leaveTypeId) {
                const isValid = Object.keys(leaveBalances).includes(leaveTypeId);
                console.log('Validating leave type:', leaveTypeId, 'Is valid:', isValid);
                return isValid;
            }

            // File validation function
            function validateFile(file) {
                if (!file) return { isValid: false, message: 'No file selected' };

                const fileName = file.name.toLowerCase();
                const fileExtension = fileName.substring(fileName.lastIndexOf('.'));

                if (!allowedExtensions.includes(fileExtension)) {
                    return {
                        isValid: false,
                        message: 'Invalid file type. Please select PDF, JPG, PNG, DOC, or DOCX files only.'
                    };
                }

                if (file.size > maxFileSize) {
                    return {
                        isValid: false,
                        message: 'File size exceeds 5MB limit. Please select a smaller file.'
                    };
                }

                return { isValid: true, message: '' };
            }

            // Format file size
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Update date restrictions based on leave type
            function updateDateRestrictions(leaveTypeId) {
                const today = new Date().toISOString().split('T')[0];
                const startDateInput = $('#StartDate');
                const endDateInput = $('#EndDate');
                const dateHelpText = $('#dateHelpText');

                if (isValidLeaveType(leaveTypeId) && leaveBalances[leaveTypeId].allowBackdate) {
                    startDateInput.removeAttr('min');
                    endDateInput.removeAttr('min');
                    dateHelpText.html('<i class="fas fa-calendar-alt me-1"></i>You can select past dates for this leave type');
                } else {
                    startDateInput.attr('min', today);
                    endDateInput.attr('min', today);
                    dateHelpText.html('<i class="fas fa-calendar-plus me-1"></i>Select dates from today onwards');
                }

                const startDate = startDateInput.val();
                if (startDate) {
                    endDateInput.attr('min', startDate);
                }
            }

            // Get alternative leave types with available balance
            function getAlternativeLeaveTypes(excludeLeaveTypeId) {
                const alternatives = [];

                for (const [typeId, typeInfo] of Object.entries(leaveBalances)) {
                    if (typeId !== excludeLeaveTypeId && typeId !== '4' && typeInfo.remaining > 0) { // Exclude Emergency Leave (4) as alternative
                        alternatives.push({
                            id: typeId,
                            name: typeInfo.typeName,
                            remaining: typeInfo.remaining
                        });
                    }
                }

                return alternatives;
            }

            // Calculate allocation breakdown
            function calculateAllocationBreakdown(requestedDays, originalLeaveTypeId, alternativeTypeIds) {
                const breakdown = [];
                let remainingDays = requestedDays;

                // Original leave type
                const originalBalance = leaveBalances[originalLeaveTypeId].remaining;
                if (originalBalance > 0) {
                    const useFromOriginal = Math.min(originalBalance, remainingDays);
                    breakdown.push({
                        typeId: originalLeaveTypeId,
                        typeName: leaveBalances[originalLeaveTypeId].typeName,
                        days: useFromOriginal
                    });
                    remainingDays -= useFromOriginal;
                }

                // Alternative leave types
                for (const altTypeId of alternativeTypeIds) {
                    if (remainingDays <= 0) break;

                    const altBalance = leaveBalances[altTypeId].remaining;
                    if (altBalance > 0) {
                        const useFromAlt = Math.min(altBalance, remainingDays);
                        breakdown.push({
                            typeId: altTypeId,
                            typeName: leaveBalances[altTypeId].typeName,
                            days: useFromAlt
                        });
                        remainingDays -= useFromAlt;
                    }
                }

                return {
                    breakdown: breakdown,
                    unpaidDays: Math.max(0, remainingDays)
                };
            }

            // Update allocation preview
            function updateAllocationPreview() {
                const requestedDays = parseFloat($('#calculatedDuration').text()) || 0;
                const leaveTypeId = $('#LeaveTypeID').val();

                if (!selectedAlternativeTypes.length || !requestedDays || !leaveTypeId) {
                    $('#allocationPreview').hide();
                    return;
                }

                const allocation = calculateAllocationBreakdown(requestedDays, leaveTypeId, selectedAlternativeTypes);

                let previewHtml = '<strong>📊 Allocation Breakdown:</strong><ul class="mb-0 mt-2">';

                allocation.breakdown.forEach(item => {
                    previewHtml += `<li>${item.typeName}: ${item.days} day(s)</li>`;
                });

                if (allocation.unpaidDays > 0) {
                    previewHtml += `<li class="text-warning"><strong>Unpaid Leave: ${allocation.unpaidDays} day(s)</strong></li>`;
                }

                previewHtml += '</ul>';

                $('#allocationPreview').html(previewHtml).show();
                allocationBreakdown = allocation;
            }

            // Show Alternative Leave Options
            function showAlternativeLeaveOptions(requestedDays, availableDays, excessDays, leaveTypeId, leaveTypeName) {
                const alternativeSection = $('#alternativeLeaveSection');
                const alternativeDetails = $('#alternativeLeaveDetails');
                const availableAlternatives = $('#availableAlternatives');

                // Get alternative leave types
                const alternatives = getAlternativeLeaveTypes(leaveTypeId);

                if (alternatives.length === 0) {
                    // No alternatives available, show unpaid leave section directly
                    showUnpaidLeaveSection(true, requestedDays, availableDays, excessDays, leaveTypeName);
                    return;
                }

                isAlternativeLeaveMode = true;

                // Update details
                alternativeDetails.html(`
                    <strong>⚠️ Insufficient ${leaveTypeName} Balance</strong><br>
                    <div class="mt-2">
                        <div class="row">
                            <div class="col-6"><strong>Requested:</strong></div>
                            <div class="col-6">${requestedDays} days</div>
                        </div>
                        <div class="row">
                            <div class="col-6"><strong>Available in ${leaveTypeName}:</strong></div>
                            <div class="col-6">${availableDays} days</div>
                        </div>
                        <div class="row">
                            <div class="col-6"><strong>Shortfall:</strong></div>
                            <div class="col-6 text-danger"><strong>${excessDays} days</strong></div>
                        </div>
                    </div>
                `);

                // Build alternative types checkboxes
                let alternativesHtml = '';
                alternatives.forEach(alt => {
                    alternativesHtml += `
                        <div class="form-check mb-2">
                            <input class="form-check-input alternative-leave-type" type="checkbox"
                                   value="${alt.id}" id="alt_${alt.id}">
                            <label class="form-check-label" for="alt_${alt.id}">
                                <strong>${alt.name}</strong> - ${alt.remaining} days available
                            </label>
                        </div>
                    `;
                });

                availableAlternatives.html(alternativesHtml);
                alternativeSection.show();

                calculatedExcessDays = excessDays;
                currentLeaveTypeName = leaveTypeName;
            }

            // Hide Alternative Leave Options
            function hideAlternativeLeaveOptions() {
                isAlternativeLeaveMode = false;
                selectedAlternativeTypes = [];
                allocationBreakdown = {};

                $('#alternativeLeaveSection').hide();
                $('#allocationPreview').hide();
                $('#AlternativeLeaveChoice').val('');
                $('#AlternativeLeaveTypeIds').val('');

                // Clear radio buttons
                $('input[name="LeaveAllocationChoice"]').prop('checked', false);
            }

            // Show/Hide Unpaid Leave Section
            function showUnpaidLeaveSection(show, requestedDays = 0, availableDays = 0, excessDays = 0, leaveTypeName = '') {
                const unpaidSection = $('#unpaidLeaveSection');
                const standardReasonSection = $('#standardReasonSection');
                const unpaidLeaveDetails = $('#unpaidLeaveDetails');
                const submitBtn = $('#submitBtn');

                if (show) {
                    isUnpaidLeaveMode = true;

                    // Hide standard reason field and show unpaid leave section
                    standardReasonSection.hide();
                    unpaidSection.show();

                    // Update details
                    unpaidLeaveDetails.html(`
                        <strong>⚠️ Insufficient Leave Balance</strong><br>
                        <div class="mt-2">
                            <div class="row">
                                <div class="col-6"><strong>Leave Type:</strong></div>
                                <div class="col-6">${leaveTypeName}</div>
                            </div>
                            <div class="row">
                                <div class="col-6"><strong>Requested Days:</strong></div>
                                <div class="col-6">${requestedDays} days</div>
                            </div>
                            <div class="row">
                                <div class="col-6"><strong>Available Balance:</strong></div>
                                <div class="col-6">${availableDays} days</div>
                            </div>
                            <div class="row">
                                <div class="col-6"><strong>Unpaid Days:</strong></div>
                                <div class="col-6 text-danger"><strong>${excessDays} days</strong></div>
                            </div>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                This request will require HR approval and the excess days will be unpaid.
                            </small>
                        </div>
                    `);

                    // Update submit button
                    submitBtn.html('<i class="fas fa-exclamation-triangle me-2"></i>Submit Unpaid Leave Request');
                    submitBtn.removeClass('btn-primary').addClass('btn-warning');

                    // Set hidden field
                    $('#IsUnpaidLeaveRequest').val('true');

                    // Make justification required
                    $('#JustificationReason').prop('required', true);
                } else {
                    isUnpaidLeaveMode = false;

                    // Show standard reason field and hide unpaid leave section
                    standardReasonSection.show();
                    unpaidSection.hide();

                    // Reset submit button
                    submitBtn.html('<i class="fas fa-paper-plane me-2"></i>Submit Application');
                    submitBtn.removeClass('btn-warning').addClass('btn-primary');

                    // Clear hidden field and remove requirements
                    $('#IsUnpaidLeaveRequest').val('false');
                    $('#JustificationReason').prop('required', false);
                    $('#JustificationReason').val('');
                    $('#confirmUnpaidLeave').prop('checked', false);
                }
            }

            // Enhanced Calculate Duration with Alternative Leave Check
            function calculateDuration() {
                const startDate = $('#StartDate').val();
                const endDate = $('#EndDate').val();
                const leaveTypeId = $('#LeaveTypeID').val();
                const dayType = $('input[name="DayType"]:checked').val();

                console.log('Calculating duration:', { startDate, endDate, leaveTypeId, dayType });

                if (startDate && endDate && leaveTypeId) {
                    const start = new Date(startDate);
                    const end = new Date(endDate);

                    if (end >= start) {
                        const timeDiff = end.getTime() - start.getTime();
                        let daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                        // Apply half day calculation
                        if (dayType === 'half') {
                            if (daysDiff === 1) {
                                daysDiff = 0.5;
                            } else {
                                daysDiff = daysDiff - 0.5;
                            }
                        }

                        console.log('Calculated days:', daysDiff);

                        $('#calculatedDuration').text(daysDiff);
                        $('#durationInfo').show();

                        // Check if duration exceeds available balance
                        if (isValidLeaveType(leaveTypeId)) {
                            const availableBalance = leaveBalances[leaveTypeId].remaining;
                            const leaveTypeName = leaveBalances[leaveTypeId].typeName;

                            if (daysDiff > availableBalance) {
                                const excessDays = (daysDiff - availableBalance).toFixed(1);
                                showAlternativeLeaveOptions(daysDiff, availableBalance, excessDays, leaveTypeId, leaveTypeName);
                            } else {
                                hideAlternativeLeaveOptions();
                                showUnpaidLeaveSection(false);
                            }
                        }
                    } else {
                        $('#durationInfo').hide();
                        hideAlternativeLeaveOptions();
                        showUnpaidLeaveSection(false);
                    }
                } else {
                    $('#durationInfo').hide();
                    hideAlternativeLeaveOptions();
                    showUnpaidLeaveSection(false);
                }
            }

            // Handle alternative leave allocation choice
            $(document).on('change', 'input[name="LeaveAllocationChoice"]', function() {
                const choice = $(this).val();
                const alternativeTypesSelection = $('#alternativeTypesSelection');

                if (choice === 'alternative') {
                    alternativeTypesSelection.show();
                    showUnpaidLeaveSection(false);
                    $('#AlternativeLeaveChoice').val('alternative');
                } else if (choice === 'unpaid') {
                    alternativeTypesSelection.hide();
                    $('#allocationPreview').hide();
                    hideAlternativeLeaveOptions();

                    const requestedDays = parseFloat($('#calculatedDuration').text()) || 0;
                    const leaveTypeId = $('#LeaveTypeID').val();
                    const availableBalance = leaveBalances[leaveTypeId].remaining;
                    const excessDays = (requestedDays - availableBalance).toFixed(1);
                    const leaveTypeName = leaveBalances[leaveTypeId].typeName;

                    showUnpaidLeaveSection(true, requestedDays, availableBalance, excessDays, leaveTypeName);
                    $('#AlternativeLeaveChoice').val('unpaid');
                }
            });

            // Handle alternative leave type selection
            $(document).on('change', '.alternative-leave-type', function() {
                selectedAlternativeTypes = [];

                $('.alternative-leave-type:checked').each(function() {
                    selectedAlternativeTypes.push($(this).val());
                });

                $('#AlternativeLeaveTypeIds').val(selectedAlternativeTypes.join(','));
                updateAllocationPreview();

                // Check if any unpaid days remain
                if (allocationBreakdown.unpaidDays > 0) {
                    $('#JustificationReason').prop('required', true);
                } else {
                    $('#JustificationReason').prop('required', false);
                }
            });

            // Handle medical certificate file selection
            $('#MedicalCertificate').on('change', function() {
                const file = this.files[0];
                const errorSpan = $('#medicalCertificateError');
                const filePreview = $('#filePreview');

                if (file) {
                    const validation = validateFile(file);

                    if (!validation.isValid) {
                        errorSpan.text(validation.message).show();
                        filePreview.hide();
                        this.value = '';
                        return;
                    }

                    errorSpan.hide();
                    $('#fileName').text(file.name);
                    $('#fileSize').text(formatFileSize(file.size));
                    filePreview.show();
                } else {
                    errorSpan.hide();
                    filePreview.hide();
                }
            });

            // Handle remove file button
            $(document).on('click', '#removeFile', function() {
                $('#MedicalCertificate').val('');
                $('#filePreview').hide();
                $('#medicalCertificateError').hide();
            });

            // Handle day type selection
            $('input[name="DayType"]').on('change', function() {
                console.log('Day type changed to:', $(this).val());
                calculateDuration();
            });

            // Handle leave type selection
            $('#LeaveTypeID').on('change', function() {
                const leaveTypeId = $(this).val();
                const availableDaysDiv = $('#availableDays');
                const medicalCertificateSection = $('#medicalCertificateSection');
                const dayTypeSection = $('#dayTypeSection');

                console.log('Leave type selected:', leaveTypeId);

                if (leaveTypeId) {
                    dayTypeSection.show();
                } else {
                    dayTypeSection.hide();
                }

                // Reset all sections when leave type changes
                hideAlternativeLeaveOptions();
                showUnpaidLeaveSection(false);

                // Show/hide medical certificate section
                const isMedicalLeave = leaveTypeId && leaveBalances[leaveTypeId] &&
                                      leaveBalances[leaveTypeId].typeName.toLowerCase().includes('medical');

                if (isMedicalLeave) {
                    medicalCertificateSection.show();
                    $('#MedicalCertificate').prop('required', true);
                } else {
                    medicalCertificateSection.hide();
                    $('#MedicalCertificate').prop('required', false);
                    $('#MedicalCertificate').val('');
                    $('#filePreview').hide();
                    $('#medicalCertificateError').hide();
                }

                updateDateRestrictions(leaveTypeId);

                if (!leaveTypeId) {
                    availableDaysDiv.text('Select a leave type to see available days');
                    availableDaysDiv.removeClass('text-danger text-success text-warning').addClass('text-muted');
                    return;
                }

                if (!isValidLeaveType(leaveTypeId)) {
                    availableDaysDiv.text('Invalid leave type selected');
                    availableDaysDiv.removeClass('text-muted text-success text-warning').addClass('text-danger');
                    return;
                }

                const balance = leaveBalances[leaveTypeId];
                const remainingDays = balance.remaining;
                const maxDays = balance.maxDays;

                // Special display for Emergency Leave
                if (balance.typeName.toLowerCase().includes('emergency')) {
                    availableDaysDiv.html(`<strong>${remainingDays}</strong> of ${maxDays} days remaining<br><small class="text-info">(Uses Annual Leave Balance)</small>`);
                } else {
                    availableDaysDiv.html(`<strong>${remainingDays}</strong> of ${maxDays} days remaining`);
                }

                // Color coding based on remaining balance
                availableDaysDiv.removeClass('text-muted text-danger text-success text-warning');
                if (remainingDays === 0) {
                    availableDaysDiv.addClass('text-danger');
                } else if (remainingDays < 3) {
                    availableDaysDiv.addClass('text-warning');
                } else {
                    availableDaysDiv.addClass('text-success');
                }

                calculateDuration();
            });

            // Handle date changes
            $('#StartDate, #EndDate').on('change', function() {
                calculateDuration();
            });

            // Set minimum date to today initially
            const today = new Date().toISOString().split('T')[0];
            $('#StartDate').attr('min', today);

            // Update end date minimum when start date changes
            $('#StartDate').on('change', function() {
                const startDate = $(this).val();

                if (startDate) {
                    $('#EndDate').attr('min', startDate);
                    if ($('#EndDate').val() && $('#EndDate').val() < startDate) {
                        $('#EndDate').val(startDate);
                    }
                }
                calculateDuration();
            });

            // Enhanced Form Validation
            $('form').on('submit', function(e) {
                console.log('Form submission started');

                const leaveTypeId = $('#LeaveTypeID').val();
                const startDate = $('#StartDate').val();
                const endDate = $('#EndDate').val();
                const submitBtn = $('#submitBtn');

                // Prevent double submission
                if (submitBtn.prop('disabled')) {
                    e.preventDefault();
                    return false;
                }

                // Basic validation
                if (!leaveTypeId || !startDate || !endDate) {
                    alert('Please fill in all required fields.');
                    e.preventDefault();
                    return false;
                }

                if (!isValidLeaveType(leaveTypeId)) {
                    alert('Please select a valid leave type from the dropdown.');
                    e.preventDefault();
                    return false;
                }

                // Check reason field based on mode
                let reasonText = '';
                if (isUnpaidLeaveMode) {
                    reasonText = $('#JustificationReason').val().trim();
                    if (!reasonText) {
                        alert('Please provide justification for unpaid leave.');
                        $('#JustificationReason').focus();
                        e.preventDefault();
                        return false;
                    }

                    if (!$('#confirmUnpaidLeave').is(':checked')) {
                        alert('Please confirm that you understand this will be an unpaid leave request.');
                        $('#confirmUnpaidLeave').focus();
                        e.preventDefault();
                        return false;
                    }
                } else {
                    reasonText = $('#Reason').val().trim();
                    if (!reasonText) {
                        alert('Please provide a reason for your leave application.');
                        $('#Reason').focus();
                        e.preventDefault();
                        return false;
                    }
                }

                // Alternative leave validation
                if (isAlternativeLeaveMode) {
                    const choice = $('input[name="LeaveAllocationChoice"]:checked').val();

                    if (!choice) {
                        alert('Please select how you want to handle the excess leave days.');
                        e.preventDefault();
                        return false;
                    }

                    if (choice === 'alternative') {
                        if (selectedAlternativeTypes.length === 0) {
                            alert('Please select at least one alternative leave type to use.');
                            e.preventDefault();
                            return false;
                        }

                        // Check if justification is needed for remaining unpaid days
                        if (allocationBreakdown.unpaidDays > 0) {
                            const justificationText = $('#JustificationReason').val().trim();
                            if (!justificationText) {
                                alert('Please provide justification for the remaining unpaid days.');
                                $('#JustificationReason').focus();
                                e.preventDefault();
                                return false;
                            }
                        }
                    }
                }

                // Medical leave validation
                const isMedicalLeave = leaveBalances[leaveTypeId].typeName.toLowerCase().includes('medical');
                if (isMedicalLeave) {
                    const medicalCertFile = $('#MedicalCertificate')[0].files[0];
                    if (!medicalCertFile) {
                        alert('Please upload a medical certificate for medical leave applications.');
                        e.preventDefault();
                        return false;
                    }
                }

                // Date validation
                const start = new Date(startDate);
                const end = new Date(endDate);

                if (end < start) {
                    alert('End date must be after or equal to start date.');
                    e.preventDefault();
                    return false;
                }

                console.log('Form validation passed, proceeding with submission...');

                // Show loading state
                submitBtn
                    .prop('disabled', true)
                    .html('<i class="fas fa-spinner fa-spin me-2"></i>Submitting...');

                return true;
            });

            // Auto-resize textareas
            $('#Reason, #JustificationReason').on('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });

            // Initialize form
            if ($('#LeaveTypeID').val()) {
                $('#LeaveTypeID').trigger('change');
            }
        });
    </script>
}