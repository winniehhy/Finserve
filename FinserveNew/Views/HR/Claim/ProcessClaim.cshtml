@model FinserveNew.Models.Claim

@{
    ViewData["Title"] = "Process Claim";
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h2>Process Claim @Model.DisplayClaimId</h2>
            <p class="text-muted">Review and process employee claim request</p>
        </div>
        <div class="col-md-4 text-end">
            <div class="btn-group" role="group">
                <a asp-action="HRIndex" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Claims
                </a>
                <a asp-action="PendingClaims" class="btn btn-outline-secondary">
                    <i class="fas fa-clock me-2"></i>Pending Claims
                </a>
            </div>
        </div>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <!-- Claim Information -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-info-circle me-2"></i>Claim Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Claim ID:</strong></div>
                        <div class="col-sm-8">@Model.DisplayClaimId</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Employee ID:</strong></div>
                        <div class="col-sm-8">
                            <span class="badge bg-secondary">@Model.EmployeeID</span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Employee Name:</strong></div>
                        <div class="col-sm-8">
                            @if (ViewBag.EmployeeName != null)
                            {
                                <strong>@ViewBag.EmployeeName</strong>
                            }
                            else
                            {
                                <span class="text-muted">Employee name not available</span>
                            }
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Claim Type:</strong></div>
                        <div class="col-sm-8">
                            <span class="badge bg-info">@Model.ClaimType</span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Amount:</strong></div>
                        <div class="col-sm-8">
                            <strong class="text-primary fs-5">@Model.DisplayAmount</strong>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Status:</strong></div>
                        <div class="col-sm-8">
                            @if (string.IsNullOrEmpty(Model.Status))
                            {
                                <span class="badge bg-secondary fs-6">No Status</span>
                            }
                            else if (Model.Status.Equals("Pending", StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="badge bg-warning fs-6">@Model.Status</span>
                            }
                            else if (Model.Status.Equals("Approved", StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="badge bg-success fs-6">@Model.Status</span>
                            }
                            else if (Model.Status.Equals("Rejected", StringComparison.OrdinalIgnoreCase))
                            {
                                <span class="badge bg-danger fs-6">@Model.Status</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary fs-6">@Model.Status</span>
                            }
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Description:</strong></div>
                        <div class="col-sm-8">
                            <div class="bg-light p-2 rounded">
                                @(string.IsNullOrWhiteSpace(Model.Description) ? "No description provided" : Model.Description)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Timeline & Processing Info -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>Timeline & Processing
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Created:</strong></div>
                        <div class="col-sm-8">@Model.CreatedDate.ToString("dd MMM yyyy HH:mm")</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Submitted:</strong></div>
                        <div class="col-sm-8">@(Model.SubmissionDate?.ToString("dd MMM yyyy HH:mm") ?? "N/A")</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-sm-4"><strong>Days Pending:</strong></div>
                        <div class="col-sm-8">
                            @{
                                var daysPending = (DateTime.Now - Model.CreatedDate).Days;
                            }
                            @if (daysPending > 7)
                            {
                                <span class="badge bg-danger">@daysPending days</span>
                            }
                            else if (daysPending > 3)
                            {
                                <span class="badge bg-warning">@daysPending days</span>
                            }
                            else
                            {
                                <span class="badge bg-success">@daysPending days</span>
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.ApprovalRemarks))
                    {
                        <div class="row mb-3">
                            <div class="col-sm-4"><strong>Previous Remarks:</strong></div>
                            <div class="col-sm-8">
                                <div class="bg-light p-2 rounded">
                                    <small>@Model.ApprovalRemarks</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Supporting Documents - Updated to show multiple files -->
    @{
        var claimDetails = ViewBag.Documents as List<FinserveNew.Models.ClaimDetails> ?? new List<FinserveNew.Models.ClaimDetails>();
        bool hasMultipleFiles = claimDetails.Count > 0;
        bool hasLegacyFile = !string.IsNullOrEmpty(Model.SupportingDocumentPath) && !hasMultipleFiles;
    }

    @if (hasMultipleFiles || hasLegacyFile)
    {
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-paperclip me-2"></i>Supporting Documents
                    @if (hasMultipleFiles)
                    {
                        <span class="badge bg-primary ms-2">@claimDetails.Count files</span>
                    }
                </h5>
                @if (hasMultipleFiles)
                {
                    <button class="btn btn-outline-primary btn-sm" onclick="downloadAllFiles()">
                        <i class="fas fa-download me-1"></i>Download All
                    </button>
                }
            </div>
            <div class="card-body">
                @if (hasMultipleFiles)
                {
                    <!-- Multiple files from ClaimDetails -->
                    <div class="row">
                        @foreach (var doc in claimDetails)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-body p-3">
                                        <div class="d-flex align-items-start">
                                            <div class="me-3">
                                                @{
                                                    var fileExtension = System.IO.Path.GetExtension(doc.OriginalFileName ?? "").ToLower();
                                                }
                                                @if (fileExtension == ".pdf")
                                                {
                                                    <i class="fas fa-file-pdf fa-2x text-danger"></i>
                                                }
                                                else if (new[] { ".jpg", ".jpeg", ".png", ".gif" }.Contains(fileExtension))
                                                {
                                                    <i class="fas fa-file-image fa-2x text-success"></i>
                                                }
                                                else if (new[] { ".doc", ".docx" }.Contains(fileExtension))
                                                {
                                                    <i class="fas fa-file-word fa-2x text-primary"></i>
                                                }
                                                else if (new[] { ".xls", ".xlsx" }.Contains(fileExtension))
                                                {
                                                    <i class="fas fa-file-excel fa-2x text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-file-alt fa-2x text-muted"></i>
                                                }
                                            </div>
                                            <div class="flex-grow-1">
                                                <h6 class="card-title mb-1" title="@doc.OriginalFileName">
                                                    @(doc.OriginalFileName?.Length > 25 ? doc.OriginalFileName.Substring(0, 25) + "..." : doc.OriginalFileName)
                                                </h6>
                                                <p class="card-text small text-muted mb-1">
                                                    <i class="fas fa-calendar me-1"></i>@doc.UploadDate.ToString("dd MMM yyyy HH:mm")
                                                </p>
                                                <p class="card-text small text-muted mb-2">
                                                    <i class="fas fa-hdd me-1"></i>@(doc.FileSize != null ? FormatFileSize(doc.FileSize.Value) : "Unknown size")
                                                </p>
                                                @if (!string.IsNullOrEmpty(doc.Comment) && doc.Comment != $"Supporting document: {doc.OriginalFileName}")
                                                {
                                                    <p class="card-text small text-info mb-2">
                                                        <i class="fas fa-comment me-1"></i>@doc.Comment
                                                    </p>
                                                }
                                            </div>
                                        </div>
                                        <div class="d-flex gap-2 mt-2">
                                            <a href="@Url.Content(doc.DocumentPath)"
                                               target="_blank"
                                               class="btn btn-outline-primary btn-sm flex-fill">
                                                <i class="fas fa-eye me-1"></i>View
                                            </a>
                                            <a href="@Url.Content(doc.DocumentPath)"
                                               download="@doc.OriginalFileName"
                                               class="btn btn-outline-secondary btn-sm flex-fill">
                                                <i class="fas fa-download me-1"></i>Download
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (hasLegacyFile)
                {
                    <!-- Legacy single file -->
                    <div class="d-flex align-items-center">
                        <i class="fas fa-file-alt fa-3x text-muted me-3"></i>
                        <div class="flex-grow-1">
                            <h6 class="mb-1">@(Model.SupportingDocumentName ?? System.IO.Path.GetFileName(Model.SupportingDocumentPath))</h6>
                            <p class="text-muted mb-0">Click to view or download</p>
                        </div>
                        <div class="d-flex gap-2">
                            <a href="@Url.Content(Model.SupportingDocumentPath)"
                               class="btn btn-outline-primary btn-sm"
                               target="_blank">
                                <i class="fas fa-eye me-1"></i>View
                            </a>
                            <a href="@Url.Content(Model.SupportingDocumentPath)"
                               class="btn btn-outline-secondary btn-sm"
                               download="@Model.SupportingDocumentName">
                                <i class="fas fa-download me-1"></i>Download
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- No documents -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-paperclip me-2"></i>Supporting Documents
                </h5>
            </div>
            <div class="card-body">
                <div class="text-center py-3">
                    <i class="fas fa-file-slash fa-3x text-muted mb-2"></i>
                    <p class="text-muted mb-0">No supporting documents uploaded</p>
                    <small class="text-muted">This claim was submitted without supporting documents</small>
                </div>
            </div>
        </div>
    }

    <!-- Processing Form -->
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">
                <i class="fas fa-clipboard-check me-2"></i>Process This Claim
            </h5>
        </div>
        <div class="card-body">
            <form asp-action="ProcessClaim" method="post">
                <input type="hidden" asp-for="Id" />

                <div class="mb-3">
                    <label for="remarks" class="form-label">HR Comments (Optional):</label>
                    <textarea name="remarks" id="remarks" class="form-control" rows="4"
                              placeholder="Add any comments for approval/rejection. These will be visible to the employee."></textarea>
                    <div class="form-text">
                        <i class="fas fa-info-circle me-1"></i>
                        Comments help employees understand the decision and improve future submissions.
                    </div>
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="confirmedReview">
                        <label class="form-check-label" for="confirmedReview">
                            I have reviewed all claim details and supporting documents
                        </label>
                    </div>
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" name="action" value="approve"
                            class="btn btn-success btn-lg me-md-2"
                            id="approveBtn"
                            onclick="return confirmAction('approve', '@Model.ClaimAmount.ToString("F2")')">
                        <i class="fas fa-check me-2"></i>Approve Claim
                    </button>
                    <button type="submit" name="action" value="reject"
                            class="btn btn-danger btn-lg"
                            id="rejectBtn"
                            onclick="return confirmAction('reject', '@Model.ClaimAmount.ToString("F2")')">
                        <i class="fas fa-times me-2"></i>Reject Claim
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced confirmation with review check
        function confirmAction(action, amount) {
            const reviewCheck = document.getElementById('confirmedReview');

            if (!reviewCheck.checked) {
                alert('Please confirm that you have reviewed all claim details before processing.');
                return false;
            }

            const actionText = action === 'approve' ? 'approve' : 'reject';
            const currencySymbol = '@(Model.Currency == "USD" ? "$" : "RM")';
            const message = `Are you sure you want to ${actionText} this claim for ${currencySymbol} ${amount}?`;

            return confirm(message);
        }

        // Download all files functionality
        function downloadAllFiles() {
            @if (hasMultipleFiles)
            {
                foreach (var doc in claimDetails)
                {
                    <text>
                    setTimeout(() => {
                        const link = document.createElement('a');
                        link.href = '@Url.Content(doc.DocumentPath)';
                        link.download = '@doc.OriginalFileName';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }, @((claimDetails.IndexOf(doc)) * 100));
                    </text>
                }
            }
        }

        // Enable/disable buttons based on review checkbox
        document.addEventListener('DOMContentLoaded', function () {
            const reviewCheck = document.getElementById('confirmedReview');
            const approveBtn = document.getElementById('approveBtn');
            const rejectBtn = document.getElementById('rejectBtn');

            function updateButtonStates() {
                const isChecked = reviewCheck.checked;
                approveBtn.disabled = !isChecked;
                rejectBtn.disabled = !isChecked;

                if (!isChecked) {
                    approveBtn.classList.add('disabled');
                    rejectBtn.classList.add('disabled');
                } else {
                    approveBtn.classList.remove('disabled');
                    rejectBtn.classList.remove('disabled');
                }
            }

            reviewCheck.addEventListener('change', updateButtonStates);
            updateButtonStates(); // Initial state
        });
    </script>
}

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "0 Bytes";
        string[] sizes = { "Bytes", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        return $"{size:0.##} {sizes[order]}";
    }
}