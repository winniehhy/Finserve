@model FinserveNew.Models.ViewModels.PayrollProcessViewModel
@{
    ViewData["Title"] = "Payroll Processing";
    var currentStatus = ViewBag.CurrentPayrollStatus as string;
    var payrollId = ViewBag.PayrollID as string;
    var employeeStatuses = ViewBag.EmployeePayrollStatuses as Dictionary<string, string> ?? new Dictionary<string, string>();
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <style>
        .select2-container--bootstrap-5 .select2-selection {
            height: calc(1.5em + 0.75rem + 2px);
            padding: 0.375rem 0.75rem;
            font-size: 1rem;
            border: 1px solid #ced4da;
        }

        .employee-option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }

        .employee-info {
            flex-grow: 1;
        }

        .employee-status {
            margin-left: 10px;
        }


    </style>
}

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h2>Payroll Processing</h2>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Summary" asp-route-month="@Model.Month" asp-route-year="@Model.Year" class="btn btn-primary me-2">
                <i class="fas fa-table me-2"></i>View Summary
            </a>
            <a asp-action="HistoryByMonth" class="btn btn-outline-primary">
                <i class="fas fa-history me-2"></i>Payroll History
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(currentStatus))
    {
        <div class="alert alert-info mt-2">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Current Status:</strong>
            @switch (currentStatus)
            {
                case "Pending":
                    <span class="badge bg-secondary">@currentStatus</span>
                    <span class="ms-2">This payroll can be edited and sent for approval.</span>
                    break;
                case "Rejected":
                    <span class="badge bg-danger">@currentStatus</span>
                    <span class="ms-2">This payroll was rejected and can be modified. After modification, it will be reset to Pending status.</span>
                    break;
                default:
                    <span class="badge bg-secondary">@currentStatus</span>
                    break;
            }
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-header bg-light">
            <h4 class="card-title mb-0">Salary Details</h4>
        </div>
        <div class="card-body">
            <form method="post" asp-action="Process" id="payrollForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label asp-for="Month" class="form-label">Month</label>
                        <select asp-for="Month" class="form-select" required>
                            @for (int m = 1; m <= 12; m++)
                            {
                                <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                            }
                        </select>
                        <span asp-validation-for="Month" class="text-danger"></span>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="Year" class="form-label">Year</label>
                        <select asp-for="Year" class="form-select" required>
                            @for (int y = DateTime.Now.Year - 3; y <= DateTime.Now.Year + 3; y++)
                            {
                                <option value="@y">@y</option>
                            }
                        </select>
                        <span asp-validation-for="Year" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-4">
                    <label asp-for="EmployeeID" class="form-label">Select Employee</label>
                    <select asp-for="EmployeeID" class="form-select" required id="employeeSelect">
                        <option value="">-- Select Employee --</option>
                        @foreach (var emp in Model.Employees)
                        {
                            var hasPayroll = employeeStatuses.ContainsKey(emp.EmployeeID);
                            var status = hasPayroll ? employeeStatuses[emp.EmployeeID] : null;
                            
                            <option value="@emp.EmployeeID" 
                                    data-has-payroll="@hasPayroll.ToString().ToLower()" 
                                    data-status="@status">
                                @emp.EmployeeID - @emp.FirstName @emp.LastName
                            </option>
                        }
                    </select>
                    <span asp-validation-for="EmployeeID" class="text-danger"></span>
                    <div class="form-text">
                        <i class="fas fa-info-circle me-1"></i>
                        Employees with existing payroll records will show their status.
                    </div>
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <input asp-for="SameAsPreviousMonth" class="form-check-input" id="sameAsPrevious" />
                        <label asp-for="SameAsPreviousMonth" class="form-check-label">Copy previous month data</label>
                    </div>
                </div>

                @* not required in current phase *@ 
                @* <div class="mb-3"> *@
                @*     <label asp-for="ProjectName" class="form-label">Project Name</label> *@
                @*     <input asp-for="ProjectName" class="form-control" required /> *@
                @*     <span asp-validation-for="ProjectName" class="text-danger"></span> *@
                @* </div> *@

                <div class="mb-3">
                    <label asp-for="BasicSalary" class="form-label">Basic Salary</label>
                    <div class="input-group">
                        <span class="input-group-text">RM</span>
                        <input asp-for="BasicSalary" class="form-control calculation-input" required />
                    </div>
                    <span asp-validation-for="BasicSalary" class="text-danger"></span>
                </div>

                <h5 class="mt-4 text-primary">Employer Contributions</h5>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="EmployerEpf" class="form-label">Employer EPF (13%)</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployerEpf" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployerEpf" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="EmployerSocso" class="form-label">Employer SOCSO</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployerSocso" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployerSocso" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="EmployerEis" class="form-label">Employer EIS</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployerEis" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployerEis" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="EmployerTax" class="form-label">Employer Tax</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployerTax" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployerTax" class="text-danger"></span>
                    </div>
                </div>
                <div class="mb-3">
                    <label asp-for="EmployerOtherContributions" class="form-label">Other Contributions</label>
                    <div class="input-group">
                        <span class="input-group-text">RM</span>
                        <input asp-for="EmployerOtherContributions" class="form-control calculation-input" />
                    </div>
                    <span asp-validation-for="EmployerOtherContributions" class="text-danger"></span>
                </div>

                <h5 class="mt-4 text-primary">Employee Deductions</h5>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="EmployeeEpf" class="form-label">Employee EPF (11%)</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployeeEpf" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployeeEpf" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="EmployeeSocso" class="form-label">Employee SOCSO</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployeeSocso" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployeeSocso" class="text-danger"></span>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label asp-for="EmployeeEis" class="form-label">Employee EIS</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployeeEis" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployeeEis" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="EmployeeTax" class="form-label">Employee Tax</label>
                        <div class="input-group">
                            <span class="input-group-text">RM</span>
                            <input asp-for="EmployeeTax" class="form-control calculation-input" />
                        </div>
                        <span asp-validation-for="EmployeeTax" class="text-danger"></span>
                    </div>
                </div>

                <h5 class="mt-4 text-primary">Salary Breakdown</h5>
                <div class="table-responsive mb-3">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Total Wages</th>
                                <th>Total Employer Cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong id="totalWages">RM 0.00</strong></td>
                                <td><strong id="totalEmployerCost">RM 0.00</strong></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-between">
                    <a asp-action="Summary" asp-route-month="@Model.Month" asp-route-year="@Model.Year" class="btn btn-secondary">
                        Cancel
                    </a>
                    <button type="submit" class="btn btn-primary">Save Payroll Entry</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        $(function () {
            // Initialize Select2 for employee select with custom formatting
            $('#employeeSelect').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '-- Select Employee --',
                allowClear: true,
                templateResult: formatEmployeeOption,
                escapeMarkup: function(markup) { return markup; } // Allow HTML
            });

            // Custom formatting for dropdown options
            function formatEmployeeOption(option) {
                if (!option.id) {
                    return option.text;
                }

                var $option = $(option.element);
                var hasPayroll = $option.data('has-payroll') === true || $option.data('has-payroll') === 'true';
                var status = $option.data('status');

                if (hasPayroll && status) {
                    var statusClass = getStatusClass(status);
                    return $('<div class="employee-option">' +
                        '<span class="employee-info">' + option.text + '</span>' +
                        '<span class="employee-status">' +
                            '<span class="badge ' + statusClass + '">' + status + '</span>' +
                        '</span>' +
                    '</div>');
                } else {
                    return $('<div>' + option.text + '</div>');
                }
            }

            // Handle month/year change to refresh employee statuses
            $('#Month, #Year').on('change', function() {
                updateEmployeeStatuses();
            });

            function updateEmployeeStatuses() {
                let month = $('#Month').val();
                let year = $('#Year').val();

                $.ajax({
                    url: '@Url.Action("GetEmployeePayrollStatus")',
                    type: 'GET',
                    data: { month: month, year: year },
                    success: function(statuses) {
                        // Update the options with new status data
                        $('#employeeSelect option').each(function() {
                            var employeeId = $(this).val();
                            if (employeeId) {
                                var hasPayroll = statuses.hasOwnProperty(employeeId);
                                var status = hasPayroll ? statuses[employeeId] : null;

                                $(this).attr('data-has-payroll', hasPayroll);
                                $(this).attr('data-status', status || '');
                            }
                        });

                        // Refresh Select2 to show updated options
                        $('#employeeSelect').select2('destroy').select2({
                            theme: 'bootstrap-5',
                            width: '100%',
                            placeholder: '-- Select Employee --',
                            allowClear: true,
                            templateResult: formatEmployeeOption,
                            escapeMarkup: function(markup) { return markup; }
                        });
                    }
                });
            }

            function getStatusClass(status) {
                switch(status) {
                    case 'Pending': return 'bg-secondary';
                    case 'Pending Approval': return 'bg-warning text-dark';
                    case 'Approved': return 'bg-info';
                    case 'Rejected': return 'bg-danger';
                    case 'Completed': return 'bg-success';
                    default: return 'bg-secondary';
                }
            }

            // Handle employee selection change
            $('#employeeSelect').on('select2:select', function(e) {
                let employeeId = $(this).val();
                if (employeeId) {
                    let month = $('#Month').val();
                    let year = $('#Year').val();
                    window.location.href = '@Url.Action("Process")' + '?month=' + month + '&year=' + year + '&employeeId=' + employeeId;
                }
            });

            // Auto-calculate fields based on Basic Salary
            $('#BasicSalary').on('input', function() {
                calculateStatutoryAmounts();
            });

            $('#Month, #Year').on('change', function() {
                let employeeId = $('#employeeSelect').val();
                let month = $('#Month').val();
                let year = $('#Year').val();
                if (employeeId) {
                    window.location.href = '@Url.Action("Process")' + '?month=' + month + '&year=' + year + '&employeeId=' + employeeId;
                } else {
                    window.location.href = '@Url.Action("Process")' + '?month=' + month + '&year=' + year;
                }
            });

            // Handle employee selection change
            $('#employeeSelect').on('change', function() {
                let employeeId = $(this).val();
                if (employeeId) {
                    let month = $('#Month').val();
                    let year = $('#Year').val();
                    window.location.href = '@Url.Action("Process")' + '?month=' + month + '&year=' + year + '&employeeId=' + employeeId;
                }
                else {
                    window.location.href = '@Url.Action("Process")';
                }
            });

            // Handle "Same as Previous Month" checkbox
            $('#sameAsPrevious').on('change', function() {
                if ($(this).is(':checked')) {
                    let employeeId = $('#employeeSelect').val();
                    let month = parseInt($('#Month').val());
                    let year = parseInt($('#Year').val());

                    if (employeeId) {
                        loadPreviousMonthData(employeeId, month, year);
                    } else {
                        alert("Please select an employee first");
                        $(this).prop('checked', false);
                    }
                }
            });

            // Recalculate totals when any input changes
            $('.calculation-input').on('input', function() {
                calculateTotals();
            });

            // Initial calculation
            calculateTotals();

            // Show success message if exists
        @if (TempData["Success"] != null)
        {
            <text>
                        // You can replace this with your preferred notification method
                        alert('@TempData["Success"]');
            </text>
        }
        });

        function loadPreviousMonthData(employeeId, month, year) {
            $.ajax({
                url: '@Url.Action("GetPreviousMonthData")',
                type: 'GET',
                data: { employeeId, month, year },
                success: function(response) {
                    if (response.success) {
                        // Populate the form with previous month's data
                        $('#ProjectName').val(response.projectName);
                        $('#BasicSalary').val(response.basicSalary);
                        $('#EmployerEpf').val(response.employerEpf);
                        $('#EmployerSocso').val(response.employerSocso);
                        $('#EmployerEis').val(response.employerEis);
                        $('#EmployerTax').val(response.employerTax);
                        $('#EmployerOtherContributions').val(response.employerOtherContributions);
                        $('#EmployeeEpf').val(response.employeeEpf);
                        $('#EmployeeSocso').val(response.employeeSocso);
                        $('#EmployeeEis').val(response.employeeEis);
                        $('#EmployeeTax').val(response.employeeTax);

                        // Recalculate totals
                        calculateTotals();
                    } else {
                        alert("No data found for the previous month.");
                        $('#sameAsPrevious').prop('checked', false);
                    }
                },
                error: function() {
                    alert("Error loading previous month data.");
                    $('#sameAsPrevious').prop('checked', false);
                }
            });
        }

        function calculateStatutoryAmounts() {
            let basicSalary = parseFloat($('#BasicSalary').val()) || 0;

            // Calculate employer contributions
            $('#EmployerEpf').val((basicSalary * 0.13).toFixed(2));

            // TODO: Use manual entry for now, may implement the calculation logic here
            $('#EmployerSocso').val((basicSalary * 0.02).toFixed(2));  // Example rate
            $('#EmployerEis').val((basicSalary * 0.005).toFixed(2));   // Example rate

            // Calculate employee deductions
            $('#EmployeeEpf').val((basicSalary * 0.11).toFixed(2));

            // TODO: Use manual entry for now, may implement the calculation logic here
            $('#EmployeeSocso').val((basicSalary * 0.01).toFixed(2));  // Example rate
            $('#EmployeeEis').val((basicSalary * 0.002).toFixed(2));   // Example rate

            // Recalculate totals
            calculateTotals();
        }

        // Enhanced validation functions
        function validateFormData() {
            let isValid = true;
            let errors = [];

            // Basic validation
            const basicSalary = parseFloat($('#BasicSalary').val()) || 0;
            const employeeEpf = parseFloat($('#EmployeeEpf').val()) || 0;
            const employeeSocso = parseFloat($('#EmployeeSocso').val()) || 0;
            const employeeEis = parseFloat($('#EmployeeEis').val()) || 0;
            const employeeTax = parseFloat($('#EmployeeTax').val()) || 0;

            // Minimum wage validation (RM 1,500)
            if (basicSalary < 1000) {
                errors.push("Basic salary cannot be below RM 1,000");
                isValid = false;
            }

            // Maximum salary validation
            if (basicSalary > 999999.99) {
                errors.push("Basic salary cannot exceed RM 999,999.99");
                isValid = false;
            }

            // Total deductions validation
            const totalDeductions = employeeEpf + employeeSocso + employeeEis + employeeTax;
            if (totalDeductions >= basicSalary) {
                errors.push("Total employee deductions cannot equal or exceed basic salary");
                isValid = false;
            }

            // Net salary validation (minimum 50% of basic salary)
            const netSalary = basicSalary - totalDeductions;
            if (netSalary < (basicSalary * 0.5)) {
                errors.push("Net salary after deductions is unusually low (less than 50% of basic salary)");
                isValid = false;
            }

            // EPF percentage validation
            if (basicSalary > 0) {
                const employerEpf = parseFloat($('#EmployerEpf').val()) || 0;
                const employerEpfPercentage = (employerEpf / basicSalary) * 100;
                const employeeEpfPercentage = (employeeEpf / basicSalary) * 100;

                if (employerEpfPercentage > 20) {
                    errors.push("Employer EPF contribution exceeds 20% of basic salary");
                    isValid = false;
                }

                if (employeeEpfPercentage > 15) {
                    errors.push("Employee EPF contribution exceeds 15% of basic salary");
                    isValid = false;
                }
            }

            // SOCSO validation for salary levels
            const employeeSocsoAmount = parseFloat($('#EmployeeSocso').val()) || 0;
            const employerSocsoAmount = parseFloat($('#EmployerSocso').val()) || 0;

            if (basicSalary <= 4000) {
                if (employeeSocsoAmount > 19.75) {
                    errors.push("Employee SOCSO contribution exceeds maximum limit (RM 19.75) for this salary level");
                    isValid = false;
                }
                if (employerSocsoAmount > 33.25) {
                    errors.push("Employer SOCSO contribution exceeds maximum limit (RM 33.25) for this salary level");
                    isValid = false;
                }
            }

            // EIS validation (0.5% max)
            const employeeEisAmount = parseFloat($('#EmployeeEis').val()) || 0;
            const employerEisAmount = parseFloat($('#EmployerEis').val()) || 0;
            const maxEis = basicSalary * 0.005;

            if (employeeEisAmount > maxEis || employerEisAmount > maxEis) {
                errors.push("EIS contribution cannot exceed 0.5% of basic salary");
                isValid = false;
            }

            // Display errors if any
            if (!isValid) {
                showValidationErrors(errors);
            }

            return isValid;
        }

        function showValidationErrors(errors) {
            // Remove existing error alerts
            $('.validation-alert').remove();

            // Create error alert
            const errorHtml = `
                <div class="alert alert-danger alert-dismissible fade show validation-alert" role="alert">
                    <h6><i class="fas fa-exclamation-triangle me-2"></i>Validation Errors:</h6>
                    <ul class="mb-0">
                        ${errors.map(error => `<li>${error}</li>`).join('')}
                    </ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            // Insert error alert at the top of the form
            $('.card-body form').prepend(errorHtml);
            
            // Scroll to top to show errors
            $('html, body').animate({
                scrollTop: $('.validation-alert').offset().top - 100
            }, 500);
        }

        // Enhanced form submission with validation
        $('#payrollForm').on('submit', function(e) {
            e.preventDefault();
            
            if (validateFormData()) {
                // If validation passes, submit the form
                this.submit();
            }
        });

        // Real-time validation as user types
        $('.calculation-input').on('input blur', function() {
            // Clear previous individual field errors
            $(this).removeClass('is-invalid');
            $(this).next('.invalid-feedback').remove();

            // Validate specific field
            const fieldName = $(this).attr('name') || $(this).attr('id');
            const value = parseFloat($(this).val()) || 0;
            let error = null;

            switch(fieldName) {
                case 'BasicSalary':
                    if (value < 1000) {
                        error = "Basic salary cannot be below RM 1,000";
                    } else if (value > 999999.99) {
                        error = "Basic salary cannot exceed RM 999,999.99";
                    }
                    break;
                case 'EmployerEpf':
                case 'EmployeeEpf':
                    const basicSalary = parseFloat($('#BasicSalary').val()) || 0;
                    if (basicSalary > 0) {
                        const percentage = (value / basicSalary) * 100;
                        const maxPercentage = fieldName === 'EmployerEpf' ? 20 : 15;
                        if (percentage > maxPercentage) {
                            error = `EPF contribution exceeds ${maxPercentage}% of basic salary`;
                        }
                    }
                    break;
            }

            // Show field-specific error
            if (error) {
                $(this).addClass('is-invalid');
                $(this).after(`<div class="invalid-feedback">${error}</div>`);
            }

            // Always recalculate totals
            calculateTotals();
        });

        // Enhanced calculation with validation indicators
        function calculateTotals() {
            // Parse all values
            let basicSalary = parseFloat($('#BasicSalary').val()) || 0;
            let employeeEpf = parseFloat($('#EmployeeEpf').val()) || 0;
            let employeeSocso = parseFloat($('#EmployeeSocso').val()) || 0;
            let employeeEis = parseFloat($('#EmployeeEis').val()) || 0;
            let employeeTax = parseFloat($('#EmployeeTax').val()) || 0;

            let employerEpf = parseFloat($('#EmployerEpf').val()) || 0;
            let employerSocso = parseFloat($('#EmployerSocso').val()) || 0;
            let employerEis = parseFloat($('#EmployerEis').val()) || 0;
            let employerTax = parseFloat($('#EmployerTax').val()) || 0;
            let employerOther = parseFloat($('#EmployerOtherContributions').val()) || 0;

            // Calculate totals
            let totalWages = basicSalary - employeeEpf - employeeSocso - employeeEis - employeeTax;
            let totalEmployerCost = basicSalary + employerEpf + employerSocso + employerEis + employerTax + employerOther;

            // Update display with color coding
            const totalWagesElement = $('#totalWages');
            const totalCostElement = $('#totalEmployerCost');
            
            totalWagesElement.text('RM ' + totalWages.toFixed(2));
            totalCostElement.text('RM ' + totalEmployerCost.toFixed(2));

            // Color coding based on validation
            if (totalWages < 0) {
                totalWagesElement.addClass('text-danger').removeClass('text-success text-warning');
                totalWagesElement.attr('title', 'Net wages cannot be negative');
            } else if (basicSalary > 0 && totalWages < (basicSalary * 0.5)) {
                totalWagesElement.addClass('text-warning').removeClass('text-success text-danger');
                totalWagesElement.attr('title', 'Net wages seem unusually low');
            } else {
                totalWagesElement.addClass('text-success').removeClass('text-danger text-warning');
                totalWagesElement.removeAttr('title');
            }

            // Add tooltip initialization
            $('[title]').tooltip();
        }
    </script>
}
