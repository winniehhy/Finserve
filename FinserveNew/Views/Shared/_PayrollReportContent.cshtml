@model FinserveNew.Models.ViewModels.PayrollReportViewModel
@{
    string reportType = ViewBag.ReportType as string ?? "register";
    string periodType = ViewBag.PeriodType as string ?? "monthly";
}

@if (Model?.Payrolls != null && Model.Payrolls.Any())
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h6 class="mb-0">Report Results (@Model.Payrolls.Count records)</h6>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-success btn-sm" onclick="exportPayrollToExcel()">
                <i class="fas fa-file-excel me-1"></i>Export Excel
            </button>
        </div>
    </div>

    @if (reportType == "register")
    {
        <!-- Payroll Register Report -->
        <div class="report-section">
            <h6 class="mb-3"><i class="fas fa-list me-2"></i>Payroll Register</h6>
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="payrollRegisterTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Employee ID</th>
                            <th>Employee Name</th>
                            <th>Period</th>
                            <th>Basic Salary</th>
                            <th>Employer EPF</th>
                            <th>Employer SOCSO</th>
                            <th>Employer EIS</th>
                            <th>Employee EPF</th>
                            <th>Employee SOCSO</th>
                            <th>Employee EIS</th>
                            <th>Employee Tax</th>
                            <th>Net Wages</th>
                            <th>Total Cost</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payroll in Model.Payrolls)
                        {
                            <tr>
                                <td>@payroll.EmployeeID</td>
                                <td>@payroll.Employee.FirstName @payroll.Employee.LastName</td>
                                <td>@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(payroll.Month) @payroll.Year</td>
                                <td>RM @payroll.BasicSalary.ToString("N2")</td>
                                <td>RM @payroll.EmployerEpf.ToString("N2")</td>
                                <td>RM @payroll.EmployerSocso.ToString("N2")</td>
                                <td>RM @payroll.EmployerEis.ToString("N2")</td>
                                <td>RM @payroll.EmployeeEpf.ToString("N2")</td>
                                <td>RM @payroll.EmployeeSocso.ToString("N2")</td>
                                <td>RM @payroll.EmployeeEis.ToString("N2")</td>
                                <td>RM @payroll.EmployeeTax.ToString("N2")</td>
                                <td>RM @payroll.TotalWages.ToString("N2")</td>
                                <td>RM @payroll.TotalEmployerCost.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot class="table-light">
                        <tr class="fw-bold">
                            <td colspan="3">TOTALS</td>
                            <td>RM @Model.Payrolls.Sum(p => p.BasicSalary).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployerEpf).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployerSocso).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployerEis).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployeeEpf).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployeeSocso).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployeeEis).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.EmployeeTax).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.TotalWages).ToString("N2")</td>
                            <td>RM @Model.Payrolls.Sum(p => p.TotalEmployerCost).ToString("N2")</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }

    @if (reportType == "summary")
    {
        <!-- Summary Report -->
        <div class="report-section">
            <h6 class="mb-3"><i class="fas fa-chart-bar me-2"></i>Payroll Summary Report</h6>
            
            <!-- Summary Metrics Table -->
            <div class="table-responsive mb-4">
                <table class="table table-bordered table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th style="width: 60%;">Metric</th>
                            <th style="width: 40%;">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Total Payroll Records</td>
                            <td class="fw-bold">@Model.Payrolls.Count()</td>
                        </tr>
                        <tr>
                            <td>Total Gross Pay</td>
                            <td class="fw-bold">RM @Model.Payrolls.Sum(p => p.BasicSalary).ToString("N2")</td>
                        </tr>
                        <tr>
                            <td>Total Net Wages</td>
                            <td class="fw-bold">RM @Model.Payrolls.Sum(p => p.TotalWages).ToString("N2")</td>
                        </tr>
                        <tr>
                            <td>Total Employer Cost</td>
                            <td class="fw-bold">RM @Model.Payrolls.Sum(p => p.TotalEmployerCost).ToString("N2")</td>
                        </tr>
                        <tr>
                            <td>Average Basic Salary</td>
                            <td class="fw-bold">RM @(Model.Payrolls.Any() ? Model.Payrolls.Average(p => p.BasicSalary).ToString("N2") : "0.00")</td>
                        </tr>
                        <tr>
                            <td>Highest Basic Salary</td>
                            <td class="fw-bold">RM @(Model.Payrolls.Any() ? Model.Payrolls.Max(p => p.BasicSalary).ToString("N2") : "0.00")</td>
                        </tr>
                        <tr>
                            <td>Lowest Basic Salary</td>
                            <td class="fw-bold">RM @(Model.Payrolls.Any() ? Model.Payrolls.Min(p => p.BasicSalary).ToString("N2") : "0.00")</td>
                        </tr>
                        <tr class="table-secondary">
                            <td>Total Employer Contribution Rate</td>
                            <td class="fw-bold">
                                @{
                                    var totalBasic = Model.Payrolls.Sum(p => p.BasicSalary);
                                    var totalEmployerContrib = Model.Payrolls.Sum(p => p.EmployerEpf + p.EmployerSocso + p.EmployerEis);
                                    var contributionRate = totalBasic > 0 ? (totalEmployerContrib / totalBasic * 100) : 0;
                                }
                                @contributionRate.ToString("F2")%
                            </td>
                        </tr>
                        <tr class="table-secondary">
                            <td>Net Wages to Basic Salary Ratio</td>
                            <td class="fw-bold">
                                @{
                                    var totalNet = Model.Payrolls.Sum(p => p.TotalWages);
                                    var netRatio = totalBasic > 0 ? (totalNet / totalBasic * 100) : 0;
                                }
                                @netRatio.ToString("F2")%
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Monthly Breakdown for Yearly Reports -->
            @if (periodType == "yearly")
            {
                var monthlyData = Model.Payrolls.GroupBy(p => p.Month)
                    .Select(g => new { 
                        Month = g.Key, 
                        Count = g.Count(), 
                        TotalWages = g.Sum(p => p.TotalWages), 
                        TotalCost = g.Sum(p => p.TotalEmployerCost),
                        TotalGrossPay = g.Sum(p => p.BasicSalary),
                        AvgSalary = g.Average(p => p.BasicSalary)
                    })
                    .OrderBy(x => x.Month).ToList();

                <h6 class="mb-3"><i class="fas fa-calendar-alt me-2"></i>Monthly Breakdown</h6>
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead class="table-dark">
                            <tr>
                                <th>Month</th>
                                <th>Records</th>
                                <th>Total Gross Pay</th>
                                <th>Total Net Wages</th>
                                <th>Total Employer Cost</th>
                                <th>Average Basic Salary</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var month in monthlyData)
                            {
                                <tr>
                                    <td>@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month.Month)</td>
                                    <td>@month.Count</td>
                                    <td>RM @month.TotalGrossPay.ToString("N2")</td>
                                    <td>RM @month.TotalWages.ToString("N2")</td>
                                    <td>RM @month.TotalCost.ToString("N2")</td>
                                    <td>RM @month.AvgSalary.ToString("N2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr class="fw-bold">
                                <td>TOTAL</td>
                                <td>@monthlyData.Sum(m => m.Count)</td>
                                <td>RM @monthlyData.Sum(m => m.TotalGrossPay).ToString("N2")</td>
                                <td>RM @monthlyData.Sum(m => m.TotalWages).ToString("N2")</td>
                                <td>RM @monthlyData.Sum(m => m.TotalCost).ToString("N2")</td>
                                <td>RM @(monthlyData.Any() ? monthlyData.Average(m => m.AvgSalary).ToString("N2") : "0.00")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        </div>
    }

    @if (reportType == "analytics")
    {
        var payPeriods = Model.Payrolls.GroupBy(p => new { p.Month, p.Year })
            .Select(g => new { 
                Period = $"{System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(g.Key.Month)} {g.Key.Year}", 
                TotalGrossPay = g.Sum(p => p.BasicSalary),
                Count = g.Count(),
                AvgGrossPay = g.Average(p => p.BasicSalary)
            })
            .OrderBy(x => x.Period)
            .ToList();

        var statusGroups = Model.Payrolls.GroupBy(p => p.Employee.ConfirmationStatus ?? "Unknown")
            .Select(g => new { 
                Status = g.Key, 
                Count = g.Count(), 
                TotalGrossPay = g.Sum(p => p.BasicSalary),
                AverageGrossPay = g.Average(p => p.BasicSalary),
                Percentage = (double)g.Count() / Model.Payrolls.Count() * 100
            })
            .OrderByDescending(x => x.TotalGrossPay)
            .ToList();

        <!-- Analytics Dashboard with Charts -->
        <div class="report-section">
            <h6 class="mb-3">Payroll Analytics Dashboard</h6>

            <!-- Chart Type Toggle Buttons -->
            <div class="row mb-3">
                <div class="col-12 text-center">
                    <div class="btn-group" role="group" aria-label="Chart Type">
                        <button type="button" class="btn btn-outline-primary chart-toggle-btn active" data-chart="both" onclick="setPayrollChartView('both')">
                            <i class="fas fa-chart-area me-1"></i>Both Charts
                        </button>
                        <button type="button" class="btn btn-outline-primary chart-toggle-btn" data-chart="pie" onclick="setPayrollChartView('pie')">
                            <i class="fas fa-chart-pie me-1"></i>By Status Only
                        </button>
                        <button type="button" class="btn btn-outline-primary chart-toggle-btn" data-chart="line" onclick="setPayrollChartView('line')">
                            <i class="fas fa-chart-line me-1"></i>By Pay Period Only
                        </button>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="row mb-4">
                <!-- Gross Pay by Confirmation Status Chart -->
                <div class="col-md-6 mb-4" id="payrollPieChartContainer">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Gross Pay by Confirmation Status</h6>
                        </div>
                        <div class="card-body">
                            @if (statusGroups.Any())
                            {
                                <div style="position: relative; height: 400px;">
                                    <canvas id="payrollStatusChart"></canvas>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted" style="height: 400px; display: flex; align-items: center; justify-content: center; flex-direction: column;">
                                    <i class="fas fa-user-check fa-3x mb-2"></i>
                                    <p>No confirmation status data available</p>
                                    <small>Try adjusting your filter criteria</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Gross Pay by Pay Period Chart -->
                <div class="col-md-6 mb-4" id="payrollLineChartContainer">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">Gross Pay Trend by Pay Period</h6>
                        </div>
                        <div class="card-body">
                            @if (payPeriods.Any())
                            {
                                <div style="position: relative; height: 400px;">
                                    <canvas id="payrollTrendChart"></canvas>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted" style="height: 400px; display: flex; align-items: center; justify-content: center; flex-direction: column;">
                                    <i class="fas fa-chart-line fa-3x mb-2"></i>
                                    <p>No pay period data available</p>
                                    <small>Try adjusting your filter criteria</small>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Summary Table for Analytics -->
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-table me-2"></i>Detailed Analytics Summary</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                            <div class="col-md-6">
                                    <h6>Confirmation Status Summary</h6>
                                    @if (statusGroups.Any())
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-sm table-striped">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Status</th>
                                                        <th>Employees</th>
                                                        <th>Total Gross Pay</th>
                                                        <th>Distribution</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var status in statusGroups)
                                                    {
                                                        <tr>
                                                            <td><span class="fw-bold">@status.Status</span></td>
                                                            <td><span>@status.Count</span></td>
                                                            <td class="fw-bold">RM @status.TotalGrossPay.ToString("N2")</td>
                                                            <td>@status.Percentage.ToString("F1")%</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center text-muted p-3">
                                            <i class="fas fa-user-check fa-2x mb-2"></i>
                                            <p>No confirmation status data available</p>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-6">
                                    <h6>Pay Period Summary</h6>
                                    @if (payPeriods.Any())
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-sm table-striped">
                                                <thead class="table-light">
                                                    <tr>
                                                        <th>Period</th>
                                                        <th>Employees</th>
                                                        <th>Total Gross Pay</th>
                                                        <th>Avg Gross Pay</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var period in payPeriods)
                                                    {
                                                        <tr>
                                                            <td class="fw-bold">@period.Period</td>
                                                            <td><span>@period.Count</span></td>
                                                            <td class="fw-bold">RM @period.TotalGrossPay.ToString("N2")</td>
                                                            <td>RM @period.AvgGrossPay.ToString("N2")</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center text-muted p-3">
                                            <i class="fas fa-calendar fa-2x mb-2"></i>
                                            <p>No pay period data available</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <!-- Chart Data and Initialization Script -->
        <script type="text/javascript">
            // Initialize charts when the partial view is loaded
            function initializePayrollCharts() {
                console.log('Initializing payroll charts...');
                console.log('Report type:', '@reportType');
                console.log('Payrolls count:', @(Model?.Payrolls?.Count ?? 0));
                
                // Ensure Chart.js is loaded
                if (typeof Chart === 'undefined') {
                    console.error('Chart.js is not loaded');
                    return;
                }

                // Destroy existing charts if they exist
                if (window.payrollPieChart) {
                    window.payrollPieChart.destroy();
                    window.payrollPieChart = null;
                }
                if (window.payrollLineChart) {
                    window.payrollLineChart.destroy();
                    window.payrollLineChart = null;
                }

                // Prepare data for charts
                @if (statusGroups.Any())
                {
                    <text>
                    // Status Pie Chart Data
                    const statusLabels = @Html.Raw(Json.Serialize(statusGroups.Select(s => s.Status).ToArray()));
                    const statusData = @Html.Raw(Json.Serialize(statusGroups.Select(s => s.TotalGrossPay).ToArray()));
                    
                    console.log('Status chart data:', statusLabels, statusData);
                    
                    const statusColors = statusLabels.map(status => {
                        switch(status) {
                            case 'Confirmed': return '#28a745';
                            case 'Pending': return '#ffc107';
                            case 'Unknown': return '#6c757d';
                            default: return '#6c757d';
                        }
                    });

                    // Create Status Pie Chart
                    const statusCtx = document.getElementById('payrollStatusChart');
                    if (statusCtx) {
                        window.payrollPieChart = new Chart(statusCtx, {
                            type: 'doughnut',
                            data: {
                                labels: statusLabels,
                                datasets: [{
                                    label: 'Total Gross Pay (RM)',
                                    data: statusData,
                                    backgroundColor: statusColors,
                                    borderWidth: 2,
                                    borderColor: '#fff'
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'bottom',
                                        labels: {
                                            padding: 20,
                                            usePointStyle: true,
                                            font: {
                                                size: 12
                                            }
                                        }
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function(context) {
                                                const label = context.label || '';
                                                const value = context.parsed || 0;
                                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                                const percentage = ((value / total) * 100).toFixed(1);
                                                return label + ': RM ' + value.toLocaleString() + ' (' + percentage + '%)';
                                            }
                                        }
                                    }
                                },
                                cutout: '60%'
                            }
                        });
                        console.log('Pie chart created successfully');
                    } else {
                        console.error('Status chart canvas not found');
                    }
                    </text>
                }
                else
                {
                    <text>
                    console.log('No status data available for pie chart');
                    </text>
                }

                @if (payPeriods.Any())
                {
                    <text>
                    // Trend Line Chart Data
                    const trendLabels = @Html.Raw(Json.Serialize(payPeriods.Select(p => p.Period).ToArray()));
                    const trendData = @Html.Raw(Json.Serialize(payPeriods.Select(p => p.TotalGrossPay).ToArray()));
                    const trendCounts = @Html.Raw(Json.Serialize(payPeriods.Select(p => p.Count).ToArray()));
                    
                    console.log('Trend chart data:', trendLabels, trendData, trendCounts);

                    // Create Trend Line Chart
                    const trendCtx = document.getElementById('payrollTrendChart');
                    if (trendCtx) {
                        window.payrollLineChart = new Chart(trendCtx, {
                            type: 'line',
                            data: {
                                labels: trendLabels,
                                datasets: [{
                                    label: 'Employee Count',
                                    data: trendCounts,
                                    borderColor: '#007bff',
                                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                                    borderWidth: 3,
                                    fill: true,
                                    tension: 0.4,
                                    yAxisID: 'y'
                                }, {
                                    label: 'Gross Pay (RM)',
                                    data: trendData,
                                    borderColor: '#28a745',
                                    backgroundColor: 'rgba(40, 167, 69, 0.1)',
                                    borderWidth: 3,
                                    fill: false,
                                    tension: 0.4,
                                    yAxisID: 'y1'
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                interaction: {
                                    mode: 'index',
                                    intersect: false,
                                },
                                plugins: {
                                    legend: {
                                        position: 'bottom',
                                        labels: {
                                            padding: 20,
                                            usePointStyle: true,
                                            font: {
                                                size: 12
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    x: {
                                        display: true,
                                        title: {
                                            display: true,
                                            text: 'Pay Period'
                                        }
                                    },
                                    y: {
                                        type: 'linear',
                                        display: true,
                                        position: 'left',
                                        title: {
                                            display: true,
                                            text: 'Employee Count'
                                        }
                                    },
                                    y1: {
                                        type: 'linear',
                                        display: true,
                                        position: 'right',
                                        title: {
                                            display: true,
                                            text: 'Gross Pay (RM)'
                                        },
                                        grid: {
                                            drawOnChartArea: false,
                                        },
                                        ticks: {
                                            callback: function(value) {
                                                return 'RM ' + value.toLocaleString();
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        console.log('Line chart created successfully');
                    } else {
                        console.error('Trend chart canvas not found');
                    }
                    </text>
                }
                else
                {
                    <text>
                    console.log('No trend data available for line chart');
                    </text>
                }

                // Set initial chart view if function exists
                if (typeof window.setPayrollChartView === 'function') {
                    window.setPayrollChartView('both');
                } else {
                    console.log('setPayrollChartView function not available yet');
                }
            }

            // Call initialization when DOM is ready
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initializePayrollCharts);
            } else {
                initializePayrollCharts();
            }
        </script>
    }
}
else
{
    <div class="alert alert-info text-center py-4">
        <i class="fas fa-file-alt fa-3x mb-3"></i>
        <h5 class="mb-0">No payroll data available for the selected criteria.</h5>
        <p class="text-muted mt-2">Try adjusting your filter criteria or check if there are any completed payroll records for the selected period.</p>
        <div class="mt-3">
            <button type="button" class="btn btn-primary" onclick="document.getElementById('reportType').value='register'; document.getElementById('generateReport').click();">
                <i class="fas fa-refresh me-1"></i>View All Records
            </button>
        </div>
    </div>
}